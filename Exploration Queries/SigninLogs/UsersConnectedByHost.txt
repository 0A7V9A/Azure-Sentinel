// Id: 37fdc179-d35c-4dcd-b6ff-6cf02248d8f9
// DisplayName: HostName with accociated Accounts
// Description: The hostname usage by a given Account (set time range to +-1d when running the query)
// InputEntityType: Host
// InputFields: [HostName]
// OutputEntityTypes: [Account, Ip]
// QueryPeriodBefore: 1d
// QueryPeriodAfter: 1d
// DataSource: #SigninLogs
// Tactics: #Discovery, #LateralMovement, #Collection

let GetAccountsFromHost = (v_Host_HostName:string){
SigninLogs
| extend RemoteHost = tolower(tostring(DeviceDetail.displayName))
| where RemoteHost == tolower(v_Host_HostName)
| extend OS = tostring(DeviceDetail.operatingSystem), Browser = tostring(DeviceDetail.browser), TrustType = tostring(DeviceDetail.trustType)
| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)
| extend State = tostring(LocationDetails.state), City = tostring(LocationDetails.city)
| extend Latitude = tostring(LocationDetails.geoCoordinates.latitude), Longitude = tostring(LocationDetails.geoCoordinates.longitude)
| summarize min(TimeGenerated), max(TimeGenerated), count() by RemoteHost , UserDisplayName, OS, IPAddress, State, City, Latitude, Longitude
| project StartTimeUtc = min_TimeGenerated, EndTimeUtc = max_TimeGenerated, RemoteHost, UserDisplayName, OS, IPAddress, State, City, Latitude, Longitude
| top 10 by StartTimeUtc desc nulls last             
| project-rename Account_UnstructuredName=UserDisplayName, Account_Host_UnstructuredName=RemoteHost, Account_Host_OsVersion=OS, IP_Address=IPAddress, IP_Location_State=State, IP_Location_City=City, IP_Location_Latitude=Latitude, IP_Location_Longitude=Longitude
};
// change <HostName> value below
GetAccountsFromHost('<HostName>')