param([string] $PackageUri, [string] $SubscriptionId, [string] $ResourceGroupName, [string] $FunctionAppName, [string] $KeyVaultName, [string] $StorageAccountName, [string] $ObjectId, [string] $FAScope, [string] $SAScope, [string] $KVScope)

#Connect Azure Powershell module via Service Principal.
$credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:AppId, (ConvertTo-SecureString $env:AppSecret -AsPlainText -Force)
Connect-AzAccount -ServicePrincipal -TenantId $env:TenantId -Credential $credential -Subscription $SubscriptionId

#Download Function App package and publish.
Invoke-WebRequest -Uri $PackageUri -OutFile functionPackage.zip
Publish-AzWebapp -ResourceGroupName $ResourceGroupName -Name $FunctionAppName -ArchivePath functionPackage.zip -Force

#Get list of Function App outbound IPs so we can restrict network access on the Key Vault and Storage Account.
$functionAppIps = (Get-AzFunctionApp -ResourceGroupName $ResourceGroupName -Name $FunctionAppName).PossibleOutboundIPAddress.Split(',')

$ipsArray = New-Object System.Collections.ArrayList
foreach ($ip in $functionAppIps) {
    $ipsArray.Add(@{IPAddressOrRange="$ip";Action="allow"}) | Out-Null
    Add-AzKeyVaultNetworkRule -VaultName $KeyVaultName -IpAddressRange '$ip'
}
Update-AzKeyVaultNetworkRuleSet -VaultName $KeyVaultName -DefaultAction Deny -Bypass None
Update-AzStorageAccountNetworkRuleSet -ResourceGroupName $ResourceGroupName -Name $StorageAccountName -IPRule $ipsArray -Bypass None -DefaultAction Deny

#Cleanup the Service Principal Owner role assignments now that access is no longer needed.
Remove-AzRoleAssignment -ObjectId $ObjectId -RoleDefinitionName Owner -Scope $FAScope
Remove-AzRoleAssignment -ObjectId $ObjectId -RoleDefinitionName Owner -Scope $SAScope
Remove-AzRoleAssignment -ObjectId $ObjectId -RoleDefinitionName Owner -Scope $KVScope
  