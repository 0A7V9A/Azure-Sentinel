@description('Globally unique name for Key Vault used to store Function App secrets.')
param KeyVaultName string = 'kv-${uniqueString(resourceGroup().id)}'
@description('Name for Function App resource that will be deployed')
param FunctionAppName string = 'fa-${uniqueString(resourceGroup().id)}'
@description('Select to enable Application Insights for the Function App. This will allow you to monitor the status of the Function App for any errors. The Log Analytics Workspace specified in the "Log Analytics Resource Id" Parameter will be used to store the Application Insights data.')
param DeployApplicationInsights bool = true
@description('Name for the Applications Insights resource that will be used by the Function App if enabled in the DeployApplicationInsights parameter.')
param AppInsightsName string = 'ai-${uniqueString(resourceGroup().id)}'
@description('Uri where the Function App package is located. Use default value unless you are hosting the package somewhere else.')
param FunctionAppPackageUri string = 'https://raw.githubusercontent.com/anders-alex/Azure-Sentinel/DataConnector-M365Defender-VulnerabilityManagement/DataConnectors/M365Defender-VulnerabilityManagement/functionPackage.zip'
@description('Uri where the post deployment script is located. This is used to publish the Function App code after the resources have been deploted. Use default value unless you are hosting the script somewhere else.')
param DeploymentScriptUri string = 'https://raw.githubusercontent.com/anders-alex/Azure-Sentinel/DataConnector-M365Defender-VulnerabilityManagement/DataConnectors/M365Defender-VulnerabilityManagement/deploymentScript.ps1'
@description('Name for App Service Plan resource that will be deployed. This is where the Function App will run.')
param AppServicePlanName string = 'asp-${uniqueString(resourceGroup().id)}'
@description('Globally unique name for the Storage Account used by the Function App.')
param StorageAccountName string = 'sa${uniqueString(resourceGroup().id)}'
@description('Name for Data Collection Endpoint used to ingest data into Log Analytics workspace.')
param DataCollectionEndpointName string = 'dce-${uniqueString(resourceGroup().id)}'
@description('Name for Data Collection Rule used to ingest data into Log Analytics workspace.')
param DataCollectionRuleName string = 'dcr-${uniqueString(resourceGroup().id)}'
@description('Azure Resource Id of the Log Analytics Workspace where you like the MDVM and optional Function App Application Insights data to reside. The format is: "/subscriptions/xxxxxxxx-xxxxxxxx-xxxxxxxx-xxxxxxxx-xxxxxxxx/resourcegroups/xxxxxxxx/providers/microsoft.operationalinsights/workspaces/xxxxxxxx"')
param LogAnalyticsWorkspaceResourceId string
@description('Azure location/region of the Log Analytics Workspace referenced in the LogAnalyticsWorkspaceResourceId parameter.')
@allowed(
  [
    'asia'
    'asiapacific'
    'australia'
    'australiacentral'
    'australiacentral2'
    'australiaeast'
    'australiasoutheast'
    'brazil'
    'brazilsouth'
    'brazilsoutheast'
    'canada'
    'canadacentral'
    'canadaeast'
    'centralindia'
    'centralus'
    'centraluseuap'
    'eastasia'
    'eastus'
    'eastus2'
    'eastus2euap'
    'europe'
    'france'
    'francecentral'
    'francesouth'
    'germany'
    'germanynorth'
    'germanywestcentral'
    'global'
    'india'
    'japan'
    'japaneast'
    'japanwest'
    'korea'
    'koreacentral'
    'koreasouth'
    'northcentralus'
    'northeurope'
    'norway'
    'norwayeast'
    'norwaywest'
    'qatarcentral'
    'southafrica'
    'southafricanorth'
    'southafricawest'
    'southcentralus'
    'southeastasia'
    'southindia'
    'swedencentral'
    'switzerland'
    'switzerlandnorth'
    'switzerlandwest'
    'uaecentral'
    'uaenorth'
    'uksouth'
    'ukwest'
    'unitedstates'
    'westcentralus'
    'westeurope'
    'westindia'
    'westus'
    'westus2'
    'westus3'
  ]
)
param LogAnalyticsWorkspaceLocation string
@description('Application/Client Id of Azure AD App Registration created to access MDVM data and destination Log Analytics Workspace.')
param AppId string
@description('Object Id of Azure AD App Registration created to access MDVM data and destination Log Analytics Workspace.')
param ObjectId string
@description('Tenant Id of Azure AD App Registration created to access MDVM data and the destination Log Analytics Workspace.')
param TenantId string
@secure()
@description('Secret of Azure AD App Registration created to access MDVM data and the destination Log Analytics Workspace.')
param AppSecret string

var Location = resourceGroup().location

resource storageAccount 'Microsoft.Storage/storageAccounts@2021-08-01' = {
  name: StorageAccountName
  location: Location
  sku: {
    name: 'Standard_LRS'
  }
  kind: 'Storage'
}

resource keyVault 'Microsoft.KeyVault/vaults@2022-07-01' = {
  name: KeyVaultName
  location: Location
  properties: {
    sku: {
      family: 'A'
      name: 'premium'
    }
    tenantId: subscription().tenantId
    accessPolicies: [
      {
        objectId: functionApp.identity.principalId
        permissions: {
          secrets: [
            'get'
            'set'
            'list'
            'delete'
          ]
        }
        tenantId: subscription().tenantId
      }
    ]
  }
}

resource keyVaultSecretAppSecret 'Microsoft.KeyVault/vaults/secrets@2022-07-01' = {
  parent: keyVault
  name: 'AppSecret'
  properties: {
    value: AppSecret
  }
}

resource hostingPlan 'Microsoft.Web/serverfarms@2021-03-01' = {
  name: AppServicePlanName
  location: Location
  sku: {
    name: 'S1'
    tier: 'Standard'
  }
  properties: {}
}

resource functionApp 'Microsoft.Web/sites@2022-03-01' = {
  name: FunctionAppName
  location: Location
  kind: 'functionapp,linux'
  identity: {
    type: 'SystemAssigned'
  }
  properties: {
    serverFarmId: hostingPlan.id
    siteConfig: {
      alwaysOn: true
      appSettings: [
        {
          name: 'AzureWebJobsStorage'
          value: 'DefaultEndpointsProtocol=https;AccountName=${StorageAccountName};EndpointSuffix=${environment().suffixes.storage};AccountKey=${storageAccount.listKeys().keys[0].value}'
        }
        {
          name: 'WEBSITE_CONTENTAZUREFILECONNECTIONSTRING'
          value: 'DefaultEndpointsProtocol=https;AccountName=${StorageAccountName};EndpointSuffix=${environment().suffixes.storage};AccountKey=${storageAccount.listKeys().keys[0].value}'
        }
        {
          name: 'AzureWebJobsSecretStorageType'
          value: 'keyvault'
        }
        {
          name: 'AzureWebJobsSecretStorageKeyVaultUri'
          value: 'https://${KeyVaultName}.vault.azure.net/'
        }
        {
          name: 'WEBSITE_CONTENTSHARE'
          value: toLower(FunctionAppName)
        }
        {
          name: 'FUNCTIONS_EXTENSION_VERSION'
          value: '~4'
        }
        {
          name: 'WEBSITE_NODE_DEFAULT_VERSION'
          value: '~10'
        }
        {
          name: 'APPINSIGHTS_INSTRUMENTATIONKEY'
          value: DeployApplicationInsights == true ? applicationInsights.properties.InstrumentationKey : ''
        }
        {
          name: 'FUNCTIONS_WORKER_RUNTIME'
          value: 'powershell'
        }
        {
          name: 'WEBSITE_RUN_FROM_PACKAGE'
          value: '1'
        }
        {
          name: 'LAW_RESOURCE_ID'
          value: LogAnalyticsWorkspaceResourceId
        }
        {
          name: 'DCR_IMMUTABLE_ID'
          value: dcr.properties.immutableId
        }
        {
          name: 'DCE_URI'
          value: dce.properties.logsIngestion.endpoint
        }
        {
          name: 'APP_ID'
          value: AppId
        }
        {
          name: 'TENANT_ID'
          value: TenantId
        }
        {
          name: 'APP_SECRET'
          value: '@Microsoft.KeyVault(VaultName=${KeyVaultName};SecretName=AppSecret)'
        }
        {
          name: 'BATCH_SIZE'
          value: '950'
        }
      ]
      ftpsState: 'Disabled'
      minTlsVersion: '1.2'
    }
    httpsOnly: true
    clientCertEnabled: true
    clientCertMode: 'OptionalInteractiveUser'
  }
}

resource applicationInsights 'Microsoft.Insights/components@2020-02-02' = if (DeployApplicationInsights == true) {
  name: AppInsightsName
  location: Location
  kind: 'web'
  properties: {
    Application_Type: 'web'
    Request_Source: 'rest'
    WorkspaceResourceId: LogAnalyticsWorkspaceResourceId
  }
}

resource dce 'Microsoft.Insights/dataCollectionEndpoints@2021-09-01-preview' = {
  name: DataCollectionEndpointName
  location: LogAnalyticsWorkspaceLocation
  properties: {}
}

resource roleAssignmentDcr 'Microsoft.Authorization/roleAssignments@2020-10-01-preview' = {
  name: guid(dcr.id, '/providers/Microsoft.Authorization/roleDefinitions/3913510d-42f4-4e42-8a64-420c390055eb')
  scope: dcr
  properties: {
    roleDefinitionId: '/providers/Microsoft.Authorization/roleDefinitions/3913510d-42f4-4e42-8a64-420c390055eb'
    principalId: ObjectId
    principalType: 'ServicePrincipal'
  }
}

resource dcr 'Microsoft.Insights/dataCollectionRules@2021-09-01-preview' = {
  dependsOn: [
    tableMDVMCveKb
    tableMDVMRecommendations
    tableMDVMVulnerabilitiesByDevice 
  ]
  name: DataCollectionRuleName
  location: LogAnalyticsWorkspaceLocation
  properties: {
    dataCollectionEndpointId: dce.id
    streamDeclarations: {
      'Custom-MDVMVulnerabilitiesByDevice_CL': {
        columns: [
          {
            name: 'cveId'
            type: 'string'
          }
          {
            name: 'cvssScore'
            type: 'real'
          }
          {
            name: 'deviceId'
            type: 'string'
          }
          {
            name: 'deviceName'
            type: 'string'
          }
          {
            name: 'diskPaths'
            type: 'dynamic'
          }
          {
            name: 'endOfSupportDate'
            type: 'dynamic'
          }
          {
            name: 'endOfSupportStatus'
            type: 'dynamic'
          }
          {
            name: 'exploitabilityLevel'
            type: 'string'
          }
          {
            name: 'firstSeenTimestamp'
            type: 'datetime'
          }
          {
            name: 'vulnId'
            type: 'string'
          }
          {
            name: 'lastSeenTimestamp'
            type: 'datetime'
          }
          {
            name: 'osArchitecture'
            type: 'string'
          }
          {
            name: 'osPlatform'
            type: 'string'
          }
          {
            name: 'osVersion'
            type: 'string'
          }
          {
            name: 'rbacGroupId'
            type: 'int'
          }
          {
            name: 'rbacGroupName'
            type: 'string'
          }
          {
            name: 'recommendationReference'
            type: 'string'
          }
          {
            name: 'recommendedSecurityUpdate'
            type: 'dynamic'
          }
          {
            name: 'recommendedSecurityUpdateId'
            type: 'dynamic'
          }
          {
            name: 'recommendedSecurityUpdateUrl'
            type: 'dynamic'
          }
          {
            name: 'registryPaths'
            type: 'dynamic'
          }
          {
            name: 'securityUpdateAvailable'
            type: 'boolean'
          }
          {
            name: 'softwareName'
            type: 'string'
          }
          {
            name: 'softwareVendor'
            type: 'string'
          }
          {
            name: 'softwareVersion'
            type: 'string'
          }
          {
            name: 'TimeGenerated'
            type: 'datetime'
          }
          {
            name: 'vulnerabilitySeverityLevel'
            type: 'string'
          }
        ]
      }
      'Custom-MDVMRecommendations_CL': {
        columns: [
          {
            name: 'activeAlert'
            type: 'boolean'
          }
          {
            name: 'associatedThreats'
            type: 'dynamic'
          }
          {
            name: 'configScoreImpact'
            type: 'string'
          }
          {
            name: 'exposedMachinesCount'
            type: 'int'
          }
          {
            name: 'exposureImpact'
            type: 'real'
          }
          {
            name: 'hasUnpatchableCve'
            type: 'boolean'
          }
          {
            name: 'recId'
            type: 'string'
          }
          {
            name: 'nonProductivityImpactedAssets'
            type: 'int'
          }
          {
            name: 'productName'
            type: 'string'
          }
          {
            name: 'publicExploit'
            type: 'boolean'
          }
          {
            name: 'recommendationCategory'
            type: 'string'
          }
          {
            name: 'recommendationName'
            type: 'string'
          }
          {
            name: 'recommendedProgram'
            type: 'string'
          }
          {
            name: 'recommendedVendor'
            type: 'string'
          }
          {
            name: 'recommendedVersion'
            type: 'string'
          }
          {
            name: 'relatedComponent'
            type: 'string'
          }
          {
            name: 'remediationType'
            type: 'string'
          }
          {
            name: 'severityScore'
            type: 'int'
          }
          {
            name: 'status'
            type: 'string'
          }
          {
            name: 'subCategory'
            type: 'string'
          }
          {
            name: 'TimeGenerated'
            type: 'datetime'
          }
          {
            name: 'totalMachineCount'
            type: 'int'
          }
          {
            name: 'vendor'
            type: 'string'
          }
          {
            name: 'weaknesses'
            type: 'int'
          }
        ]
      }
      'Custom-MDVMCVEKB_CL': {
        columns: [
          {
            name: 'cvssV3'
            type: 'string'
          }
          {
            name: 'description'
            type: 'string'
          }
          {
            name: 'exploitInKit'
            type: 'boolean'
          }
          {
            name: 'exploitTypes'
            type: 'dynamic'
          }
          {
            name: 'exploitUris'
            type: 'string'
          }
          {
            name: 'exploitVerified'
            type: 'boolean'
          }
          {
            name: 'exposedMachines'
            type: 'int'
          }
          {
            name: 'cveId'
            type: 'string'
          }
          {
            name: 'name'
            type: 'string'
          }
          {
            name: 'publicExploit'
            type: 'boolean'
          }
          {
            name: 'publishedOn'
            type: 'datetime'
          }
          {
            name: 'severity'
            type: 'string'
          }
          {
            name: 'TimeGenerated'
            type: 'datetime'
          }
          {
            name: 'updatedOn'
            type: 'datetime'
          }
        ]
      }

    }
    destinations: {
      logAnalytics: [
        {
          name: split(LogAnalyticsWorkspaceResourceId, '/')[8]
          workspaceResourceId: LogAnalyticsWorkspaceResourceId
        }
      ]
    }
    dataFlows: [
      {
        streams: [
          'Custom-MDVMVulnerabilitiesByDevice_CL'
        ]
        destinations: [
          split(LogAnalyticsWorkspaceResourceId, '/')[8]
        ]
        transformKql: 'source'
        outputStream: 'Custom-MDVMVulnerabilitiesByDevice_CL'
      }
      {
        streams: [
          'Custom-MDVMRecommendations_CL'
        ]
        destinations: [
          split(LogAnalyticsWorkspaceResourceId, '/')[8]
        ]
        transformKql: 'source'
        outputStream: 'Custom-MDVMRecommendations_CL'
      }
      {
        streams: [
          'Custom-MDVMCVEKB_CL'
        ]
        destinations: [
          split(LogAnalyticsWorkspaceResourceId, '/')[8]
        ]
        transformKql: 'source'
        outputStream: 'Custom-MDVMCVEKB_CL'
      }
    ]
  }
}

module rbacAssignmentLaw 'modules/lawRbacAssignment.bicep' = {
  scope: resourceGroup(split(LogAnalyticsWorkspaceResourceId, '/')[2], split(LogAnalyticsWorkspaceResourceId, '/')[4])
  name: 'rbacAssignmentLaw'
  params: {
    principalId: ObjectId
    roleDefId: '/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293'
    scopedResourceName: split(LogAnalyticsWorkspaceResourceId, '/')[8]
  }
}

module tableMDVMCveKb 'modules/lawCustomTable.bicep' = {
  name: 'tableMDVMCveKb'
  scope: resourceGroup(split(LogAnalyticsWorkspaceResourceId, '/')[2], split(LogAnalyticsWorkspaceResourceId, '/')[4])
  params: {
    lawName: split(LogAnalyticsWorkspaceResourceId, '/')[8]
    tableName: 'MDVMCVEKB_CL'
    plan: 'Analytics'
    columns: [
      {
        name: 'cvssV3'
        type: 'string'
      }
      {
        name: 'description'
        type: 'string'
      }
      {
        name: 'exploitInKit'
        type: 'boolean'
      }
      {
        name: 'exploitTypes'
        type: 'dynamic'
      }
      {
        name: 'exploitUris'
        type: 'string'
      }
      {
        name: 'exploitVerified'
        type: 'boolean'
      }
      {
        name: 'exposedMachines'
        type: 'int'
      }
      {
        name: 'cveId'
        type: 'string'
      }
      {
        name: 'name'
        type: 'string'
      }
      {
        name: 'publicExploit'
        type: 'boolean'
      }
      {
        name: 'publishedOn'
        type: 'datetime'
      }
      {
        name: 'severity'
        type: 'string'
      }
      {
        name: 'TimeGenerated'
        type: 'datetime'
      }
      {
        name: 'updatedOn'
        type: 'datetime'
      }
    ]
  }
}

module tableMDVMRecommendations 'modules/lawCustomTable.bicep' = {
  name: 'tableMDVMRecommendations'
  scope: resourceGroup(split(LogAnalyticsWorkspaceResourceId, '/')[2], split(LogAnalyticsWorkspaceResourceId, '/')[4])
  params: {
    lawName: split(LogAnalyticsWorkspaceResourceId, '/')[8]
    tableName: 'MDVMRecommendations_CL'
    plan: 'Analytics'
    columns: [
      {
        name: 'activeAlert'
        type: 'boolean'
      }
      {
        name: 'associatedThreats'
        type: 'dynamic'
      }
      {
        name: 'configScoreImpact'
        type: 'string'
      }
      {
        name: 'exposedMachinesCount'
        type: 'int'
      }
      {
        name: 'exposureImpact'
        type: 'real'
      }
      {
        name: 'hasUnpatchableCve'
        type: 'boolean'
      }
      {
        name: 'recId'
        type: 'string'
      }
      {
        name: 'nonProductivityImpactedAssets'
        type: 'int'
      }
      {
        name: 'productName'
        type: 'string'
      }
      {
        name: 'publicExploit'
        type: 'boolean'
      }
      {
        name: 'recommendationCategory'
        type: 'string'
      }
      {
        name: 'recommendationName'
        type: 'string'
      }
      {
        name: 'recommendedProgram'
        type: 'string'
      }
      {
        name: 'recommendedVendor'
        type: 'string'
      }
      {
        name: 'recommendedVersion'
        type: 'string'
      }
      {
        name: 'relatedComponent'
        type: 'string'
      }
      {
        name: 'remediationType'
        type: 'string'
      }
      {
        name: 'severityScore'
        type: 'int'
      }
      {
        name: 'status'
        type: 'string'
      }
      {
        name: 'subCategory'
        type: 'string'
      }
      {
        name: 'TimeGenerated'
        type: 'datetime'
      }
      {
        name: 'totalMachineCount'
        type: 'int'
      }
      {
        name: 'vendor'
        type: 'string'
      }
      {
        name: 'weaknesses'
        type: 'int'
      }
    ]
  }
}

module tableMDVMVulnerabilitiesByDevice 'modules/lawCustomTable.bicep' = {
  name: 'tableMDVMVulnerabilitiesByDevice'
  scope: resourceGroup(split(LogAnalyticsWorkspaceResourceId, '/')[2], split(LogAnalyticsWorkspaceResourceId, '/')[4])
  params: {
    lawName: split(LogAnalyticsWorkspaceResourceId, '/')[8]
    tableName: 'MDVMVulnerabilitiesByDevice_CL'
    plan: 'Analytics'
    columns: [
      {
        name: 'cveId'
        type: 'string'
      }
      {
        name: 'cvssScore'
        type: 'real'
      }
      {
        name: 'deviceId'
        type: 'string'
      }
      {
        name: 'deviceName'
        type: 'string'
      }
      {
        name: 'diskPaths'
        type: 'dynamic'
      }
      {
        name: 'endOfSupportDate'
        type: 'dynamic'
      }
      {
        name: 'endOfSupportStatus'
        type: 'dynamic'
      }
      {
        name: 'exploitabilityLevel'
        type: 'string'
      }
      {
        name: 'firstSeenTimestamp'
        type: 'datetime'
      }
      {
        name: 'vulnId'
        type: 'string'
      }
      {
        name: 'lastSeenTimestamp'
        type: 'datetime'
      }
      {
        name: 'osArchitecture'
        type: 'string'
      }
      {
        name: 'osPlatform'
        type: 'string'
      }
      {
        name: 'osVersion'
        type: 'string'
      }
      {
        name: 'rbacGroupId'
        type: 'int'
      }
      {
        name: 'rbacGroupName'
        type: 'string'
      }
      {
        name: 'recommendationReference'
        type: 'string'
      }
      {
        name: 'recommendedSecurityUpdate'
        type: 'dynamic'
      }
      {
        name: 'recommendedSecurityUpdateId'
        type: 'dynamic'
      }
      {
        name: 'recommendedSecurityUpdateUrl'
        type: 'dynamic'
      }
      {
        name: 'registryPaths'
        type: 'dynamic'
      }
      {
        name: 'securityUpdateAvailable'
        type: 'boolean'
      }
      {
        name: 'softwareName'
        type: 'string'
      }
      {
        name: 'softwareVendor'
        type: 'string'
      }
      {
        name: 'softwareVersion'
        type: 'string'
      }
      {
        name: 'TimeGenerated'
        type: 'datetime'
      }
      {
        name: 'vulnerabilitySeverityLevel'
        type: 'string'
      }
    ]
  }
}

resource roleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid(subscription().id, resourceGroup().id, functionApp.id)
  scope: functionApp 
  properties: {
    principalId: ObjectId
    roleDefinitionId: '/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635'
    principalType: 'ServicePrincipal'
  }
}

resource deploymentScript 'Microsoft.Resources/deploymentScripts@2020-10-01' = {
  name: 'deployCode'
  location: Location
  kind: 'AzurePowerShell'
  properties: {
    azPowerShellVersion: '8.3'
    retentionInterval: 'PT1H'
    timeout: 'PT5M'
    cleanupPreference: 'Always'
    environmentVariables: [
      {
        name: 'AppId'
        value: AppId 
      }
      {
        name: 'TenantId'
        value: TenantId 
      }
      {
        name: 'AppSecret'
        secureValue: AppSecret 
      }  
    ]
    /*
    scriptContent: '''
    param([string] $PackageUri, [string] $SubscriptionId, [string] $ResourceGroupName, [string] $FunctionAppName, [string] $ObjectId, [string] $Scope)
    $credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:AppId, (ConvertTo-SecureString $env:AppSecret -AsPlainText -Force)
    Connect-AzAccount -ServicePrincipal -TenantId $env:TenantId -Credential $credential -Subscription $SubscriptionId
    Write-Host $SubscriptionId
    Invoke-WebRequest -Uri $PackageUri -OutFile functionPackage.zip
    Publish-AzWebapp -ResourceGroupName $ResourceGroupName -Name $FunctionAppName -ArchivePath functionPackage.zip -Force
    Remove-AzRoleAssignment -ObjectId $ObjectId -RoleDefinitionName Owner -Scope $Scope
    '''
    */ 
    primaryScriptUri: DeploymentScriptUri 
    arguments: '-PackageUri ${FunctionAppPackageUri} -SubscriptionId ${split(subscription().id, '/')[2]} -ResourceGroupName ${resourceGroup().name} -FunctionAppName ${functionApp.name} -ObjectId ${ObjectId} -Scope ${functionApp.id}'
  }
}
