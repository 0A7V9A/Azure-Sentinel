{
    "properties": {
        "category": "SAPFunctions",
        "displayName": "SAPConnectorHealth",
        "query": "// function parameters:\r\n//// solution version check has moved to be handled by the \"Content hub\"\r\n//// let LatestSolutionVersion = '1.2.95';\r\nlet ThisSolutionVersion= '2.3.00';\r\n//// let LatestSolutionDateTime = todatetime(LatestSolutionDate);\r\nlet RedAgo = 21d; \r\nlet YellowAgo = 1d;\r\nlet GreenAgo= 2h;\r\nlet DeletionPatience= 30m;\r\nlet LatestAgentVersion = '${latestAgentVersion}';\r\nlet LatestSolutionVersion = '${latestSolutionVersion}';\r\nlet SystemRolesDictionary= dynamic({\"UP\": \"Unknown (Production)\", \"AH\": \"Agent Heartbeat\", \"P\": \"Production\", \"T\": \"Test\", \"C\": \"Customizing\", \"D\": \"Demo\", \"E\": \"Training/Education\", \"S\": \"SAP reference\"});\r\n// colors are there for the data connector UI\r\nlet colors = dynamic (['Green', 'Yellow', 'Red', 'Header', 'Unclear', 'Footer']);\r\n// prepare a template structure in case we are  missing the SAP_HeartBeat_CL table\r\nlet AgentHealthEmpty= datatable (Agent: string, SystemID: string, LastHealthSeen: datetime, LastDataSeen: datetime, TimeGenerated: datetime, LastConfigedOn: datetime, agent_id_s: string, AgentGUID: string, AgentName: string, KeyMode: string, SdkPath: string, VaultId: string, agent_ver_s: string, SncPath: string, SystemGUID: string, Action: string, WLItemID: string, CLientID: string, message_key_s: string, Message: string, ) ['Sentinel solution', 'Solution version check', '2021-03-01T00:00:00Z', '2021-03-01T00:00:00Z', '2021-03-01T00:00:00Z', '2021-03-01T00:00:00Z', 'Sentinel solution', '', '', '', '', '', '', '', '', '', '', '', '', ''];\r\n// get the configuration of the agents created by the data connector UI\r\nlet SAPAgentDetailsWL= (_GetWatchlist('SAPAgentDetails')\r\n| project-rename agent_id_s= SearchKey, LastConfigedOn= LastUpdatedTimeUTC , WLItemID= _DTItemId\r\n| extend system_id_s= tostring(column_ifexists('SystemID', '_')), AgentGUID= tostring(column_ifexists('AgentGUID', '')), SystemGUID=tostring(column_ifexists('SystemGUID', '')), WLItemID= tostring(WLItemID), AgentName= tostring(column_ifexists('AgentName', '')), VaultId= tostring(column_ifexists('VaultId', ''))\r\n// get last action per agent and system\r\n| summarize LastConfigedOn= arg_max(LastConfigedOn, *) by AgentGUID, SystemGUID);\r\n// combine the heartbeats and the watchlist data to produce a list of agents and system IDs.  \r\nlet AgentHealth = materialize((union isfuzzy=true AgentHealthEmpty, SAPAgentDetailsWL, SAP_HeartBeat_CL)\r\n| where TimeGenerated > ago(RedAgo) or isnull(TimeGenerated) or TimeGenerated == todatetime('2021-03-01T00:00:00Z')\r\n| extend LastHealthSeen = max_of(TimeGenerated, LastHealthSeen)\r\n// add agents from the SAPAgentDetails watchlist in case these are not yet sending data\r\n| extend Agent= iff(isnotempty(agent_id_s), agent_id_s,column_ifexists('agent_id_g','')), ClientID= column_ifexists('client_id_s', ''), system_guid_g= column_ifexists('SystemGUID','')\r\n| summarize Action= take_anyif(Action, isnotempty(Action)),  arg_max(LastHealthSeen, *), LastConfigedOn=max(LastConfigedOn), MessageKey= anyif(message_key_s, isnotempty(message_key_s) and TimeGenerated > ago(GreenAgo)) by Agent, system_id_s\r\n| extend SystemID = iff(system_id_s == 'N/A' or system_id_s == 'AGENT', 'AGENT', substring(system_id_s, 0, 3)), AgentVersion = agent_ver_s, LastConfigedOn=LastConfigedOn1, IsGUID= isnotnull(toguid(Agent)));\r\n//  find systems that have been converted to persistant GUIDs. their older IDs should be disregarded\r\nlet GUIDedSystems= AgentHealth | where IsGUID | summarize by SystemID | extend GUIDedSystem= true;\r\n// get the version per agent\r\nlet AgentsHeader = AgentHealth\r\n| summarize arg_max(LastHealthSeen, Agent, AgentVersion), AssociatedSystems= make_set_if(SystemID,Action==\"System Created\", 20) by Agent\r\n| project-keep Agent, AgentVersion, LastHealthSeen, AssociatedSystems\r\n| extend SystemID = 'Agent Version Check', AssociatedSystems= translate('[\"]','',tostring(AssociatedSystems));\r\n// AgentsHeader\r\n// prepare a template structure in case we are  missing all ABAP* tables\r\nlet AgentPotentialEmpty = datatable (PotentialAgent: string, SystemID_s: string, TimeGenerated: date)[];\r\n// agent potential- we are looking for SAP systems that send data but not heartbeats. a special case of very old agents that did not have heartbeats\r\nlet AgentPotential = AgentPotentialEmpty\r\n| union isfuzzy=true (SAPAuditLog | project TimeGenerated, SystemID_s= SystemdID)\r\n| project TimeGenerated, SystemID_s \r\n| where TimeGenerated > ago(RedAgo) \r\n| where isnotempty(SystemID_s) \r\n| summarize arg_max(TimeGenerated, SystemID_s) by SystemID_s\r\n| project SystemID_s, TimeGenerated\r\n| extend PotentialAgent = strcat(SystemID_s, ' ')\r\n| project-rename SystemID = SystemID_s\r\n, LastDataSeen = TimeGenerated;\r\n// helper function- handle values and texts for time spans\r\nlet FtimePassed = (DateTime: datetime, Occured: int = 1) {\r\ncase(\r\ndatetime_diff('Hour', now(), DateTime) < 0 or isnull(DateTime), bag_pack(strcat('{TimeSpan', tostring(Occured), '}'), 'is missing', strcat('{TimeScale', tostring(Occured), '}'), '')\r\n, datetime_diff('Hour', now(), DateTime) < 2, bag_pack(strcat('{TimeSpan', tostring(Occured), '}'), '1', strcat('{TimeScale', tostring(Occured), '}'), 'hour')\r\n, datetime_diff('Hour', now(), DateTime) < 24, bag_pack(strcat('{TimeSpan', tostring(Occured), '}'), tostring(datetime_diff('Hour', now(), DateTime)), strcat('{TimeScale', tostring(Occured), '}'), 'hours') \r\n, datetime_diff('Hour', now(), DateTime) < 48, bag_pack(strcat('{TimeSpan', tostring(Occured), '}'), '1', strcat('{TimeScale', tostring(Occured), '}'), 'day')\r\n, bag_pack(strcat('{TimeSpan', tostring(Occured), '}'), tostring(datetime_diff('Day', now(), DateTime)), strcat('{TimeScale', tostring(Occured), '}'), 'days'))\r\n};\r\n// helper function- determine statuses and details per SID\r\nlet FBaggedDetails = (Agent: string, LastDataSeen: datetime, LastHealthSeen: datetime, LastConfigedOn: datetime, LastHealthSeen4Agent: datetime, GreenAgo: timespan, YellowAgo: timespan, RedAgo: timespan, AgentVersion: string='0.0', SystemID: string='', MessageKey: string, Action: string) {\r\ncase(\r\n// helper function- to make judgment on the agent/ SID status/ version\r\n// handle deletions:\r\n// deleted and no hearbeat- that is OK!\r\n((Action == \"System Deleted\" or Action == \"Agent Deleted\") and (LastHealthSeen < ago(DeletionPatience) or isempty(LastHealthSeen) )),bag_pack('Details', strcat(Action, ' and no hearbeat observed'),'ExtendedDetails', 'The deletion is successful', 'Status', 'Remove', 'MessageCode', 'DeletionSuccess', 'Variables','')\r\n// deleted in the last DeletionPatience minutes and still heartbeat- warning!\r\n,((Action == \"System Deleted\" or Action == \"Agent Deleted\") and (LastConfigedOn + DeletionPatience) > LastHealthSeen  ),bag_pack('Details', strcat(Action, ' but heartbeat is still observed'),'ExtendedDetails', 'The deletion is still pending', 'Status', 'Yellow', 'MessageCode', 'DeletionPending', 'Variables','')\r\n// deleted more than DeletionPatience ago and still heartbeat- error!\r\n,((Action == \"System Deleted\" or Action == \"Agent Deleted\") and (LastConfigedOn + DeletionPatience) < LastHealthSeen ),bag_pack('Details', strcat(Action, ' but heartbeat is still observed'),'ExtendedDetails', 'The deletion has likely failed', 'Status', 'Red', 'MessageCode', 'DeletionFailed', 'Variables','')\r\n// PYRFC messages from Heartbeat cannot be good! \r\n,isnotempty(MessageKey), bag_pack('Details', strcat('error ', MessageKey, ' received from SAP system'),'ExtendedDetails', 'The agent reported an error received from SAP', 'Status', 'Red', 'MessageCode', MessageKey, 'Variables','') \r\n// UPAVLS - An upgrade is available for the Microsoft Sentinel for SAP solution. Current solution version {CurrentVersion}, latest version {LatestVersion}\r\n,(Agent == 'Sentinel solution' and strcmp(LatestSolutionVersion,ThisSolutionVersion) >0), bag_pack('Details', 'Solution update available','ExtendedDetails', 'An upgrade is available for the Microsoft Sentinel for SAP solution', 'Status', 'Remove', 'MessageCode', 'UPAVLS', 'Variables', bag_pack('{CurrentVersion}', ThisSolutionVersion, '{LatestVersion}', LatestSolutionVersion))   \r\n,Agent == 'Sentinel solution', bag_pack('Details', 'Current solution version is latest available','ExtendedDetails', 'The current solution version is the latest available', 'Status', 'Remove', 'MessageCode', 'UPNAVLS', 'Variables', bag_pack('{CurrentVersion}', ThisSolutionVersion))\r\n// agent version checks:\r\n// UPAVLA - An upgrade is available for the Microsoft Sentinel for SAP Agent. <br> Current Agent released date {CurrentVersion}, latest version relesed on {LatestVersion}.\r\n// Relevant only for heartbeat sending agents\r\n,(SystemID== 'AGENT' and isnotempty(AgentVersion) and strcmp(LatestAgentVersion, AgentVersion) > 0 ), bag_pack('Details', 'Agent update available', 'ExtendedDetails', 'An upgrade is available for the Microsoft Sentinel for SAP Agent', 'Status', 'Header', 'MessageCode', 'UPAVLA', 'Variables', bag_pack('{CurrentVersion}', AgentVersion, '{LatestVersion}', LatestAgentVersion)) \r\n// // UPNAVLA - The current agent's version is the latest available. <br>Current Version release data {CurrentVersion}.\r\n// ,(SystemID== 'AGENT' and isnotempty(AgentVersion) and strcmp(LatestAgentVersion, AgentVersion) < 0 ), bag_pack('Details', 'Current agent version is latest available', 'ExtendedDetails', 'The current agent version is the latest available', 'Status', 'Remove', 'MessageCode', 'UPNAVLA', 'Variables', bag_pack('{CurrentVersion}', AgentVersion)) \r\n// UPNAVLS - The current solution's version is the latest available. <br>Current Version release data {CurrentVersion}.\r\n// Agent Configuration checks:\r\n// ACIOK - Agent configuration is there (since GreenAgo) and so is heartbeat, remove this configuration check (Green)\r\n, SystemID== 'AGENT' and (isnotempty(LastConfigedOn) and (LastHealthSeen4Agent > ago(GreenAgo))), bag_pack('Details', 'Agent configuration is there', 'ExtendedDetails', strcat('Agent was configured ', FtimePassed(LastConfigedOn)['{TimeSpan1}'], ' ', FtimePassed(LastConfigedOn)['{TimeScale1}'], ' ago, and heartbeat sent since then'), 'Status', 'Green', 'MessageCode', 'ACIOK', 'Variables', FtimePassed(LastConfigedOn))\r\n// ACCUY - Agent configuration is there, and there is no heartbeat since (between green and yellow).- (Yellow, StatusCode= 1, )\r\n, ((SystemID== 'AGENT' and isnotempty(LastConfigedOn) and (max_of(LastHealthSeen4Agent, LastConfigedOn) > ago(YellowAgo)))), bag_pack('Details', 'Agent configuration is incomplete', 'ExtendedDetails', strcat('Agent was configured ', FtimePassed(LastConfigedOn)['{TimeSpan1}'], ' ', FtimePassed(LastConfigedOn)['{TimeScale1}'], ' ago, but no heartbeat was recieved since then. Please review configuration'), 'Status', 'Yellow', 'MessageCode', 'ACCUY', 'Variables', FtimePassed(LastConfigedOn))\r\n// ACCOY - Agent configuration is there, and there is no heartbeat since (between yellow and red).- (Red, StatusCode=2, )\r\n, (SystemID== 'AGENT' and isnotempty(LastConfigedOn) and max_of(LastHealthSeen4Agent, LastConfigedOn) < ago(YellowAgo)), bag_pack('Details', 'Agent configuration is incomplete', 'ExtendedDetails', strcat('Agent was configured ', FtimePassed(LastConfigedOn)['{TimeSpan1}'], ' ', FtimePassed(LastConfigedOn)['{TimeScale1}'], ' ago, but no heartbeat was recieved since then. Please review configuration'), 'Status', 'Red', 'MessageCode', 'ACCOY', 'Variables', FtimePassed(LastConfigedOn))\r\n// handle missing data or heartbeat at the systems ID level:\r\n// OKOK - HB recieved in the last {TimeSpan1}' ' {TimeScale1}.\r\n, ((SystemID != 'AGENT' and LastHealthSeen > ago(GreenAgo)) or (SystemID == 'AGENT' and LastHealthSeen4Agent > ago(GreenAgo))), bag_pack('Details', iff(SystemID == 'AGENT', 'Agent healthy','System healthy'), 'ExtendedDetails', strcat('Data or heartbeat recieved in the last ', FtimePassed(ago(GreenAgo))['{TimeSpan1}'], ' ', FtimePassed(ago(GreenAgo))['{TimeScale1}']), 'Status', 'Green', 'MessageCode', 'OKOK', 'Variables', FtimePassed(ago(GreenAgo)))\r\n// MDOG - missing data and hearbeat for over GreenAgo timespan - Missing data and heartbeat for over {TimeSpan1}' ' {TimeScale1}.  Check Connectivity.\r\n, ((SystemID != 'AGENT' and  LastHealthSeen > ago(YellowAgo)) or (SystemID == 'AGENT' and LastHealthSeen4Agent > ago(YellowAgo))), bag_pack('Details', strcat(iff(SystemID == 'AGENT', 'Agent ','System '), 'unreachable for over 2 hours'), 'ExtendedDetails', strcat('Missing data and heartbeat for over ', FtimePassed(ago(GreenAgo))['{TimeSpan1}'], ' ', FtimePassed(ago(GreenAgo))['{TimeScale1}']), 'Status', 'Yellow', 'MessageCode', 'MDOG', 'Variables', FtimePassed(ago(GreenAgo))) \r\n// MDOY - missing data and heartbeat for over YellowAgo timespan - Missing data and heartbeat for over {TimeSpan1}' ' {TimeScale1}.  Check Connectivity.\r\n, ((SystemID != 'AGENT' and LastHealthSeen > ago(RedAgo) or (SystemID == 'AGENT' and LastHealthSeen4Agent > ago(RedAgo)))), bag_pack('Details', strcat(iff(SystemID == 'AGENT', 'Agent ','System '), 'unreachable for over 24 hours'), 'ExtendedDetails', strcat('Missing data and heartbeat for over ', FtimePassed(ago(YellowAgo))['{TimeSpan1}'], ' ', FtimePassed(ago(YellowAgo))['{TimeScale1}']), 'Status', 'Red', 'MessageCode', 'MDOY', 'Variables', FtimePassed(ago(YellowAgo))) \r\n// UNCLEAR - fallback of all cases, 'Data Last Recieved %s ago, heartbeat last recieved %s ago' {Variable1, Variable2}\r\n, bag_pack('Details', 'Status unclear \u2013 check system', 'ExtendedDetails', strcat('Data last recieved ', FtimePassed(LastDataSeen)['{TimeSpan1}'], ' ', FtimePassed(LastDataSeen)['{TimeScale1}'], ' ago, heartbeat last recieved ', FtimePassed(LastHealthSeen, 2)['{TimeSpan2}'], ' ', FtimePassed(LastHealthSeen, 2)['{TimeScale2}'], ' ago'), 'Status', 'Unclear', 'MessageCode', 'UNCLEAR', 'Variables', bag_merge(FtimePassed(LastDataSeen), FtimePassed(DateTime= LastHealthSeen, Occured=2))))\r\n};\r\n// gather the heartbeat and configuration and add a line per agent for version check\r\nAgentHealth\r\n// remove the WL fields for now, as these are only there on some of the lines (agents only)\r\n| project-away AgentGUID, AgentName, KeyMode, SdkPath, VaultId, SncPath, WLItemID, Action, SystemGUID\r\n// | union (AgentsHeader | project Agent, AgentVersion, LastHealthSeen)\r\n// now join again with agentHeader to get the last heartbeat recieved from the agent and connected systems\r\n| join kind= leftouter (AgentsHeader\r\n| project Agent, LastHealthSeen4Agent= LastHealthSeen, AssociatedSystems, AgentVersion)\r\non Agent\r\n// SID health inferred from data coming in\r\n| join kind=fullouter AgentPotential on $left.SystemID == $right.SystemID\r\n| extend\r\nAgent = iff(isempty(Agent), PotentialAgent, Agent),\r\nLastSeen = max_of(LastHealthSeen, LastDataSeen)\r\n| extend SystemID = iff(SystemID == SystemID1, SystemID1, strcat(SystemID1, SystemID))\r\n| extend LastDataSeen = LastDataSeen1 // LastDataSeen1 is the real one coming from AgentPotential\r\n// get agent attributes from WL\r\n| join kind= leftouter  (((SAPAgentDetailsWL | where system_id_s == \"AGENT\") | union AgentHealthEmpty)| project AgentGUID, AgentName, KeyMode, SdkPath, VaultId, SncPath, AgentWLItemID= WLItemID, AgentAction= Action ) \r\non $left.Agent== $right.AgentGUID\r\n// get system attributes from WL\r\n| join kind= leftouter  (((SAPAgentDetailsWL | where system_id_s != \"AGENT\") | union AgentHealthEmpty)| project SystemWLItemID= WLItemID, SystemAction= Action, SystemGUID, system_id_s, SystemsAgentGUID= AgentGUID) \r\non $left.Agent== $right.SystemsAgentGUID, $left.system_guid_g== $right.SystemGUID\r\n| extend WLItemID= iff(SystemID==\"AGENT\", AgentWLItemID, SystemWLItemID)\r\n| extend Action= iff(SystemID==\"AGENT\", AgentAction, SystemAction)\r\n// disregard non-GUID-like rows for systems that have been upgraded to be GUID-like\r\n| lookup GUIDedSystems on SystemID\r\n| where IsGUID == true or (IsGUID == false and GUIDedSystem != true)\r\n// get the judgement from FBaggedDetails\r\n| extend BaggedDetails = FBaggedDetails(Agent, LastDataSeen, LastHealthSeen, LastConfigedOn, LastHealthSeen4Agent, GreenAgo, YellowAgo, RedAgo, AgentVersion, SystemID, MessageKey, Action)\r\n| evaluate bag_unpack(BaggedDetails)\r\n| where Status != 'Remove' // not everything is interesting\r\n| extend StatusCode = array_index_of(colors, Status)\r\n| extend SystemRoleCode= column_ifexists(\"sap_client_category_s\",\"UP\")\r\n| extend SystemRoleCode= iff(bag_has_key(SystemRolesDictionary,SystemRoleCode), SystemRoleCode, \"UP\")\r\n| extend SystemRole= tostring(SystemRolesDictionary[SystemRoleCode])\r\n// | extend SystemClient= iff(isempty(ClientID), SystemID, strcat(SystemID, '-', ClientID)) \r\n| where isnotempty(SystemID) or Agent == \"Sentinel solution\" // to allow for solution version check in\r\n| project-keep Agent, SystemID, MessageCode, Details, ExtendedDetails, LastSeen, Status, StatusCode, Variables, AgentGUID, AgentName, KeyMode, SdkPath, VaultId, SncPath, SystemRole, SystemRoleCode, WLItemID, Action, ClientID, SystemGUID, AssociatedSystems, MessageKey, Message, AgentVersion\r\n| order by StatusCode, Agent desc;",
        "functionAlias": "SAPConnectorHealth",
        "functionParameters": "Dummy:string = '_'",
        "version": 2,
        "etag": "*"
    },
    "name": "SAPConnectorHealth",
    "type": "savedSearches",
    "apiVersion": "2022-10-01"
}