let vCenter_logs =() {
vcenter_CL
| where Message has_any ("UserLoginSessionEvent","UserLogoutSessionEvent","vcenter-server: Role","vcenter-server: New role")
| extend EventType = iff(Message has "UserLoginSessionEvent", "UserLoginSessionEvent" , iif(Message has "UserLogoutSessionEvent", "UserLogoutSessionEvent",iif(Message has_any("vcenter-server: Role","vcenter-server: New role"),"AccessMgmt",dynamic(""))))
| extend EventVendor = 'vCenter'
| extend EventProduct = 'vCenter Server'
| extend UserLoginFields = iif(EventType == "UserLoginSessionEvent", extract_all(@"Event\s+\[(\d{7})\]\s\[1-1\]\s\[(\w.+Z)\]\s\[vim.event.(\w.+)\]\s\[info\]\s\[(\w.+)\]\s\[\]\s\[(\w.+)@(\w.+)\slogged\sin\sas\s(\w.+)\]", dynamic([1,2,3,4,5,6,7]),Message), dynamic(""))
| extend UserLogoutFields = iif(EventType == "UserLogoutSessionEvent", extract_all(@"(\w.+)\sEvent\s+\[(\d{7})\]\s\[1-1\]\s\[(\w.+Z)\]\s\[vim.event.(\w.+)\]\s\[info\]\s\[(\w.+)\]\s\[\]\s\[(\w.+)@(\w.+)\slogged\sout\s\((\w.+)\snumber\sof\sAPI\sinvocations:\s(\w),\suser\sagent:\s(\w.+)\)", dynamic([1,2,3,4,5,6,7,8,9,10]),Message), dynamic(""))
| extend AccessMgmtFields = iif(EventType == "AccessMgmt", extract_all(@"(\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2}.\w+.+\s)(\w+\s)vcenter-server:\sNew\srole\s(\w+.+)\s(\w+)", dynamic([1,2,3,4]),Message), dynamic(""))
| extend EventID = case(isnotempty(UserLoginFields), tostring(UserLoginFields[0][0]),
								isnotempty(UserLogoutFields), tostring(UserLogoutFields[0][1]), "")
| extend TimeGenerated = case(isnotempty(UserLoginFields), todatetime(UserLoginFields[0][1]),
								isnotempty(UserLogoutFields), todatetime(UserLogoutFields[0][2]),
                                isnotempty(AccessMgmtFields), todatetime(AccessMgmtFields[0][0]),dynamic(""))
| extend EventID = case(isnotempty(UserLoginFields), tostring(UserLoginFields[0][0]),
								isnotempty(UserLogoutFields), tostring(UserLogoutFields[0][1]), "")
| extend Domain = case(isnotempty(UserLoginFields), split(tostring(UserLoginFields[0][3]),'\\')[0],
								isnotempty(UserLogoutFields), split(tostring(UserLogoutFields[0][4]),'\\')[0], "")
| extend UserName = case(isnotempty(UserLoginFields), split(tostring(UserLoginFields[0][3]),'\\')[1],
								isnotempty(UserLogoutFields), split(tostring(UserLogoutFields[0][4]),'\\')[1], "")
| extend SourceIP = case(isnotempty(UserLoginFields), tostring(UserLoginFields[0][5]),
								isnotempty(UserLogoutFields), tostring(UserLogoutFields[0][6]), "")
| extend LoginSource = case(isnotempty(UserLoginFields), tostring(UserLoginFields[0][6]),
								isnotempty(UserLogoutFields), tostring(UserLogoutFields[0][9]), "")
| extend NumAPIInvoc = iif(EventType == "UserLogoutSessionEvent",tostring(UserLogoutFields[0][8]),dynamic(""))
| extend HostName = iif(EventType == "AccessMgmt",tostring(AccessMgmtFields[0][1]),dynamic(""))
| extend AccessMgmtRole = iif(EventType == "AccessMgmt",tostring(AccessMgmtFields[0][2]),dynamic(""))
//| extend TimeGenerated = iif(EventType == "AccessMgmt",todatetime(AccessMgmtFields[0][0]),dynamic(""))
| extend AccessMgmtOperation = strcat("Role-",iif(EventType == "AccessMgmt",tostring(AccessMgmtFields[0][3]),dynamic("")))
};
vCenter_logs
| project-away UserLoginFields, UserLogoutFields,AccessMgmtFields