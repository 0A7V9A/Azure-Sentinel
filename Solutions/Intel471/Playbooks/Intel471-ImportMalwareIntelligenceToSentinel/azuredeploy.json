{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "comments": "This playbook ingests malware indicators from Intel 471's Titan API into ThreatIntelligenceIndicator table.",
        "author": "Marcin Molenda, Intel 471, Inc."
    },
    "parameters": {
        "PlaybookName": {
            "defaultValue": "intel471-malware-indicators",
            "type": "String"
        },
        "TitanUserName": {
            "defaultValue": "",
            "type": "SecureString"
        },
        "TitanAPIKey": {
            "defaultValue": "",
            "type": "SecureString"
        },
        "LookBackDays": {
            "defaultValue": 0,
            "type": "int",
            "metadata": {
                "description": "How many days of history should be pulled on the first run. Leave 0 to start from the current time."
            }
        }
    },
    "variables": {
        "GraphSecurityConnectionName": "[concat('microsoftgraphsecurity-', parameters('PlaybookName'))]",
        "AzureBlobConnectionName": "[concat('azureblob-', parameters('PlaybookName'))]",
        "AzureStorageName": "[concat('i471sa', substring(uniqueString(resourceGroup().id),0,13))]",
        "AzureKeyVaultName": "[concat('i471kv', substring(uniqueString(resourceGroup().id),0,13))]",
        "AzureKeyVaultConnectionName": "[concat('keyvault-', parameters('PlaybookName'))]",
        "ContainerName": "default"
    },
    "resources": [
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2016-10-01",
            "name": "[variables('AzureKeyVaultName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "sku": {
                    "family": "A",
                    "name": "standard"
                },
                "tenantId": "[subscription().tenantId]",
                "enabledForDeployment": false,
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": true,
                "enableSoftDelete": true,
                "accessPolicies": [
                    {
                        "tenantId": "[subscription().tenantId]",
                        "objectId": "[reference(resourceId('Microsoft.Logic/workflows', parameters('PlaybookName')), '2017-07-01', 'full').identity.principalId]",
                        "permissions": {
                            "secrets": [
                                "get"
                            ]
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2016-10-01",
            "name": "[concat(variables('AzureKeyVaultName'), '/', 'TitanUserName')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('AzureKeyVaultName'))]"
            ],
            "properties": {
                "value": "[parameters('TitanUserName')]",
                "contentType": "string",
                "attributes": {
                    "enabled": true
                }
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2016-10-01",
            "name": "[concat(variables('AzureKeyVaultName'), '/', 'TitanAPIKey')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('AzureKeyVaultName'))]"
            ],
            "properties": {
                "value": "[parameters('TitanAPIKey')]",
                "contentType": "string",
                "attributes": {
                    "enabled": true
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2021-04-01",
            "name": "[variables('AzureStorageName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "accessTier": "Hot",
                "minimumTlsVersion": "TLS1_2",
                "supportsHttpsTrafficOnly": "true",
                "allowBlobPublicAccess": "false",
                "allowSharedKeyAccess": "true",
                "networkAcls": {
                    "bypass": "AzureServices",
                    "defaultAction": "Allow",
                    "ipRules": []
                }
            }
        },
        {
            "name": "[concat(variables('AzureStorageName'), '/default')]",
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2021-02-01",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('AzureStorageName'))]"
            ],
            "properties": {
                "deleteRetentionPolicy": {
                    "enabled": "false"
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('AzureStorageName'), '/default/', variables('ContainerName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('AzureStorageName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('AzureStorageName'))]"
            ],
            "properties": {
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('GraphSecurityConnectionName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "displayName": "[variables('GraphSecurityConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/microsoftgraphsecurity')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('AzureKeyVaultConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[parameters('PlaybookName')]",
                "customParameterValues": {},
                "alternativeParameterValues": {
                    "vaultName": "[variables('AzureKeyVaultName')]"
                },
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]"
                },
                "parameterValueType": "Alternative"
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('AzureBlobConnectionName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/', variables('AzureStorageName'))]"
            ],
            "properties": {
                "displayName": "[variables('AzureBlobConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
                },
                "parameterValues": {
                    "accountName": "[variables('AzureStorageName')]",
                    "accessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('AzureStorageName')), '2019-04-01').keys[0].value]"
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[resourceGroup().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('GraphSecurityConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('AzureBlobConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('AzureKeyVaultConnectionName'))]"
            ],
            "tags": {
                "LogicAppsCategory": "security"
            },
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "StorageName": {
                            "defaultValue": "",
                            "type": "String"
                        },
                        "ContainerName": {
                            "defaultValue": "",
                            "type": "String"
                        },
                        "BlobNameCursor": {
                            "defaultValue": "cursor.txt",
                            "type": "String"
                        },
                        "BlobNameFromDate": {
                            "defaultValue": "fromdate.txt",
                            "type": "String"
                        },
                        "LookBackDays": {
                            "defaultValue": 0,
                            "type": "int"
                        }
                    },
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "frequency": "Hour",
                                "interval": 1
                            },
                            "runtimeConfiguration": {
                                "concurrency": {
                                    "runs": 1
                                }
                            },
                            "type": "Recurrence"
                        }
                    },
                    "actions": {
                        "Collect_Indicators": {
                            "actions": {
                                "BuildTiIndicatorsPayload": {
                                    "actions": {
                                        "Append_to_array_variable": {
                                            "inputs": {
                                                "name": "tiIndicatorsPayload",
                                                "value": {
                                                    "action": "unknown",
                                                    "confidence": "@if(equals(items('BuildTiIndicatorsPayload')?['data']?['confidence'], 'high'), 85, if(equals(items('BuildTiIndicatorsPayload')?['data']?['confidence'], 'medium'), 50, 15))",
                                                    "description": "@concat('Intel 471 - ', items('BuildTiIndicatorsPayload')?['data']?['context']?['description'])",
                                                    "expirationDateTime": "@addToTime('1970-01-01T00:00:00Z', div(items('BuildTiIndicatorsPayload')?['data']['expiration'], 1000), 'second')",
                                                    "externalId": "@{items('BuildTiIndicatorsPayload')?['data']?['uid']}",
                                                    "fileHashType": "@{items('BuildTiIndicatorsPayload')?['composedHashType']}",
                                                    "fileHashValue": "@{items('BuildTiIndicatorsPayload')?['composedHashValue']}",
                                                    "fileSize": "@if(contains(items('BuildTiIndicatorsPayload')?['data']?['indicator_data'], 'file'),items('BuildTiIndicatorsPayload')?['data']?['indicator_data']?['file']?['size'],'')",
                                                    "fileType": "@if(contains(items('BuildTiIndicatorsPayload')?['data']?['indicator_data'], 'file'),items('BuildTiIndicatorsPayload')?['data']?['indicator_data']?['file']?['type'],'')",
                                                    "killChain": "@if(equals(items('BuildTiIndicatorsPayload')?['data']?['mitre_tactics'], 'command_and_control'), createArray('C2'),  if(equals(items('BuildTiIndicatorsPayload')?['data']?['mitre_tactics'], 'stage_capabilities'), createArray('Installation'), if(equals(items('BuildTiIndicatorsPayload')?['data']?['mitre_tactics'], 'initial_access'), createArray('Exploitation'), json('[]'))))",
                                                    "lastReportedDateTime": "@{addToTime('1970-01-01T00:00:00Z', div(items('BuildTiIndicatorsPayload')?['activity']['last'], 1000), 'second')}",
                                                    "malwareFamilyNames": [
                                                        "@{items('BuildTiIndicatorsPayload')?['data']['threat']['data']?['family']}"
                                                    ],
                                                    "networkIPv4": "@{items('BuildTiIndicatorsPayload')?['data']['indicator_data']?['address']}",
                                                    "targetProduct": "Azure Sentinel",
                                                    "threatType": "Malware",
                                                    "tlpLevel": "amber",
                                                    "url": "@{items('BuildTiIndicatorsPayload')?['data']['indicator_data']?['url']}"
                                                }
                                            },
                                            "runAfter": {},
                                            "type": "AppendToArrayVariable"
                                        }
                                    },
                                    "foreach": "@variables('collectedIndicators')",
                                    "runAfter": {
                                        "NormaliseFetchedIndicators": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach"
                                },
                                "ClearCollectedIndicators": {
                                    "inputs": {
                                        "name": "collectedIndicators",
                                        "value": []
                                    },
                                    "runAfter": {
                                        "Submit_multiple_tiIndicators": [
                                            "Succeeded",
                                            "TimedOut",
                                            "Failed"
                                        ]
                                    },
                                    "type": "SetVariable"
                                },
                                "ClearTiIndicatorsPayload": {
                                    "inputs": {
                                        "name": "tiIndicatorsPayload",
                                        "value": []
                                    },
                                    "runAfter": {
                                        "ClearCollectedIndicators": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable"
                                },
                                "CursorNotNull": {
                                    "actions": {
                                        "StoreCursor": {
                                            "inputs": {
                                                "body": "@string(variables('cursor'))",
                                                "headers": {
                                                    "ReadFileMetadataFromServer": true
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                    }
                                                },
                                                "method": "put",
                                                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageName')))}/files/@{encodeURIComponent(encodeURIComponent(parameters('ContainerName'),'/',parameters('BlobNameCursor')))}"
                                            },
                                            "runAfter": {
                                                "UpdateCursor": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection"
                                        },
                                        "UpdateCursor": {
                                            "inputs": {
                                                "name": "cursor",
                                                "value": "@body('Parse_JSON')?['cursorNext']"
                                            },
                                            "runAfter": {},
                                            "type": "SetVariable"
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "not": {
                                                    "equals": [
                                                        "@body('Parse_JSON')?['cursorNext']",
                                                        "@null"
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "runAfter": {
                                        "Parse_JSON": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "If"
                                },
                                "HTTP": {
                                    "inputs": {
                                        "authentication": {
                                            "password": "@body('GetApiKey')?['value']",
                                            "type": "Basic",
                                            "username": "@body('GetUsername')?['value']"
                                        },
                                        "headers": {
                                            "User-Agent": "Intel 471 - Malware Intelligence - Azure Logic App 1.0.0"
                                        },
                                        "method": "GET",
                                        "queries": "@if(equals(variables('cursor'), 'null'), variables('payload'), setProperty(variables('payload'), 'cursor', variables('cursor')))",
                                        "uri": "https://api.intel471.com/v1/indicators/stream"
                                    },
                                    "runAfter": {},
                                    "type": "Http"
                                },
                                "NormaliseFetchedIndicators": {
                                    "actions": {
                                        "Each_indicator": {
                                            "actions": {
                                                "Condition": {
                                                    "actions": {
                                                        "Switch": {
                                                            "cases": {
                                                                "Case": {
                                                                    "actions": {
                                                                        "Append_md5_indicator": {
                                                                            "inputs": {
                                                                                "name": "collectedIndicators",
                                                                                "value": "@setProperty(setProperty(items('Each_indicator'), 'composedHashValue', items('Each_indicator')?['data']['indicator_data']?['file']?['md5']), 'composedHashType', 'md5')"
                                                                            },
                                                                            "runAfter": {},
                                                                            "type": "AppendToArrayVariable"
                                                                        },
                                                                        "Append_sha1_indicator": {
                                                                            "inputs": {
                                                                                "name": "collectedIndicators",
                                                                                "value": "@setProperty(setProperty(items('Each_indicator'), 'composedHashValue', items('Each_indicator')?['data']['indicator_data']?['file']?['sha1']), 'composedHashType', 'sha1')"
                                                                            },
                                                                            "runAfter": {},
                                                                            "type": "AppendToArrayVariable"
                                                                        },
                                                                        "Append_sha256_indicator": {
                                                                            "inputs": {
                                                                                "name": "collectedIndicators",
                                                                                "value": "@setProperty(setProperty(items('Each_indicator'), 'composedHashValue', items('Each_indicator')?['data']['indicator_data']?['file']?['sha256']), 'composedHashType', 'sha256')"
                                                                            },
                                                                            "runAfter": {},
                                                                            "type": "AppendToArrayVariable"
                                                                        }
                                                                    },
                                                                    "case": "file"
                                                                }
                                                            },
                                                            "default": {
                                                                "actions": {
                                                                    "Append_indicator": {
                                                                        "inputs": {
                                                                            "name": "collectedIndicators",
                                                                            "value": "@setProperty(setProperty(items('Each_indicator'), 'composedHashValue', ''), 'composedHashType', '')"
                                                                        },
                                                                        "runAfter": {},
                                                                        "type": "AppendToArrayVariable"
                                                                    }
                                                                }
                                                            },
                                                            "expression": "@items('Each_indicator')?['data']['indicator_type']",
                                                            "runAfter": {},
                                                            "type": "Switch"
                                                        }
                                                    },
                                                    "expression": {
                                                        "and": [
                                                            {
                                                                "greater": [
                                                                    "@items('Each_indicator')?['data']?['expiration']",
                                                                    "@div(sub(ticks(utcNow()),ticks('1970-01-01')), 10000)"
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "runAfter": {},
                                                    "type": "If"
                                                }
                                            },
                                            "foreach": "@body('Parse_JSON')?['indicators']",
                                            "runAfter": {},
                                            "type": "Foreach"
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@variables('hasResults')",
                                                    true
                                                ]
                                            }
                                        ]
                                    },
                                    "runAfter": {
                                        "SetHasResults": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Parse_JSON": {
                                    "inputs": {
                                        "content": "@body('HTTP')",
                                        "schema": {
                                            "properties": {
                                                "cursorNext": {
                                                    "type": "string"
                                                },
                                                "indicators": {
                                                    "items": {
                                                        "properties": {
                                                            "activity": {
                                                                "properties": {
                                                                    "first": {
                                                                        "type": "integer"
                                                                    },
                                                                    "last": {
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "data": {
                                                                "properties": {
                                                                    "confidence": {
                                                                        "type": "string"
                                                                    },
                                                                    "context": {
                                                                        "properties": {
                                                                            "description": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "expiration": {
                                                                        "type": "integer"
                                                                    },
                                                                    "indicator_data": {
                                                                        "properties": {
                                                                            "address": {
                                                                                "type": "string"
                                                                            },
                                                                            "file": {
                                                                                "properties": {
                                                                                    "download_url": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "md5": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "sha1": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "sha256": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "size": {
                                                                                        "type": "integer"
                                                                                    },
                                                                                    "ssdeep": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "geo_ip": {
                                                                                "properties": {
                                                                                    "city": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "country": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "country_code": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "isp": {
                                                                                        "properties": {
                                                                                            "autonomous_system": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "isp": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "network": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "organization": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "subdivision": {
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "type": "array"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "url": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "indicator_type": {
                                                                        "type": "string"
                                                                    },
                                                                    "intel_requirements": {
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "mitre_tactics": {
                                                                        "type": "string"
                                                                    },
                                                                    "source_id": {
                                                                        "type": "string"
                                                                    },
                                                                    "threat": {
                                                                        "properties": {
                                                                            "data": {
                                                                                "properties": {
                                                                                    "family": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "malware_family_profile_uid": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "version": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "type": {
                                                                                "type": "string"
                                                                            },
                                                                            "uid": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "uid": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "last_updated": {
                                                                "type": "integer"
                                                            },
                                                            "meta": {
                                                                "properties": {
                                                                    "version": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "uid": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "activity",
                                                            "data",
                                                            "last_updated",
                                                            "meta",
                                                            "uid"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "runAfter": {
                                        "HTTP": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson"
                                },
                                "SetHasResults": {
                                    "inputs": {
                                        "name": "hasResults",
                                        "value": "@contains(body('Parse_JSON'), 'indicators')"
                                    },
                                    "runAfter": {
                                        "CursorNotNull": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable"
                                },
                                "Submit_multiple_tiIndicators": {
                                    "inputs": {
                                        "body": {
                                            "value": "@variables('tiIndicatorsPayload')"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['microsoftgraphsecurity']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/beta/security/tiIndicators/submitTiIndicators"
                                    },
                                    "runAfter": {
                                        "BuildTiIndicatorsPayload": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection"
                                }
                            },
                            "expression": "@equals(variables('hasResults'), false)",
                            "limit": {
                                "count": 60,
                                "timeout": "PT1H"
                            },
                            "runAfter": {
                                "InitIntel471Payload": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Until"
                        },
                        "GetApiKey": {
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['keyvault']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/secrets/@{encodeURIComponent('TitanAPIKey')}/value"
                            },
                            "runAfter": {
                                "GetUsername": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection"
                        },
                        "GetCursorFromBlob": {
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageName')))}/files/@{encodeURIComponent(encodeURIComponent(parameters('ContainerName'),'/',parameters('BlobNameCursor')))}/content",
                                "queries": {
                                    "inferContentType": true
                                }
                            },
                            "runAfter": {
                                "InitTiIndicatorsPayload": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection"
                        },
                        "GetFromDateFromBlob": {
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageName')))}/files/@{encodeURIComponent(encodeURIComponent(parameters('ContainerName'),'/',parameters('BlobNameFromDate')))}/content",
                                "queries": {
                                    "inferContentType": true
                                }
                            },
                            "runAfter": {
                                "IfCursorBlobExists": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection"
                        },
                        "GetUsername": {
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['keyvault']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/secrets/@{encodeURIComponent('TitanUserName')}/value"
                            },
                            "runAfter": {},
                            "type": "ApiConnection"
                        },
                        "IfCursorBlobExists": {
                            "actions": {
                                "SetCursor": {
                                    "inputs": {
                                        "name": "cursor",
                                        "value": "@{body('GetCursorFromBlob')}"
                                    },
                                    "runAfter": {},
                                    "type": "SetVariable"
                                }
                            },
                            "else": {
                                "actions": {
                                    "CreateBlobForCursor": {
                                        "inputs": {
                                            "body": "null",
                                            "headers": {
                                                "ReadFileMetadataFromServer": true
                                            },
                                            "host": {
                                                "connection": {
                                                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                }
                                            },
                                            "method": "post",
                                            "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageName')))}/files",
                                            "queries": {
                                                "folderPath": "@parameters('ContainerName')",
                                                "name": "@parameters('BlobNameCursor')",
                                                "queryParametersSingleEncoded": true
                                            }
                                        },
                                        "runAfter": {},
                                        "runtimeConfiguration": {
                                            "contentTransfer": {
                                                "transferMode": "Chunked"
                                            }
                                        },
                                        "type": "ApiConnection"
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "not": {
                                            "equals": [
                                                "@actions('GetCursorFromBlob').outputs.statusCode",
                                                404
                                            ]
                                        }
                                    }
                                ]
                            },
                            "runAfter": {
                                "GetCursorFromBlob": [
                                    "Succeeded",
                                    "Failed"
                                ]
                            },
                            "type": "If"
                        },
                        "IfFromDateBlobExists": {
                            "actions": {
                                "SetFromDateFromBlob": {
                                    "inputs": {
                                        "name": "fromDate",
                                        "value": "@int(body('GetFromDateFromBlob'))"
                                    },
                                    "runAfter": {},
                                    "type": "SetVariable"
                                }
                            },
                            "else": {
                                "actions": {
                                    "CreateBlobForFromDate": {
                                        "inputs": {
                                            "body": "@variables('fromDate')",
                                            "headers": {
                                                "ReadFileMetadataFromServer": true
                                            },
                                            "host": {
                                                "connection": {
                                                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                }
                                            },
                                            "method": "post",
                                            "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageName')))}/files",
                                            "queries": {
                                                "folderPath": "@parameters('ContainerName')",
                                                "name": "@parameters('BlobNameFromDate')",
                                                "queryParametersSingleEncoded": true
                                            }
                                        },
                                        "runAfter": {
                                            "SetFromDate": [
                                                "Succeeded"
                                            ]
                                        },
                                        "runtimeConfiguration": {
                                            "contentTransfer": {
                                                "transferMode": "Chunked"
                                            }
                                        },
                                        "type": "ApiConnection"
                                    },
                                    "SetFromDate": {
                                        "inputs": {
                                            "name": "fromDate",
                                            "value": "@div(if(equals(parameters('LookBackDays'), 0), sub(ticks(utcNow()),ticks('1970-01-01')), sub(sub(ticks(utcNow()), mul(864000000000, parameters('LookBackDays'))), ticks('1970-01-01'))), 10000)"
                                        },
                                        "runAfter": {},
                                        "type": "SetVariable"
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "not": {
                                            "equals": [
                                                "@actions('GetFromDateFromBlob').outputs.statusCode",
                                                404
                                            ]
                                        }
                                    }
                                ]
                            },
                            "runAfter": {
                                "GetFromDateFromBlob": [
                                    "Succeeded",
                                    "Failed"
                                ]
                            },
                            "type": "If"
                        },
                        "InitCollectedIndicators": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "collectedIndicators",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            },
                            "runAfter": {
                                "InitFromDate": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "InitCursor": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "cursor",
                                        "type": "string",
                                        "value": "null"
                                    }
                                ]
                            },
                            "runAfter": {
                                "InitHasResults": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "InitFromDate": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "fromDate",
                                        "type": "integer"
                                    }
                                ]
                            },
                            "runAfter": {
                                "InitCursor": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "InitHasResults": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "hasResults",
                                        "type": "boolean",
                                        "value": true
                                    }
                                ]
                            },
                            "runAfter": {
                                "GetApiKey": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "InitIntel471Payload": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "payload",
                                        "type": "object",
                                        "value": {
                                            "count": 100,
                                            "lastUpdatedFrom": "@variables('fromDate')"
                                        }
                                    }
                                ]
                            },
                            "runAfter": {
                                "IfFromDateBlobExists": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "InitTiIndicatorsPayload": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "tiIndicatorsPayload",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            },
                            "runAfter": {
                                "InitCollectedIndicators": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "microsoftgraphsecurity": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('GraphSecurityConnectionName'))]",
                                "connectionName": "[variables('GraphSecurityConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/microsoftgraphsecurity')]"
                            },
                            "azureblob": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureBlobConnectionName'))]",
                                "connectionName": "[variables('AzureBlobConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
                            },
                            "keyvault": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureKeyVaultConnectionName'))]",
                                "connectionName": "[variables('AzureKeyVaultConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            }
                        }
                    },
                    "StorageName": {
                        "value": "[variables('AzureStorageName')]"
                    },
                    "ContainerName": {
                        "value": "[variables('ContainerName')]"
                    },
                    "LookBackDays": {
                        "value": "[parameters('LookBackDays')]"
                    }
                }
            }
        }
    ]
}
