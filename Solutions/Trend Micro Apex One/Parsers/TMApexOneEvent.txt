// Usage Instruction : 
// Paste below query in log analytics, click on Save button and select as Function from drop down by specifying function name and alias as TMApexOneEvent.
// Function usually takes 10-15 minutes to activate. You can then use function alias from any other queries (e.g. TMApexOneEvent | take 10).
// Reference : Using functions in Azure monitor log queries : https://docs.microsoft.com/azure/azure-monitor/log-query/functions
let EventData = CommonSecurityLog
    | where DeviceVendor == "Trend Micro"
    | extend EventVendor=column_ifexists('DeviceVendor', ''),
        EventProduct=column_ifexists('DeviceProduct', ''),
        EventProductVersion=column_ifexists('DeviceVersion', ''),
        EventSubType=column_ifexists('DeviceEventClassID', ''),
        EventMessage=column_ifexists('Activity', ''),
        EventSeverity=column_ifexists('LogSeverity', ''),
        EventOriginalUid=column_ifexists('DeviceExternalID', ''),
        EventEndTime=column_ifexists('ReceiptTime', ''),
        DstDvcHostname=column_ifexists('DestinationHostName', ''),
        DstIpAddr=column_ifexists('DestinationIP', ''),
        DstUserName=column_ifexists('DestinationUserName', ''),
        DstPortNumber=column_ifexists('DestinationPort', ''),
        DstServiceName=column_ifexists('DestinationServiceName', ''),
        SrcPortNumber=column_ifexists('SourcePort', ''),
        SrcIpAddr=column_ifexists('SourceIP', ''),
        SrcDvcHostname=column_ifexists('SourceHostName', ''),
        SrcServiceName=column_ifexists('SourceServiceName', ''),
        SrcUserName=column_ifexists('SourceUserName', ''),
        SrcProcessName=column_ifexists('SourceProcessName', ''),
        SrcMacAddr=column_ifexists('SourceMacAddress', ''),
        Product=column_ifexists('DeviceFacility', ''),
        DvcAction=column_ifexists('DeviceAction', ''),
        DvcHostname=column_ifexists('DeviceName', ''),
        DvcProcessName=column_ifexists('DeviceProcessName', ''),
        FileHashSha1=column_ifexists('FileHash', ''),
        UrlOriginal=column_ifexists('RequestURL', ''),
        NetworkDirection=column_ifexists('CommunicationDirection', '')
;
let Attack_Discovery_Detections=()
{
    let customEvents = EventData
        | where EventMessage == "Attack Discovery Detections"
        | extend RiskLevel=column_ifexists('DeviceCustomNumber1', ''),
            PatternNumber=column_ifexists('DeviceCustomNumber2', ''),
            RuleName=column_ifexists('DeviceCustomString1', ''),
            AttackDiscoveryObjectInformation1=column_ifexists('DeviceCustomString2', ''),
            AttackDiscoveryObjectInformation2=column_ifexists('DeviceCustomString3', ''),
            AttackDiscoveryObjectInformation3=column_ifexists('DeviceCustomString4', ''),
            AttackDiscoveryObjectInformation4=column_ifexists('DeviceCustomString5', '')
    ;
    customEvents;
};
let Behavior_Monitoring=()
{
    let customEvents = EventData
        | where EventMessage == "Behavior Monitoring"
        | extend RiskLevel=column_ifexists('DeviceCustomNumber1', ''),
            EventType=column_ifexists('DeviceCustomNumber2', ''),
            Operation=column_ifexists('DeviceCustomNumber3', ''),
            Target=column_ifexists('DeviceCustomString1', ''),
            PolicyId=column_ifexists('DeviceCustomString2', '')
    ;
    customEvents;
};
let CnC_Callback=()
{
    let customEvents = EventData
        | where EventMessage == "CnC Callback"
        | extend 
            RiskLevel=column_ifexists('DeviceCustomNumber1', ''),
            ListSource=column_ifexists('DeviceCustomNumber2', ''),
            CallbackAddressFormat=column_ifexists('DeviceCustomNumber3', ''),
            ProductVersion=column_ifexists('DeviceCustomString2', ''),
            DomainName=column_ifexists('DeviceCustomString3', ''),
            PolicyName=column_ifexists('DeviceCustomString4', ''),
            CallbackUrlAddress=column_ifexists('DeviceCustomString5', ''),
            FirstCallbackAttempt=column_ifexists('deviceCustomDate1', ''),
            LastCallbackAttempt=column_ifexists('deviceCustomDate2', '')
    ;
    customEvents;
};
let Policy=()
{
    let customEvents = EventData
        | where EventMessage == "Policy"
        | extend
            SeverityCode=column_ifexists('DeviceCustomNumber1', ''),
            PolicySettings=column_ifexists('DeviceCustomString1', ''),
            ProductVersion=column_ifexists('DeviceCustomString2', ''),
            FilterType=column_ifexists('DeviceCustomString3', ''),
            ReasonCode=column_ifexists('DeviceCustomString4', ''),
            ReasonCodeSource=column_ifexists('DeviceCustomString5', ''),
            Action=column_ifexists('DeviceCustomString6', '')
    ;
    customEvents;
};
let Data_Loss_Prevention=()
{
    let customEvents = EventData
        | where EventMessage == "Data Loss Prevention"
        | extend 
            ProductType=column_ifexists('DeviceCustomNumber1', ''),
            EventResult=column_ifexists('DeviceCustomNumber2', ''),
            ChannelType=column_ifexists('DeviceCustomNumber3', ''),
            PolicyGuid=column_ifexists('DeviceCustomString1', ''),
            PolicyName=column_ifexists('DeviceCustomString2', ''),
            EndpointHostName=column_ifexists('DeviceCustomString3', ''),
            UserName=column_ifexists('DeviceCustomString4', ''),
            RuleName=column_ifexists('DeviceCustomString5', ''),
            TemplateName=column_ifexists('DeviceCustomString6', '')
    ;
    customEvents;
};
let Device_Access_Control=()
{
    let customEvents = EventData
        | where EventMessage == "Device Access Control"
        | extend 
            ProductId=column_ifexists('DeviceCustomNumber1', ''),
            DeviceType=column_ifexists('DeviceCustomNumber2', ''),
            Permission=column_ifexists('DeviceCustomNumber3', ''),
            ServerHostname=column_ifexists('DeviceCustomString1', '')
    ;
    customEvents;
};
let Endpoint_Application_Control_Violation_Information=()
{
    let customEvents = EventData
        | where EventMessage == "Endpoint Application Control Violation Information"
        | extend 
            ClientStatus=column_ifexists('DeviceCustomNumber1', ''),
            ProductServerPatternVersion=column_ifexists('DeviceCustomString1', ''),
            ClientIpAddress=column_ifexists('DeviceCustomString2', ''),
            ApplicationProcessCommandLine=column_ifexists('DeviceCustomString3', ''),
            RuleName=column_ifexists('DeviceCustomString4', ''),
            PolicyName=column_ifexists('DeviceCustomString5', '')
    ;
    customEvents;
};
let Engine_Update_Status=()
{
    let customEvents = EventData
        | where EventMessage == "Engine Update Status"
        | extend 
            ConnectionStatus=column_ifexists('DeviceCustomNumber1', ''),
            Engine=column_ifexists('DeviceCustomNumber2', ''),
            EngineStatus=column_ifexists('DeviceCustomNumber3', ''),
            EndpointIp=column_ifexists('DeviceCustomString2', ''),
            EngineVersion=column_ifexists('DeviceCustomString5', ''),
            ActiveUpdateComponentType=column_ifexists('DeviceCustomString6', '')
    ;
    customEvents;
};
let Managed_Product_LogonLogoff_Events=()
{
    let customEvents = EventData
        | where EventMessage == "Managed Product Logon/Logoff Events"
        | extend 
            CommandStatus=column_ifexists('DeviceCustomNumber1', ''),
            ProductVersion=column_ifexists('DeviceCustomString1', '')
    ;
    customEvents;
};
let Suspicious_Connection=()
{
    let customEvents = EventData
        | where EventMessage == "Suspicious Connection"
        | extend 
            PatternType=column_ifexists('DeviceCustomNumber1', ''),
            ThreatName=column_ifexists('DeviceCustomString2', '')
    ;
    customEvents;
};
let Pattern_Update_Status=()
{
    let customEvents = EventData
        | where EventMessage == "Pattern Update Status"
        | extend 
            ConnectionStatus=column_ifexists('DeviceCustomNumber1', ''),
            Pattern=column_ifexists('DeviceCustomNumber2', ''),
            PatternStatus=column_ifexists('DeviceCustomNumber3', ''),
            OperatingSystem=column_ifexists('DeviceCustomString1', ''),
            EndpointIp=column_ifexists('DeviceCustomString2', ''),
            UpdateAgent=column_ifexists('DeviceCustomString3', ''),
            Domain=column_ifexists('DeviceCustomString4', ''),
            PatternVersion=column_ifexists('DeviceCustomString5', ''),
            ActiveUpdateComponentType=column_ifexists('DeviceCustomString6', '')
    ;
    customEvents;
};
let PML=()
{
    let customEvents = EventData
        | where EventMessage contains "PML"
        | extend 
            ProbableThreatType=column_ifexists('DeviceCustomNumber1', ''),
            DetectionType=column_ifexists('DeviceCustomNumber2', ''),
            ThreatProbability=column_ifexists('DeviceCustomNumber3', ''),
            ThreatName=column_ifexists('DeviceCustomString2', ''),
            InfectionSource=column_ifexists('DeviceCustomString3', ''),
            ProcessCommand=column_ifexists('DeviceCustomString4', ''),
            FileCreationTime=column_ifexists('deviceCustomDate1', ''),
            InfectionChannel=column_ifexists('ApplicationProtocol', '')
    ;
    customEvents;
};
let Virtual_Analyzer_detection_name=()
{
    let customEvents = EventData
        | where EventMessage == "Virtual Analyzer detection name"
        | extend 
            RiskLevel=column_ifexists('DeviceCustomNumber1', ''),
            ThreatName=column_ifexists('DeviceCustomString1', ''),
            ThreatType=column_ifexists('DeviceCustomString2', ''),
            CloudStorageVendor=column_ifexists('DeviceCustomString3', ''),
            EntryChannel=column_ifexists('ApplicationProtocol', '')
    ;
    customEvents;
};
let Spyware_Detected=()
{
    let customEvents = EventData
        | where EventMessage == "Spyware Detected"
        | extend 
            PatternType=column_ifexists('DeviceCustomNumber1', ''),
            ScanType=tostring(column_ifexists('DeviceCustomNumber2', '')),
            ThreatType=tostring(column_ifexists('DeviceCustomNumber3', '')),
            ThreatName=column_ifexists('DeviceCustomString1', ''),
            EngineVersion=column_ifexists('DeviceCustomString2', '')
    ;
    customEvents;
};
let Suspicious_Files=()
{
    let customEvents = EventData
        | where EventMessage == "Suspicious Files"
        | extend 
            ProductVersion=tostring(column_ifexists('DeviceCustomNumber1', '')),
            CCListSource=column_ifexists('DeviceCustomNumber2', ''),
            ScanType=tostring(column_ifexists('DeviceCustomNumber3', '')),
            FileType=column_ifexists('DeviceCustomString2', '')
    ;
    customEvents;
};
let AV=()
{
    let customEvents = EventData
        | where DeviceEventClassID startswith "AV:"
        | extend 
            PatternVersion=tostring(column_ifexists('DeviceCustomNumber1', '')),
            SecondAction=column_ifexists('DeviceCustomNumber2', ''),
            SeverityCode=column_ifexists('DeviceCustomNumber3', ''),
            ScanType=column_ifexists('DeviceCustomString1', ''),
            EngineVersion=column_ifexists('DeviceCustomString2', ''),
            ProductVersion=column_ifexists('DeviceCustomString3', ''),
            EventResultDetails=column_ifexists('DeviceCustomString4', ''),
            FirstActionResult=column_ifexists('DeviceCustomString5', ''),
            SecondActionResult=column_ifexists('DeviceCustomString6', '')
    ;
    customEvents;
};
let WB=()
{
    let customEvents = EventData
        | where DeviceEventClassID startswith "WB:"
        | extend 
            SeverityCode=column_ifexists('DeviceCustomNumber1', ''),
            SeverityLevel=column_ifexists('DeviceCustomNumber2', ''),
            ReputationScore=column_ifexists('DeviceCustomNumber3', ''),
            Policy=column_ifexists('DeviceCustomString1', ''),
            RuleName=column_ifexists('DeviceCustomString2', ''),
            EventResultDetails=column_ifexists('DeviceCustomString4', ''),
            ReasonCodeSource=column_ifexists('DeviceCustomString5', ''),
            NetworkApplicationProtocol=column_ifexists('ApplicationProtocol', '')
    ;
    customEvents;
};
(union isfuzzy=true
    Attack_Discovery_Detections, Behavior_Monitoring, CnC_Callback, Policy, Data_Loss_Prevention, Device_Access_Control, Endpoint_Application_Control_Violation_Information, Engine_Update_Status, Managed_Product_LogonLogoff_Events, Suspicious_Connection, Pattern_Update_Status, PML, Virtual_Analyzer_detection_name, Spyware_Detected, Suspicious_Files, AV, WB)
| project TimeGenerated
    , Action
    , ActiveUpdateComponentType
    , ApplicationProcessCommandLine
    , AttackDiscoveryObjectInformation1
    , AttackDiscoveryObjectInformation2
    , AttackDiscoveryObjectInformation3
    , AttackDiscoveryObjectInformation4
    , CallbackAddressFormat
    , CallbackUrlAddress
    , CCListSource
    , ChannelType
    , ClientIpAddress
    , ClientStatus
    , CloudStorageVendor
    , CommandStatus
    , ConnectionStatus
    , DetectionType
    , DeviceType
    , Domain
    , DomainName
    , DstDvcHostname
    , DstIpAddr
    , DstPortNumber
    , DstServiceName
    , DstUserName
    , DvcAction
    , DvcHostname
    , DvcProcessName
    , EndpointHostName
    , EndpointIp
    , Engine
    , EngineStatus
    , EngineVersion
    , EntryChannel
    , EventEndTime
    , EventMessage
    , EventOriginalUid
    , EventProduct
    , EventProductVersion
    , EventResult
    , EventResultDetails
    , EventSeverity
    , EventSubType
    , EventType
    , FileCreationTime
    , FileHashSha1
    , FileType
    , FilterType
    , FirstActionResult
    , FirstCallbackAttempt
    , InfectionChannel
    , InfectionSource
    , LastCallbackAttempt
    , ListSource
    , NetworkApplicationProtocol
    , NetworkDirection
    , OperatingSystem
    , Operation
    , Pattern
    , PatternNumber
    , PatternStatus
    , PatternType
    , PatternVersion
    , Permission
    , Policy
    , PolicyGuid
    , PolicyId
    , PolicyName
    , PolicySettings
    , ProbableThreatType
    , ProcessCommand
    , Product
    , ProductId
    , ProductServerPatternVersion
    , ProductType
    , ProductVersion
    , ReasonCode
    , ReasonCodeSource
    , ReputationScore
    , RiskLevel
    , RuleName
    , ScanType
    , SecondAction
    , SecondActionResult
    , ServerHostname
    , SeverityCode
    , SeverityLevel
    , SrcDvcHostname
    , SrcIpAddr
    , SrcMacAddr
    , SrcPortNumber
    , SrcProcessName
    , SrcServiceName
    , SrcUserName
    , Target
    , TemplateName
    , ThreatName
    , ThreatProbability
    , ThreatType
    , UpdateAgent
    , UrlOriginal
    , UserName