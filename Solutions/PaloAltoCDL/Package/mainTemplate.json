{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "Manoj Reddy - v-marimanda@microsoft.com",
    "comments": "Solution template for PaloAltoCDL"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Sentinel is setup"
      }
    },
    "connector1-name": {
      "type": "string",
      "defaultValue": "2874172f-0e17-479d-be4d-de87597ee967"
    }
  },
  "variables": {
    "connector1-source": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.OperationalInsights/workspaces/',parameters('workspace'),'/providers/Microsoft.SecurityInsights/dataConnectors/',parameters('connector1-name'))]",
    "_connector1-source": "[variables('connector1-source')]",
    "PaloAltoCDLConnector": "PaloAltoCDLConnector",
    "_PaloAltoCDLConnector": "[variables('PaloAltoCDLConnector')]",
    "workspace-dependency": "[concat('Microsoft.OperationalInsights/workspaces/', parameters('workspace'))]",
    "PaloAltoCDLEvent_Parser": "PaloAltoCDLEvent_Parser",
    "_PaloAltoCDLEvent_Parser": "[variables('PaloAltoCDLEvent_Parser')]",
    "sourceId": "azuresentinel.azure-sentinel-solution-paloaltocdl",
    "_sourceId": "[variables('sourceId')]"
  },
  "resources": [
    {
      "id": "[variables('_connector1-source')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',parameters('connector1-name'))]",
      "apiVersion": "2021-03-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "location": "[parameters('workspace-location')]",
      "kind": "GenericUI",
      "properties": {
        "connectorUiConfig": {
          "title": "Palo Alto Networks Cortex Data Lake (CDL)",
          "publisher": "Palo Alto Networks",
          "descriptionMarkdown": "The [Palo Alto Networks CDL](https://www.paloaltonetworks.com/cortex/cortex-data-lake) data connector provides the capability to ingest [CDL logs](https://docs.paloaltonetworks.com/cortex/cortex-data-lake/log-forwarding-schema-reference/log-forwarding-schema-overview.html) into Azure Sentinel.",
          "graphQueries": [
            {
              "metricName": "Total data received",
              "legend": "PaloAltoNetworksCDL",
              "baseQuery": "PaloAltoCDLEvent"
            }
          ],
          "sampleQueries": [
            {
              "description": "Top 10 Destinations",
              "query": "PaloAltoCDLEvent\n | where isnotempty(DstIpAddr)\n    | summarize count() by DstIpAddr\n | top 10 by count_"
            }
          ],
          "dataTypes": [
            {
              "name": "CommonSecurityLog (PaloAltoNetworksCDL)",
              "lastDataReceivedQuery": "PaloAltoCDLEvent\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            }
          ],
          "connectivityCriterias": [
            {
              "type": "IsConnectedQuery",
              "value": [
                "PaloAltoCDLEvent\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
              ]
            }
          ],
          "availability": {
            "status": 1,
            "isPreview": true
          },
          "permissions": {
            "resourceProvider": [
              {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "read and write permissions are required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                  "write": true,
                  "read": true,
                  "delete": true
                }
              },
              {
                "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                "providerDisplayName": "Keys",
                "scope": "Workspace",
                "requiredPermissions": {
                  "action": true
                }
              }
            ]
          },
          "instructionSteps": [
            {
              "description": ">**NOTE:** This data connector depends on a parser based on a Kusto Function to work as expected [**PaloAltoCDLEvent**](https://aka.ms/sentinel-paloaltocdl-parser) which is deployed with the Azure Sentinel Solution."
            },
            {
              "description": "Install and configure the Linux agent to collect your Common Event Format (CEF) Syslog messages and forward them to Azure Sentinel.\n\n> Notice that the data from all regions will be stored in the selected workspace",
              "innerSteps": [
                {
                  "title": "1.1 Select or create a Linux machine",
                  "description": "Select or create a Linux machine that Azure Sentinel will use as the proxy between your security solution and Azure Sentinel this machine can be on your on-prem environment, Azure or other clouds."
                },
                {
                  "title": "1.2 Install the CEF collector on the Linux machine",
                  "description": "Install the Microsoft Monitoring Agent on your Linux machine and configure the machine to listen on the necessary port and forward messages to your Azure Sentinel workspace. The CEF collector collects CEF messages on port 514 TCP.\n\n> 1. Make sure that you have Python on your machine using the following command: python -version.\n\n> 2. You must have elevated permissions (sudo) on your machine.",
                  "instructions": [
                    {
                      "parameters": {
                        "fillWith": [
                          "WorkspaceId",
                          "PrimaryKey"
                        ],
                        "label": "Run the following command to install and apply the CEF collector:",
                        "value": "sudo wget -O cef_installer.py https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/DataConnectors/CEF/cef_installer.py&&sudo python cef_installer.py {0} {1}"
                      },
                      "type": "CopyableLabel"
                    }
                  ]
                }
              ],
              "title": "1. Linux Syslog agent configuration"
            },
            {
              "description": "[Follow the instructions](https://docs.paloaltonetworks.com/cortex/cortex-data-lake/cortex-data-lake-getting-started/get-started-with-log-forwarding-app/forward-logs-from-logging-service-to-syslog-server.html) to configure logs forwarding from Cortex Data Lake to a Syslog Server.",
              "title": "2.  Configure Cortex Data Lake to forward logs to a Syslog Server using CEF"
            },
            {
              "description": "Follow the instructions to validate your connectivity:\n\nOpen Log Analytics to check if the logs are received using the CommonSecurityLog schema.\n\n>It may take about 20 minutes until the connection streams data to your workspace.\n\nIf the logs are not received, run the following connectivity validation script:\n\n> 1. Make sure that you have Python on your machine using the following command: python -version\n\n>2. You must have elevated permissions (sudo) on your machine",
              "instructions": [
                {
                  "parameters": {
                    "fillWith": [
                      "WorkspaceId"
                    ],
                    "label": "Run the following command to validate your connectivity:",
                    "value": "sudo wget -O cef_troubleshoot.py https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/DataConnectors/CEF/cef_troubleshoot.py&&sudo python cef_troubleshoot.py  {0}"
                  },
                  "type": "CopyableLabel"
                }
              ],
              "title": "3. Validate connection"
            },
            {
              "description": "Make sure to configure the machine's security according to your organization's security policy\n\n\n[Learn more >](https://aka.ms/SecureCEF)",
              "title": "4. Secure your machine "
            }
          ],
          "additionalRequirementBanner": "This data connector depends on a parser based on a Kusto Function to work as expected [**PaloAltoCDLEvent**](https://aka.ms/sentinel-paloaltocdl-parser) which is deployed with the Azure Sentinel Solution."
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2020-08-01",
      "name": "[parameters('workspace')]",
      "location": "[parameters('workspace-location')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "PaloAltoCDL Data Parser",
          "dependsOn": [
            "[variables('workspace-dependency')]"
          ],
          "properties": {
            "eTag": "*",
            "displayName": "PaloAltoCDL Data Parser",
            "category": "Samples",
            "functionAlias": "PaloAltoCDLEvent",
            "query": "\nCommonSecurityLog\r\n| where DeviceVendor =~ 'Palo Alto Networks'\r\n| extend EventVendor = 'Palo Alto Networks'\r\n| extend EventProduct = 'Cortex Data Lake'\r\n| extend EventSchemaVersion = 0.2\r\n| extend EventCount = 1\r\n| extend packed = pack(DeviceCustomNumber1Label, DeviceCustomNumber1\r\n                     , DeviceCustomNumber2Label, DeviceCustomNumber2\r\n                     , DeviceCustomNumber3Label, DeviceCustomNumber3\r\n                     , DeviceCustomString1Label, DeviceCustomString1\r\n                     , DeviceCustomString2Label, DeviceCustomString2\r\n                     , DeviceCustomString3Label, DeviceCustomString3\r\n                     , DeviceCustomString4Label, DeviceCustomString4\r\n                     , DeviceCustomString5Label, DeviceCustomString5\r\n                     , DeviceCustomString6Label, DeviceCustomString6\r\n                     , DeviceCustomDate1Label, DeviceCustomDate1\r\n                     , DeviceCustomDate2Label, DeviceCustomDate2\r\n                     , FlexString1Label, FlexString1\r\n                     , FlexString2Label, FlexString2\r\n                     , DeviceCustomFloatingPoint1Label, DeviceCustomFloatingPoint1\r\n                     , DeviceCustomFloatingPoint2Label, DeviceCustomFloatingPoint2\r\n                     , DeviceCustomIPv6Address1Label, DeviceCustomIPv6Address1\r\n                     , DeviceCustomIPv6Address2Label, DeviceCustomIPv6Address2\r\n                     , DeviceCustomIPv6Address3Label, DeviceCustomIPv6Address3)\r\n| evaluate bag_unpack(packed)\r\n| mv-apply AdditionalFields = extract_all(@'(?P<key>[a-zA-Z0-9-_]+)=(?P<value>[a-zA-Z0-9-_:@.,?%#(){}><\\/\"\\\\ ]+)', dynamic([\"key\",\"value\"]), AdditionalExtensions) on (\r\n    project packed1 = pack(tostring(AdditionalFields[0]), tostring(AdditionalFields[1]))\r\n    | summarize bag = make_bag(packed1)\r\n)\r\n| evaluate bag_unpack(bag)\r\n| project-rename EventProductVersion=DeviceVersion\r\n                , DvcId=DeviceExternalID\r\n                , DvcHostname=DeviceName\r\n                , DstNatPortNumber=DestinationTranslatedPort\r\n                , DstHostname=DestinationHostName\r\n                , SrcNatPortNumber=SourceTranslatedPort\r\n                , SrcFileName=FileName\r\n                , SrcFilePath=FilePath\r\n                , DvcIpAddr=[\"Device IPv6 Address\"]\r\n                , DstIpAddr=[\"Destination IPv6 Address\"]\r\n                , SrcIpAddr=[\"Source IPv6 Address\"]\r\n                , NetworkPackets=PacketsTotal\r\n                , EventMessage=Message\r\n                , EventSeverity=LogSeverity\r\n                , EventResult=Activity\r\n                , DstPortNumber=DestinationPort\r\n                , DstUserId=DestinationUserID\r\n                , EventResourceId=DeviceEventClassID\r\n                , EventResultDetails=reason\r\n                , HttpRequestMethod=RequestMethod\r\n                , Url=RequestURL\r\n                , HttpContentFormat=RequestContext\r\n                , SrcZone=FromZone\r\n                , SrcHostname=SourceHostName\r\n                , DvcAction=DeviceAction\r\n                , DstDomain=DestinationNTDomain\r\n                , SrcPortNumber=SourcePort\r\n                , DvcInboundInterface=DeviceInboundInterface\r\n                , DvcOutboundInterface=DeviceOutboundInterface\r\n                , NetworkProtocol=Protocol\r\n                , NetworkApplicationProtocol=ApplicationProtocol\r\n                , SrcDomain=SourceNTDomain\r\n                , SrcUserId=SourceUserID\r\n                , DstZone=ToZone\r\n                , NetworkDuration=SessionDuration\r\n                , NetworkSessionId=SessionID\r\n                , DstBytes=ReceivedBytes\r\n                , SrcBytes=SentBytes\r\n| extend EventTimeIngested = todatetime(ReceiptTime)\r\n| extend EventStartTime=todatetime(start)\r\n| extend EventEndTime=todatetime(end)\r\n| extend EventType=cat\r\n| extend SrcNatIpAddr=case(isempty(SourceIP), SourceTranslatedAddress, \r\n                            pack_array(SourceTranslatedAddress,SourceIP))\r\n| extend DstNatIpAddr=case(isempty(DestinationIP), DestinationTranslatedAddress,\r\n                            pack_array(DestinationTranslatedAddress, DestinationIP))\r\n| extend SrcUsername=case(isempty(suser0), SourceUserName, \r\n                            pack_array(SourceUserName,suser0))\r\n| extend DstUsername=case(isempty(duser0), DestinationUserName,\r\n                            pack_array(DestinationUserName,duser0))\r\n| project-away ReceiptTime\r\n              , Type\r\n              , cat\r\n              , start\r\n              , end\r\n              , DeviceVendor\r\n              , DeviceProduct\r\n              , duser0\r\n              , DestinationUserName\r\n              , suser0\r\n              , SourceUserName\r\n              , AdditionalExtensions\r\n              , DestinationTranslatedAddress\r\n              , DestinationIP\r\n              , SourceTranslatedAddress\r\n              , SourceIP\r\n              , DeviceCustomNumber1Label\r\n              , DeviceCustomNumber1\r\n              , DeviceCustomNumber2Label\r\n              , DeviceCustomNumber2\r\n              , DeviceCustomNumber3Label\r\n              , DeviceCustomNumber3\r\n              , DeviceCustomString1Label\r\n              , DeviceCustomString1\r\n              , DeviceCustomString2Label\r\n              , DeviceCustomString2\r\n              , DeviceCustomString3Label\r\n              , DeviceCustomString3\r\n              , DeviceCustomString4Label\r\n              , DeviceCustomString4\r\n              , DeviceCustomString5Label\r\n              , DeviceCustomString5\r\n              , DeviceCustomString6Label\r\n              , DeviceCustomString6\r\n              , DeviceCustomDate1Label\r\n              , DeviceCustomDate1\r\n              , DeviceCustomDate2Label\r\n              , DeviceCustomDate2\r\n              , FlexString1Label\r\n              , FlexString1\r\n              , FlexString2Label\r\n              , FlexString2\r\n              , DeviceCustomIPv6Address1Label\r\n              , DeviceCustomIPv6Address1\r\n              , DeviceCustomIPv6Address2Label\r\n              , DeviceCustomIPv6Address2\r\n              , DeviceCustomIPv6Address3Label\r\n              , DeviceCustomIPv6Address3\r\n              , DeviceCustomFloatingPoint1Label\r\n              , DeviceCustomFloatingPoint1\r\n              , DeviceCustomFloatingPoint2Label\r\n              , DeviceCustomFloatingPoint2\r\n",
            "version": 1
          }
        }
      ]
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2021-03-01-preview",
      "properties": {
        "version": "1.0.1",
        "kind": "Solution",
        "contentId": "[variables('_sourceId')]",
        "parentId": "[variables('_sourceId')]",
        "source": {
          "kind": "Solution",
          "name": "PaloAltoCDL",
          "sourceId": "[variables('_sourceId')]"
        },
        "author": {
          "name": "Manoj Reddy",
          "email": "v-marimanda@microsoft.com"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "DataConnector",
              "contentId": "[variables('_PaloAltoCDLConnector')]",
              "version": "1.0.1"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_PaloAltoCDLEvent_Parser')]",
              "version": "1.0.1"
            }
          ]
        },
        "firstPublishDate": "2021-10-23",
        "providers": [
          "Palo Alto Networks"
        ],
        "categories": {
          "domains": [
            "Security – Cloud Security"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_sourceId'))]"
    }
  ],
  "outputs": {}
}
