// Title:           Vmware Vcenter
// Author:          Microsoft
// Version:         3.2
// Last Updated:    07/06/2022
// Comment:         version 1.0
//  
// DESCRIPTION:
// This parser takes raw vcenter logs from a custom table (vcenter_CL) and parses the logs into a normalized schema.
//
// USAGE:
// 1. Open Log Analytics/Azure Sentinel Logs blade. Copy the query below and paste into the Logs query window. 
// 2. Click the Save button above the query. A pane will appear on the right, select "as Function" from the drop down. Enter a Function Name.
// 3. It is recommended to name the Function Alias, as vcenter
// 4. Kusto Functions can typically take up to 15 minutes to activate. You can then use Function Alias for other queries.
//
// REFERENCES: 
// Using functions in Azure monitor log queries: https://docs.microsoft.com/azure/azure-monitor/log-query/functions
// 
// LOG SAMPLES:
// This parser assumes the raw log are formatted as follows:
// "2018-04-30 14:14:08 samplehostname1 vcenter-server: User VSPHERE.LOCAL\\Administrator@10.0.0.1 l logged in as JAX-WS RI 2.2.9-b130926.1035 
// svn-revisions#5f6196f2b90e30e065b24"
// 2018-04-30 14:14:08 samplehostname vpxd 2442 - - events [592839] [1-1] [2018-04-30T14:14:08.1432662] [vim.event.UserLogoutSessionEvent] [info] //[VSPHERE.LOCAL\\Administrator] [] [592839] [User VSPHERE.LOCAL\\Administrator>@10.0.0.1 logged out(Login time: Monday, 30 APril, 2018 14:14:07, 
// number of API invocations: 2, user agent: JAX-WS RI 2.2.9-b130926.1035 svn-revision#5f6196f2b90e30e065b24)]
let vCenter_logs =() {
vcenter_CL
| where Message has_any ("UserLoginSessionEvent","UserLogoutSessionEvent","vcenter-server: Role","vcenter-server: New role")
| extend EventType = iff(Message has "UserLoginSessionEvent", "UserLoginSessionEvent" , iif(Message has "UserLogoutSessionEvent", "UserLogoutSessionEvent",iif(Message has_any("vcenter-server: Role","vcenter-server: New role"),"AccessMgmt",dynamic(""))))
| extend EventVendor = 'vCenter'
| extend EventProduct = 'vCenter Server'
| extend UserLoginFields = iif(EventType == "UserLoginSessionEvent", extract_all(@"Event\s+\[(\d{7})\]\s\[1-1\]\s\[(\w.+Z)\]\s\[vim.event.(\w.+)\]\s\[info\]\s\[(\w.+)\]\s\[\]\s\[(\w.+)@(\w.+)\slogged\sin\sas\s(\w.+)\]", dynamic([1,2,3,4,5,6,7]),Message), dynamic(""))
| extend UserLogoutFields = iif(EventType == "UserLogoutSessionEvent", extract_all(@"(\w.+)\sEvent\s+\[(\d{7})\]\s\[1-1\]\s\[(\w.+Z)\]\s\[vim.event.(\w.+)\]\s\[info\]\s\[(\w.+)\]\s\[\]\s\[(\w.+)@(\w.+)\slogged\sout\s\((\w.+)\snumber\sof\sAPI\sinvocations:\s(\w),\suser\sagent:\s(\w.+)\)", dynamic([1,2,3,4,5,6,7,8,9,10]),Message), dynamic(""))
| extend AccessMgmtFields = iif(EventType == "AccessMgmt", extract_all(@"(\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2}.\w+.+\s)(\w+\s)vcenter-server:\sNew\srole\s(\w+.+)\s(\w+)", dynamic([1,2,3,4]),Message), dynamic(""))
| extend EventID = case(isnotempty(UserLoginFields), tostring(UserLoginFields[0][0]),
								isnotempty(UserLogoutFields), tostring(UserLogoutFields[0][1]), "")
| extend TimeGenerated = case(isnotempty(UserLoginFields), todatetime(UserLoginFields[0][1]),
								isnotempty(UserLogoutFields), todatetime(UserLogoutFields[0][2]),
                                isnotempty(AccessMgmtFields), todatetime(AccessMgmtFields[0][0]),dynamic(""))
| extend EventID = case(isnotempty(UserLoginFields), tostring(UserLoginFields[0][0]),
								isnotempty(UserLogoutFields), tostring(UserLogoutFields[0][1]), "")
| extend Domain = case(isnotempty(UserLoginFields), split(tostring(UserLoginFields[0][3]),'\\')[0],
								isnotempty(UserLogoutFields), split(tostring(UserLogoutFields[0][4]),'\\')[0], "")
| extend UserName = case(isnotempty(UserLoginFields), split(tostring(UserLoginFields[0][3]),'\\')[1],
								isnotempty(UserLogoutFields), split(tostring(UserLogoutFields[0][4]),'\\')[1], "")
| extend SourceIP = case(isnotempty(UserLoginFields), tostring(UserLoginFields[0][5]),
								isnotempty(UserLogoutFields), tostring(UserLogoutFields[0][6]), "")
| extend LoginSource = case(isnotempty(UserLoginFields), tostring(UserLoginFields[0][6]),
								isnotempty(UserLogoutFields), tostring(UserLogoutFields[0][9]), "")
| extend NumAPIInvoc = iif(EventType == "UserLogoutSessionEvent",tostring(UserLogoutFields[0][8]),dynamic(""))
| extend HostName = iif(EventType == "AccessMgmt",tostring(AccessMgmtFields[0][1]),dynamic(""))
| extend AccessMgmtRole = iif(EventType == "AccessMgmt",tostring(AccessMgmtFields[0][2]),dynamic(""))
| extend AccessMgmtOperation = iif(EventType == "AccessMgmt",strcat("Role-",tostring(AccessMgmtFields[0][3])),dynamic(""))
};
vCenter_logs
| project-away UserLoginFields, UserLogoutFields,AccessMgmtFields