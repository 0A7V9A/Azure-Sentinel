{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "Recorded Future Premier Integrations - support@recordedfuture.com",
    "comments": "Solution template for Recorded Future Identuty"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    },
    "playbook1-PlaybookName": {
      "defaultValue": "Recorded_Future_Identity_Add_Risky_User_to_Security_Group",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Resource name for the logic app playbook.  No spaces are allowed"
      }
    },
    "playbook2-PlaybookName": {
      "defaultValue": "Recorded_Future_Identity_Lookup_And_Save",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Resource name for the logic app playbook.  No spaces are allowed"
      }
    },
    "playbook3-PlaybookName": {
      "defaultValue": "Recorded_Future_Identity_External",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Resource name for the logic app playbook.  No spaces are allowed"
      }
    },
    "playbook3-PlaybookName_Add_Risky_User_to_Security_Group": {
      "defaultValue": "Recorded_Future_Identity_External",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Resource name for the logic app playbook.  No spaces are allowed"
      }
    },
    "playbook3-PlaybookName_Lookup_and_Save": {
      "defaultValue": "Recorded_Future_Identity_External",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Resource name for the logic app playbook.  No spaces are allowed"
      }
    },
    "playbook3-PlaybookName_Identity_Protection_Confirm_User_Is_Risky": {
      "defaultValue": "Recorded_Future_Identity_External",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Resource name for the logic app playbook.  No spaces are allowed"
      }
    },
    "playbook4-PlaybookName": {
      "defaultValue": "Recorded_Future_Identity_Workforce",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Resource name for the logic app playbook.  No spaces are allowed"
      }
    },
    "playbook4-PlaybookName_Add_Risky_User_to_Security_Group": {
      "defaultValue": "Recorded_Future_Identity_Workforce",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Resource name for the logic app playbook.  No spaces are allowed"
      }
    },
    "playbook4-PlaybookName_Lookup_and_Save": {
      "defaultValue": "Recorded_Future_Identity_Workforce",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Resource name for the logic app playbook.  No spaces are allowed"
      }
    },
    "playbook4-PlaybookName_Identity_Protection_Confirm_User_Is_Risky": {
      "defaultValue": "Recorded_Future_Identity_Workforce",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Resource name for the logic app playbook.  No spaces are allowed"
      }
    },
    "playbook5-PlaybookName": {
      "defaultValue": "Recorded_Future_Identity_Add_Risky_User_to_Security_Group",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Resource name for the logic app playbook.  No spaces are allowed"
      }
    }
  },
  "variables": {
    "playbook1-Playbooks": "playbook1-Playbooks",
    "_playbook1-Playbooks": "[variables('playbook1-Playbooks')]",
    "playbook1-AzureADConnectionName": "[concat('azuread-', parameters('playbook1-PlaybookName'))]",
    "playbook-1-connection-2": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',parameters('workspace-location'),'/managedApis/azuread')]",
    "_playbook-1-connection-2": "[variables('playbook-1-connection-2')]",
    "playbook2-Playbooks": "playbook2-Playbooks",
    "_playbook2-Playbooks": "[variables('playbook2-Playbooks')]",
    "playbook2-LogAnalyticsDataCollectorConnectionName": "[concat('azureloganalyticsdatacollector-', parameters('playbook2-PlaybookName'))]",
    "playbook2-RecordedFutureIdentityConnectionName": "[concat('recordedfutureidenti-', parameters('playbook2-PlaybookName'))]",
    "playbook-2-connection-2": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',parameters('workspace-location'),'/managedApis/azureloganalyticsdatacollector')]",
    "_playbook-2-connection-2": "[variables('playbook-2-connection-2')]",
    "playbook-2-connection-3": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',parameters('workspace-location'),'/managedApis/recordedfutureidenti')]",
    "_playbook-2-connection-3": "[variables('playbook-2-connection-3')]",
    "playbook3-Playbooks": "playbook3-Playbooks",
    "_playbook3-Playbooks": "[variables('playbook3-Playbooks')]",
    "playbook3-LogAnalyticsDataCollectorConnectionName": "[concat('azureloganalyticsdatacollector-', parameters('playbook3-PlaybookName'))]",
    "playbook3-AzureMonitorLogsConnectionName": "[concat('azuremonitorlogs-', parameters('playbook3-PlaybookName'))]",
    "playbook3-RecordedFutureIdentityConnectionName": "[concat('recordedfutureidenti-', parameters('playbook3-PlaybookName'))]",
    "playbook-3-connection-3": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',parameters('workspace-location'),'/managedApis/azuremonitorlogs')]",
    "_playbook-3-connection-3": "[variables('playbook-3-connection-3')]",
    "playbook4-Playbooks": "playbook4-Playbooks",
    "_playbook4-Playbooks": "[variables('playbook4-Playbooks')]",
    "playbook4-LogAnalyticsDataCollectorConnectionName": "[concat('azureloganalyticsdatacollector-', parameters('playbook4-PlaybookName'))]",
    "playbook4-AzureMonitorLogsConnectionName": "[concat('azuremonitorlogs-', parameters('playbook4-PlaybookName'))]",
    "playbook4-RecordedFutureIdentityConnectionName": "[concat('recordedfutureidenti-', parameters('playbook4-PlaybookName'))]",
    "playbook5-Playbooks": "playbook5-Playbooks",
    "_playbook5-Playbooks": "[variables('playbook5-Playbooks')]",
    "playbook5-AzureADConnectionName": "[concat('azuread-', parameters('playbook5-PlaybookName'))]",
    "playbook5-AzureADIdentityProtectionConnectionName": "[concat('azureadip-', parameters('playbook5-PlaybookName'))]",
    "playbook-5-connection-3": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',parameters('workspace-location'),'/managedApis/azureadip')]",
    "_playbook-5-connection-3": "[variables('playbook-5-connection-3')]",
    "sourceId": "recordedfuture1605638642586.recorded_future_identity_sentinel_solution",
    "_sourceId": "[variables('sourceId')]"
  },
  "resources": [
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2019-05-01",
      "name": "[parameters('playbook1-PlaybookName')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('playbook1-AzureADConnectionName'))]"
      ],
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.@{variables('azureManagementUrl')}/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "method": "POST",
                "schema": {
                  "properties": {
                    "active_directory_domain": {
                      "type": "string"
                    },
                    "active_directory_security_group_id": {
                      "type": "string"
                    },
                    "risky_user_email": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "actions": {
            "Add_risky_user_to_Active_Directory_security_group_for_users_at_risk": {
              "runAfter": {
                "Response_-_Risky_user_was_not_found_in_Active_Directory": [
                  "Skipped"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "@@odata.id": "@body('Get_User_-_Check_if_the_user_exists_in_Active_Directory')?['id']"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuread']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/v1.0/groups/@{encodeURIComponent(triggerBody()?['active_directory_security_group_id'])}/members/$ref"
              }
            },
            "Get_User_-_Check_if_the_user_exists_in_Active_Directory": {
              "runAfter": {
                "If_Active_Directory_domain_parameter_is_not_null_and_not_empty": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuread']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/v1.0/users/@{encodeURIComponent(variables('user_principal_name'))}"
              },
              "description": "Use the user's email as Active Directory user principal name."
            },
            "If_Active_Directory_domain_parameter_is_not_null_and_not_empty": {
              "actions": {
                "Set_Active_Directory_user_principal_name_to_user_email's_username_+_AD_domain": {
                  "type": "SetVariable",
                  "inputs": {
                    "name": "user_principal_name",
                    "value": "@{concat(split(triggerBody()?['risky_user_email'], '@')[0], '@', triggerBody()?['active_directory_domain'])}"
                  },
                  "description": "Use [user email's username + Active Directory domain] as Active Directory user principal name."
                }
              },
              "runAfter": {
                "Initialize_-_Active_Directory_user_principal_name": [
                  "Succeeded"
                ]
              },
              "else": {
                "actions": {
                  "Set_Active_Directory_user_principal_name_to_user's_email": {
                    "type": "SetVariable",
                    "inputs": {
                      "name": "user_principal_name",
                      "value": "@triggerBody()?['risky_user_email']"
                    },
                    "description": "Use [user's email] as Active Directory user principal name."
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "not": {
                      "equals": [
                        "@triggerBody()?['active_directory_domain']",
                        "@null"
                      ]
                    }
                  },
                  {
                    "not": {
                      "equals": [
                        "@triggerBody()?['active_directory_domain']",
                        "1"
                      ]
                    }
                  }
                ]
              },
              "type": "If"
            },
            "Initialize_-_Active_Directory_user_principal_name": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "user_principal_name",
                    "type": "string"
                  }
                ]
              }
            },
            "Response_-_Failed_to_add_risky_user_to_AD_security_group_for_users_at_risk": {
              "runAfter": {
                "Response_-_Successfully_added_risky_user_to_AD_security_group_for_users_at_risk": [
                  "Skipped"
                ]
              },
              "type": "Response",
              "kind": "Http",
              "inputs": {
                "body": {
                  "data": {
                    "parameters_passed": {
                      "active_directory_domain": "@triggerBody()?['active_directory_domain']",
                      "active_directory_security_group_id": "@triggerBody()?['active_directory_security_group_id']",
                      "risky_user_email": "@triggerBody()?['risky_user_email']"
                    },
                    "user_id_in_active_directory": "@body('Get_User_-_Check_if_the_user_exists_in_Active_Directory')?['id']",
                    "user_principal_name": "@variables('user_principal_name')"
                  },
                  "reason": "Failed to add Active Directory risky user to Active Directory security group for users at risk. Check active_directory_security_group_id parameter.",
                  "status": "Error"
                },
                "headers": {
                  "Content-Type": "application/json"
                },
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "parameters_passed": {
                          "properties": {
                            "active_directory_domain": {
                              "type": "string"
                            },
                            "active_directory_security_group_id": {
                              "type": "string"
                            },
                            "risky_user_email": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "user_id_in_active_directory": {
                          "type": "string"
                        },
                        "user_principal_name": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "reason": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "statusCode": 422
              }
            },
            "Response_-_Risky_user_was_not_found_in_Active_Directory": {
              "runAfter": {
                "Get_User_-_Check_if_the_user_exists_in_Active_Directory": [
                  "Failed"
                ]
              },
              "type": "Response",
              "kind": "Http",
              "inputs": {
                "body": {
                  "data": {
                    "parameters_passed": {
                      "active_directory_domain": "@triggerBody()?['active_directory_domain']",
                      "active_directory_security_group_id": "@triggerBody()?['active_directory_security_group_id']",
                      "risky_user_email": "@triggerBody()?['risky_user_email']"
                    },
                    "user_principal_name_used": "@variables('user_principal_name')"
                  },
                  "reason": "Risky user was not found in Active Directory.",
                  "status": "Error"
                },
                "headers": {
                  "Content-Type": "application/json"
                },
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "parameters_passed": {
                          "properties": {
                            "active_directory_domain": {
                              "type": "string"
                            },
                            "active_directory_security_group_id": {
                              "type": "string"
                            },
                            "risky_user_email": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "user_principal_name_used": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "reason": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "statusCode": 404
              }
            },
            "Response_-_Successfully_added_risky_user_to_AD_security_group_for_users_at_risk": {
              "runAfter": {
                "Add_risky_user_to_Active_Directory_security_group_for_users_at_risk": [
                  "Succeeded"
                ]
              },
              "type": "Response",
              "kind": "Http",
              "inputs": {
                "body": {
                  "data": {
                    "parameters_passed": {
                      "active_directory_domain": "@triggerBody()?['active_directory_domain']",
                      "active_directory_security_group_id": "@triggerBody()?['active_directory_security_group_id']",
                      "risky_user_email": "@triggerBody()?['risky_user_email']"
                    },
                    "user_id_in_active_directory": "@body('Get_User_-_Check_if_the_user_exists_in_Active_Directory')?['id']",
                    "user_principal_name": "@variables('user_principal_name')"
                  },
                  "status": "Successfully added risky user to Active Directory security group for users at risk."
                },
                "headers": {
                  "Content-Type": "application/json"
                },
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "parameters_passed": {
                          "properties": {
                            "active_directory_domain": {
                              "type": "string"
                            },
                            "active_directory_security_group_id": {
                              "type": "string"
                            },
                            "risky_user_email": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "user_id_in_active_directory": {
                          "type": "string"
                        },
                        "user_principal_name": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "statusCode": 200
              }
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "azuread": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook1-AzureADConnectionName'))]",
                "connectionName": "[variables('playbook1-AzureADConnectionName')]",
                "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',parameters('workspace-location'),'/managedApis/azuread')]"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook1-AzureADConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "api": {
          "id": "[variables('_playbook-1-connection-2')]"
        },
        "displayName": "[variables('playbook1-AzureADConnectionName')]"
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2019-05-01",
      "name": "[parameters('playbook2-PlaybookName')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('playbook2-LogAnalyticsDataCollectorConnectionName'))]",
        "[resourceId('Microsoft.Web/connections', variables('playbook2-RecordedFutureIdentityConnectionName'))]"
      ],
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.@{variables('azureManagementUrl')}/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "method": "POST",
                "schema": {
                  "properties": {
                    "lookup_lookback_range": {
                      "type": "integer"
                    },
                    "lookup_results_loganalytics_custom_log": {
                      "type": "string"
                    },
                    "risky_user_email": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "actions": {
            "Credential_Lookup_-_Look_up_credential_data_for_one_or_more_users": {
              "runAfter": {
                "Initialize_-_Default_name_for_Lookup_results_Log_Analytics_custom_log": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "filter": {
                    "first_downloaded_gte": "@{formatDateTime(addDays(utcNow(), if(equals(triggerBody()?['lookup_lookback_range'], null), variables('default_value_for_lookup_lookback_days'), triggerBody()?['lookup_lookback_range'])), 'yyyy-MM-dd')}"
                  },
                  "subjects": [
                    "@triggerBody()?['risky_user_email']"
                  ]
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['recordedfutureidenti']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/credentials/lookup"
              }
            },
            "Initialize_-_Default_name_for_Lookup_results_Log_Analytics_custom_log": {
              "runAfter": {
                "Initialize_-_Default_value_for_Lookup_range_(days_back)": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "lookup_results_loganalytics_custom_log",
                    "type": "string",
                    "value": "RiskyUsersLookupResults_CL"
                  }
                ]
              },
              "description": "Table name must ends with \"CL\""
            },
            "Initialize_-_Default_value_for_Lookup_range_(days_back)": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "default_value_for_lookup_lookback_days",
                    "type": "integer",
                    "value": -365
                  }
                ]
              },
              "description": "Default number of days before today to lookup.  E.g. input \"-14\" to search the last 14 days. This value can be changed by passing corresponding parameter in requests' json body."
            },
            "Response_-_Failed": {
              "runAfter": {
                "Response_-_Successfully_saved_lookup_results_into_LogAnalytics": [
                  "Skipped"
                ]
              },
              "type": "Response",
              "kind": "Http",
              "inputs": {
                "body": {
                  "data": {
                    "lookup_lookback_date": "@formatDateTime(addDays(utcNow(), if(equals(triggerBody()?['lookup_lookback_range'], null), variables('default_value_for_lookup_lookback_days'), triggerBody()?['lookup_lookback_range'])), 'yyyy-MM-dd')",
                    "lookup_results": "@body('Credential_Lookup_-_Look_up_credential_data_for_one_or_more_users')",
                    "lookup_results_loganalytics_custom_log": "@if(equals(triggerBody()?['lookup_results_loganalytics_custom_log'], null), variables('lookup_results_loganalytics_custom_log'), triggerBody()?['lookup_results_loganalytics_custom_log'])",
                    "parameters_passed": {
                      "lookup_lookback_range": "@triggerBody()?['lookup_lookback_range']",
                      "lookup_results_loganalytics_custom_log": "@triggerBody()?['lookup_results_loganalytics_custom_log']",
                      "risky_user_email": "@triggerBody()?['risky_user_email']"
                    }
                  },
                  "reason": "Unknown",
                  "status": "Error"
                },
                "headers": {
                  "Content-Type": "application/json"
                },
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "lookup_lookback_date": {
                          "type": "string"
                        },
                        "lookup_results": {
                          "type": "object"
                        },
                        "lookup_results_loganalytics_custom_log": {
                          "type": "string"
                        },
                        "parameters_passed": {
                          "properties": {
                            "lookup_lookback_range": {
                              "type": "integer"
                            },
                            "lookup_results_loganalytics_custom_log": {
                              "type": "string"
                            },
                            "risky_user_email": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "reason": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "statusCode": 422
              }
            },
            "Response_-_Successfully_saved_lookup_results_into_LogAnalytics": {
              "runAfter": {
                "Send_Data_-_Save_Lookup_results_to_LogAnalytics_Custom_Log": [
                  "Succeeded"
                ]
              },
              "type": "Response",
              "kind": "Http",
              "inputs": {
                "body": {
                  "data": {
                    "lookup_lookback_date": "@formatDateTime(addDays(utcNow(), if(equals(triggerBody()?['lookup_lookback_range'], null), variables('default_value_for_lookup_lookback_days'), triggerBody()?['lookup_lookback_range'])), 'yyyy-MM-dd')",
                    "lookup_results": "@body('Credential_Lookup_-_Look_up_credential_data_for_one_or_more_users')",
                    "lookup_results_loganalytics_custom_log": "@if(equals(triggerBody()?['lookup_results_loganalytics_custom_log'], null), variables('lookup_results_loganalytics_custom_log'), triggerBody()?['lookup_results_loganalytics_custom_log'])",
                    "parameters_passed": {
                      "lookup_lookback_range": "@triggerBody()?['lookup_lookback_range']",
                      "lookup_results_loganalytics_custom_log": "@triggerBody()?['lookup_results_loganalytics_custom_log']",
                      "risky_user_email": "@triggerBody()?['risky_user_email']"
                    }
                  },
                  "status": "Successfully saved risky user lookup results into LogAnalytics table."
                },
                "headers": {
                  "Content-Type": "application/json"
                },
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "lookup_lookback_date": {
                          "type": "string"
                        },
                        "lookup_results": {
                          "type": "object"
                        },
                        "lookup_results_loganalytics_custom_log": {
                          "type": "string"
                        },
                        "parameters_passed": {
                          "properties": {
                            "lookup_lookback_range": {
                              "type": "integer"
                            },
                            "lookup_results_loganalytics_custom_log": {
                              "type": "string"
                            },
                            "risky_user_email": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "statusCode": 200
              }
            },
            "Send_Data_-_Save_Lookup_results_to_LogAnalytics_Custom_Log": {
              "runAfter": {
                "Credential_Lookup_-_Look_up_credential_data_for_one_or_more_users": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": "@{body('Credential_Lookup_-_Look_up_credential_data_for_one_or_more_users')}",
                "headers": {
                  "Log-Type": "@{if(equals(triggerBody()?['lookup_results_loganalytics_custom_log'], null), variables('lookup_results_loganalytics_custom_log'), triggerBody()?['lookup_results_loganalytics_custom_log'])}",
                  "time-generated-field": "@{utcNow()}"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/api/logs"
              }
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "azureloganalyticsdatacollector": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook2-LogAnalyticsDataCollectorConnectionName'))]",
                "connectionName": "[variables('playbook2-LogAnalyticsDataCollectorConnectionName')]",
                "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',parameters('workspace-location'),'/managedApis/azureloganalyticsdatacollector')]"
              },
              "recordedfutureidenti": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook2-RecordedFutureIdentityConnectionName'))]",
                "connectionName": "[variables('playbook2-RecordedFutureIdentityConnectionName')]",
                "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',parameters('workspace-location'),'/managedApis/recordedfutureidenti')]"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook2-LogAnalyticsDataCollectorConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "api": {
          "id": "[variables('_playbook-2-connection-2')]"
        },
        "displayName": "[variables('playbook2-LogAnalyticsDataCollectorConnectionName')]"
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook2-RecordedFutureIdentityConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "api": {
          "id": "[variables('_playbook-2-connection-3')]"
        },
        "displayName": "[variables('playbook2-RecordedFutureIdentityConnectionName')]"
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2019-05-01",
      "name": "[parameters('playbook3-PlaybookName')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('playbook3-LogAnalyticsDataCollectorConnectionName'))]",
        "[resourceId('Microsoft.Web/connections', variables('playbook3-AzureMonitorLogsConnectionName'))]",
        "[resourceId('Microsoft.Web/connections', variables('playbook3-RecordedFutureIdentityConnectionName'))]"
      ],
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.@{variables('azureManagementUrl')}/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "type": "Object"
            }
          },
          "triggers": {
            "Recurrence": {
              "recurrence": {
                "frequency": "Day",
                "interval": 1
              },
              "evaluatedRecurrence": {
                "frequency": "Day",
                "interval": 1
              },
              "type": "Recurrence"
            }
          },
          "actions": {
            "Add_Log_Analytics_Malware_log_exposures_to_the_corresponding_array": {
              "runAfter": {
                "Query_Log_Analytics_for_Malware_log_exposures": [
                  "Succeeded"
                ]
              },
              "type": "SetVariable",
              "inputs": {
                "name": "known_malware_log_creds",
                "value": "@body('Query_Log_Analytics_for_Malware_log_exposures')?['value']"
              }
            },
            "Credential_Search_-_Search_credential_data_for_one_or_more_domains": {
              "runAfter": {
                "Initialize_-_Name_for_\"Malware_Logs\"_Log_Analytics_Custom_Log": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "domain_type": "My Organization (workforce use case)",
                  "domains": [
                    "@variables('company_domain')"
                  ],
                  "filter": {
                    "latest_downloaded_gte": "@{formatDateTime(addDays(utcNow(), variables('search_lookback_days')), 'yyyy-MM-dd')}"
                  },
                  "limit": 500
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['recordedfutureidenti']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/credentials/search"
              }
            },
            "For_Each_-_extend_new_exposures_array_with_new_Malware_log_exposures": {
              "foreach": "@variables('unknown_malware_log_creds')",
              "actions": {
                "Add_new_Malware_log_exposure_email_to_the_array_of_all_new_exposures": {
                  "type": "AppendToArrayVariable",
                  "inputs": {
                    "name": "newly_leaked_emails",
                    "value": "@items('For_Each_-_extend_new_exposures_array_with_new_Malware_log_exposures')?['login']"
                  }
                }
              },
              "runAfter": {
                "Initialize_-_Array_of_all_new_exposures_(emails)": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "For_Each_new_Malware_log_exposures": {
              "foreach": "@body('Credential_Search_-_Search_credential_data_for_one_or_more_domains')?['malware_logs']",
              "actions": {
                "If_Malware_log_exposure_is_new": {
                  "actions": {
                    "Add_new_exposure_to_the_new_Malware_log_exposures_array": {
                      "type": "AppendToArrayVariable",
                      "inputs": {
                        "name": "unknown_malware_log_creds",
                        "value": "@items('For_Each_new_Malware_log_exposures')"
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "not": {
                          "contains": [
                            "@variables('known_malware_log_creds')",
                            "@items('For_Each_new_Malware_log_exposures')"
                          ]
                        }
                      }
                    ]
                  },
                  "type": "If",
                  "description": "\"New\" - means it have not been previously seen by the Logic App."
                }
              },
              "runAfter": {
                "Initialize_-_Array_of_new_Malware_log_exposures": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "For_each_new_exposures_-_do_protective_actions": {
              "foreach": "@variables('newly_leaked_emails')",
              "actions": {
                "Current_time": {
                  "type": "Expression",
                  "kind": "CurrentTime",
                  "description": "This block is needed only to create 3 branches in this For each loop."
                },
                "IdentityPlaybook_-_add_risky_user_to_AD_security_group": {
                  "runAfter": {
                    "Current_time": [
                      "Succeeded"
                    ]
                  },
                  "type": "Workflow",
                  "inputs": {
                    "body": {
                      "active_directory_domain": "@variables('active_directory_domain')",
                      "active_directory_security_group_id": "@variables('risky_security_group_id')",
                      "risky_user_email": "@{items('For_each_new_exposures_-_do_protective_actions')}"
                    },
                    "headers": {
                      "Content-Type": "application/json"
                    },
                    "host": {
                      "triggerName": "manual",
                      "workflow": {
                        "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Logic/workflows/', parameters('playbook3-PlaybookName_Add_Risky_User_to_Security_Group'))]"
                      }
                    }
                  }
                },
                "IdentityPlaybook_-_identity_protection_confirm_user_is_risky": {
                  "runAfter": {
                    "Current_time": [
                      "Succeeded"
                    ]
                  },
                  "type": "Workflow",
                  "inputs": {
                    "body": {
                      "active_directory_domain": "@variables('active_directory_domain')",
                      "risky_user_email": "@{items('For_each_new_exposures_-_do_protective_actions')}"
                    },
                    "headers": {
                      "Content-Type": "application/json"
                    },
                    "host": {
                      "triggerName": "manual",
                      "workflow": {
                        "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Logic/workflows/', parameters('playbook3-PlaybookName_Identity_Protection_Confirm_User_Is_Risky'))]"
                      }
                    }
                  }
                },
                "IdentityPlaybook_-_lookup_data_on_risky_user_and_save_it_into_LogAnalytics": {
                  "runAfter": {
                    "Current_time": [
                      "Succeeded"
                    ]
                  },
                  "type": "Workflow",
                  "inputs": {
                    "body": {
                      "lookup_lookback_range": "@variables('lookup_lookback_days')",
                      "lookup_results_loganalytics_custom_log": "@variables('lookup_results_loganalytics_custom_log')",
                      "risky_user_email": "@{items('For_each_new_exposures_-_do_protective_actions')}"
                    },
                    "headers": {
                      "Content-Type": "application/json"
                    },
                    "host": {
                      "triggerName": "manual",
                      "workflow": {
                        "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Logic/workflows/', parameters('playbook3-PlaybookName_Lookup_and_Save'))]"
                      }
                    }
                  }
                }
              },
              "runAfter": {
                "Initialize_-_ID_of_Active_Directory_security_group_for_users_at_risk": [
                  "Succeeded"
                ]
              },
              "type": "Foreach",
              "runtimeConfiguration": {
                "concurrency": {
                  "repetitions": 1
                }
              }
            },
            "Initialize_-_Array_of_all_new_exposures_(emails)": {
              "runAfter": {
                "Send_Data_-_Save_new_Malware_log_exposures_into_Log_Analytics_Custom_Log": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "newly_leaked_emails",
                    "type": "array"
                  }
                ]
              }
            },
            "Initialize_-_Array_of_known_Malware_log_exposures": {
              "runAfter": {
                "Credential_Search_-_Search_credential_data_for_one_or_more_domains": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "known_malware_log_creds",
                    "type": "array"
                  }
                ]
              },
              "description": "Existing Malware logs (collected during prior Logic App runs)"
            },
            "Initialize_-_Array_of_new_Malware_log_exposures": {
              "runAfter": {
                "Add_Log_Analytics_Malware_log_exposures_to_the_corresponding_array": [
                  "Succeeded",
                  "Skipped"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "unknown_malware_log_creds",
                    "type": "array"
                  }
                ]
              },
              "description": "Exposures that wasn't previously seen by the Logic App."
            },
            "Initialize_-_ID_of_Active_Directory_security_group_for_users_at_risk": {
              "runAfter": {
                "Initialize_-_[Optional]_Active_Directory_Domain": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "risky_security_group_id",
                    "type": "string"
                  }
                ]
              },
              "description": "Create an Active Directory security group that will store any users with exposed credentials."
            },
            "Initialize_-_Lookup_range_(days_back)": {
              "runAfter": {
                "Initialize_-_Name_for_Lookup_results_Log_Analytics_Custom_Log": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "lookup_lookback_days",
                    "type": "integer",
                    "value": -365
                  }
                ]
              },
              "description": "Number of days before today to lookup.  E.g. input \"-14\" to search the last 14 days."
            },
            "Initialize_-_Name_for_\"Malware_Logs\"_Log_Analytics_Custom_Log": {
              "runAfter": {
                "Initialize_-_Search_range_(days_back)": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "malware_logs_loganalytics_custom_log",
                    "type": "string",
                    "value": "LeakedCredentials_MalwareLogs_CL"
                  }
                ]
              },
              "description": "Custom Log name (Value) must end with \"CL\""
            },
            "Initialize_-_Name_for_Lookup_results_Log_Analytics_Custom_Log": {
              "runAfter": {
                "For_Each_-_extend_new_exposures_array_with_new_Malware_log_exposures": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "lookup_results_loganalytics_custom_log",
                    "type": "string",
                    "value": "RiskyUsers_CL"
                  }
                ]
              },
              "description": "Custom Log name (Value) must end with \"CL\""
            },
            "Initialize_-_Organization_domain": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "company_domain",
                    "type": "string",
                    "value": "example.com"
                  }
                ]
              },
              "description": "Organization domain to search exposures for."
            },
            "Initialize_-_Search_range_(days_back)": {
              "runAfter": {
                "Initialize_-_Organization_domain": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "search_lookback_days",
                    "type": "integer",
                    "value": -14
                  }
                ]
              },
              "description": "Number of days before today to search.  E.g. input \"-14\" to search the last 14 days."
            },
            "Initialize_-_[Optional]_Active_Directory_Domain": {
              "runAfter": {
                "Initialize_-_Lookup_range_(days_back)": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "active_directory_domain",
                    "type": "string"
                  }
                ]
              },
              "description": "If Active Directory (AD) and email use different domains, set AD domain here (Value). Syntax: \"company.onmicrosoft.com\" (exclude \"@\")."
            },
            "Query_Log_Analytics_for_Malware_log_exposures": {
              "runAfter": {
                "Initialize_-_Array_of_known_Malware_log_exposures": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": "@{variables('malware_logs_loganalytics_custom_log')} | project login=login_s, domain=domain_s",
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/queryData",
                "queries": {
                  "resourcegroups": "RF",
                  "resourcename": "RF-log-analyitics",
                  "resourcetype": "Log Analytics Workspace",
                  "subscriptions": "5129b3ff-c0c6-4e86-bd1c-70e5fcd579cf",
                  "timerange": "@{formatDateTime(addDays(utcNow(), variables('search_lookback_days')), 'yyyy-MM-dd')}"
                }
              }
            },
            "Send_Data_-_Save_new_Malware_log_exposures_into_Log_Analytics_Custom_Log": {
              "runAfter": {
                "Transform_new_Malware_log_exposures_array_into_a_JSON_object": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": "@{outputs('Transform_new_Malware_log_exposures_array_into_a_JSON_object')}",
                "headers": {
                  "Log-Type": "@variables('malware_logs_loganalytics_custom_log')",
                  "time-generated-field": "@{utcNow()}"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/api/logs"
              }
            },
            "Transform_new_Malware_log_exposures_array_into_a_JSON_object": {
              "runAfter": {
                "For_Each_new_Malware_log_exposures": [
                  "Succeeded"
                ]
              },
              "type": "Compose",
              "inputs": "@variables('unknown_malware_log_creds')"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "azureloganalyticsdatacollector": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook3-LogAnalyticsDataCollectorConnectionName'))]",
                "connectionName": "[variables('playbook3-LogAnalyticsDataCollectorConnectionName')]",
                "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',parameters('workspace-location'),'/managedApis/azureloganalyticsdatacollector')]"
              },
              "azuremonitorlogs": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook3-AzureMonitorLogsConnectionName'))]",
                "connectionName": "[variables('playbook3-AzureMonitorLogsConnectionName')]",
                "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',parameters('workspace-location'),'/managedApis/azuremonitorlogs')]"
              },
              "recordedfutureidenti": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook3-RecordedFutureIdentityConnectionName'))]",
                "connectionName": "[variables('playbook3-RecordedFutureIdentityConnectionName')]",
                "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',parameters('workspace-location'),'/managedApis/recordedfutureidenti')]"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook3-LogAnalyticsDataCollectorConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "api": {
          "id": "[variables('_playbook-2-connection-2')]"
        },
        "displayName": "[variables('playbook3-LogAnalyticsDataCollectorConnectionName')]"
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook3-AzureMonitorLogsConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "api": {
          "id": "[variables('_playbook-3-connection-3')]"
        },
        "displayName": "[variables('playbook3-AzureMonitorLogsConnectionName')]"
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook3-RecordedFutureIdentityConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "api": {
          "id": "[variables('_playbook-2-connection-3')]"
        },
        "displayName": "[variables('playbook3-RecordedFutureIdentityConnectionName')]"
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "[parameters('playbook4-PlaybookName')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('playbook4-LogAnalyticsDataCollectorConnectionName'))]",
        "[resourceId('Microsoft.Web/connections', variables('playbook4-AzureMonitorLogsConnectionName'))]",
        "[resourceId('Microsoft.Web/connections', variables('playbook4-RecordedFutureIdentityConnectionName'))]"
      ],
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.@{variables('azureManagementUrl')}/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "type": "Object"
            }
          },
          "triggers": {
            "Recurrence": {
              "recurrence": {
                "frequency": "Day",
                "interval": 1
              },
              "evaluatedRecurrence": {
                "frequency": "Day",
                "interval": 1
              },
              "type": "Recurrence"
            }
          },
          "actions": {
            "Add_Log_Analytics_Credential_dump_exposures_to_the_corresponding_array": {
              "runAfter": {
                "Query_Log_Analytics_for_Credential_dump_exposures": [
                  "Succeeded"
                ]
              },
              "type": "SetVariable",
              "inputs": {
                "name": "known_credential_dump_creds",
                "value": "@body('Query_Log_Analytics_for_Credential_dump_exposures')?['value']"
              }
            },
            "Add_Log_Analytics_Malware_log_exposures_to_the_corresponding_array": {
              "runAfter": {
                "Query_Log_Analytics_for_Malware_log_exposures": [
                  "Succeeded"
                ]
              },
              "type": "SetVariable",
              "inputs": {
                "name": "known_malware_log_creds",
                "value": "@body('Query_Log_Analytics_for_Malware_log_exposures')?['value']"
              }
            },
            "Credential_Search_-_Search_credential_data_for_one_or_more_domains": {
              "runAfter": {
                "Initialize_-_Name_for_\"Malware_Logs\"_Log_Analytics_Custom_Log": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "domain_type": "My Organization (workforce use case)",
                  "domains": [
                    "@variables('company_domain')"
                  ],
                  "filter": {
                    "latest_downloaded_gte": "@{formatDateTime(addDays(utcNow(), variables('search_lookback_days')), 'yyyy-MM-dd')}"
                  },
                  "limit": 500
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['recordedfutureidenti']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/credentials/search"
              }
            },
            "For_Each_-_Make_new_and_known_Credential_dumps_be_comparable": {
              "foreach": "@body('Credential_Search_-_Search_credential_data_for_one_or_more_domains')?['credential_dumps']",
              "actions": {
                "Append_transformed_exposures_to_array": {
                  "type": "AppendToArrayVariable",
                  "inputs": {
                    "name": "transformed_rf_api_credential_dump_creds",
                    "value": {
                      "email": "@items('For_Each_-_Make_new_and_known_Credential_dumps_be_comparable')"
                    }
                  }
                }
              },
              "runAfter": {
                "Initialize_-_Array_of_transformed_new_Credential_dump_exposures": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "For_Each_-_extend_new_exposures_array_with_new_Credential_dump_exposures": {
              "foreach": "@variables('unknown_credential_dump_creds')",
              "actions": {
                "Add_new_Credential_dump_exposure_email_to_the_array_of_all_new_exposures": {
                  "type": "AppendToArrayVariable",
                  "inputs": {
                    "name": "newly_leaked_emails",
                    "value": "@items('For_Each_-_extend_new_exposures_array_with_new_Credential_dump_exposures')?['email']"
                  }
                }
              },
              "runAfter": {
                "For_Each_-_extend_new_exposures_array_with_new_Malware_log_exposures": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "For_Each_-_extend_new_exposures_array_with_new_Malware_log_exposures": {
              "foreach": "@variables('unknown_malware_log_creds')",
              "actions": {
                "Add_new_Malware_log_exposure_email_to_the_array_of_all_new_exposures": {
                  "type": "AppendToArrayVariable",
                  "inputs": {
                    "name": "newly_leaked_emails",
                    "value": "@items('For_Each_-_extend_new_exposures_array_with_new_Malware_log_exposures')?['login']"
                  }
                }
              },
              "runAfter": {
                "Initialize_-_Array_of_all_new_exposures_(emails)": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "For_Each_new_Credential_dump_exposures": {
              "foreach": "@variables('transformed_rf_api_credential_dump_creds')",
              "actions": {
                "If_Credential_dump_exposure_is_new": {
                  "actions": {
                    "Add_new_exposure_to_the_new_Credential_dump_exposures_array": {
                      "type": "AppendToArrayVariable",
                      "inputs": {
                        "name": "unknown_credential_dump_creds",
                        "value": "@items('For_Each_new_Credential_dump_exposures')"
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "not": {
                          "contains": [
                            "@variables('known_credential_dump_creds')",
                            "@items('For_Each_new_Credential_dump_exposures')"
                          ]
                        }
                      }
                    ]
                  },
                  "type": "If",
                  "description": "\"New\" - means it have not been previously seen by the Logic App."
                }
              },
              "runAfter": {
                "Initialize_-_Array_of_new_Credential_dump_exposures": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "For_Each_new_Malware_log_exposures": {
              "foreach": "@body('Credential_Search_-_Search_credential_data_for_one_or_more_domains')?['malware_logs']",
              "actions": {
                "If_Malware_log_exposure_is_new": {
                  "actions": {
                    "Add_new_exposure_to_the_new_Malware_log_exposures_array": {
                      "type": "AppendToArrayVariable",
                      "inputs": {
                        "name": "unknown_malware_log_creds",
                        "value": "@items('For_Each_new_Malware_log_exposures')"
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "not": {
                          "contains": [
                            "@variables('known_malware_log_creds')",
                            "@items('For_Each_new_Malware_log_exposures')"
                          ]
                        }
                      }
                    ]
                  },
                  "type": "If",
                  "description": "\"New\" - means it have not been previously seen by the Logic App."
                }
              },
              "runAfter": {
                "Initialize_-_Array_of_new_Malware_log_exposures": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "For_each_new_exposures_-_do_protective_actions": {
              "foreach": "@variables('newly_leaked_emails')",
              "actions": {
                "Current_time": {
                  "type": "Expression",
                  "kind": "CurrentTime",
                  "description": "This block is needed only to create 3 branches in this For each loop."
                },
                "IdentityPlaybook_-_add_risky_user_to_AD_security_group": {
                  "runAfter": {
                    "Current_time": [
                      "Succeeded"
                    ]
                  },
                  "type": "Workflow",
                  "inputs": {
                    "body": {
                      "active_directory_domain": "@variables('active_directory_domain')",
                      "active_directory_security_group_id": "@variables('risky_security_group_id')",
                      "risky_user_email": "@{items('For_each_new_exposures_-_do_protective_actions')}"
                    },
                    "headers": {
                      "Content-Type": "application/json"
                    },
                    "host": {
                      "triggerName": "manual",
                      "workflow": {
                        "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Logic/workflows/', parameters('playbook4-PlaybookName_Add_Risky_User_to_Security_Group'))]"
                      }
                    }
                  }
                },
                "IdentityPlaybook_-_lookup_data_on_risky_user_and_save_it_into_LogAnalytics": {
                  "runAfter": {
                    "Current_time": [
                      "Succeeded"
                    ]
                  },
                  "type": "Workflow",
                  "inputs": {
                    "body": {
                      "lookup_lookback_range": "@variables('lookup_lookback_days')",
                      "lookup_results_loganalytics_custom_log": "@variables('lookup_results_loganalytics_custom_log')",
                      "risky_user_email": "@{items('For_each_new_exposures_-_do_protective_actions')}"
                    },
                    "headers": {
                      "Content-Type": "application/json"
                    },
                    "host": {
                      "triggerName": "manual",
                      "workflow": {
                        "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Logic/workflows/', parameters('playbook4-PlaybookName_Lookup_and_Save'))]"
                      }
                    }
                  }
                },
                "IdentityPlaybook_-_identity_protection_confirm_user_is_risky": {
                  "runAfter": {
                    "Current_time": [
                      "Succeeded"
                    ]
                  },
                  "type": "Workflow",
                  "inputs": {
                    "body": {
                      "active_directory_domain": "@variables('active_directory_domain')",
                      "risky_user_email": "@{items('For_each_new_exposures_-_do_protective_actions')}"
                    },
                    "headers": {
                      "Content-Type": "application/json"
                    },
                    "host": {
                      "triggerName": "manual",
                      "workflow": {
                        "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Logic/workflows/', parameters('playbook4-PlaybookName_Identity_Protection_Confirm_User_Is_Risky'))]"
                      }
                    }
                  }
                }
              },
              "runAfter": {
                "Initialize_-_ID_of_Active_Directory_security_group_for_users_at_risk": [
                  "Succeeded"
                ]
              },
              "type": "Foreach",
              "runtimeConfiguration": {
                "concurrency": {
                  "repetitions": 1
                }
              }
            },
            "Initialize_-_Array_of_all_new_exposures_(emails)": {
              "runAfter": {
                "Send_Data_-_Save_new_Credential_dump_exposures_into_Log_Analytics_Custom_Log": [
                  "Succeeded",
                  "TimedOut",
                  "Failed"
                ],
                "Send_Data_-_Save_new_Malware_log_exposures_into_Log_Analytics_Custom_Log": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "newly_leaked_emails",
                    "type": "array"
                  }
                ]
              }
            },
            "Initialize_-_Array_of_known_Credential_dump_exposures": {
              "runAfter": {
                "Credential_Search_-_Search_credential_data_for_one_or_more_domains": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "known_credential_dump_creds",
                    "type": "array"
                  }
                ]
              },
              "description": "Existing Credential dumps (collected during prior Logic App runs)"
            },
            "Initialize_-_Array_of_known_Malware_log_exposures": {
              "runAfter": {
                "Credential_Search_-_Search_credential_data_for_one_or_more_domains": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "known_malware_log_creds",
                    "type": "array"
                  }
                ]
              },
              "description": "Existing Malware logs (collected during prior Logic App runs)"
            },
            "Initialize_-_Array_of_new_Credential_dump_exposures": {
              "runAfter": {
                "For_Each_-_Make_new_and_known_Credential_dumps_be_comparable": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "unknown_credential_dump_creds",
                    "type": "array"
                  }
                ]
              },
              "description": "\"New\" - means that this are new leaks, which weren't seen on previous runs of the logic app."
            },
            "Initialize_-_Array_of_new_Malware_log_exposures": {
              "runAfter": {
                "Add_Log_Analytics_Malware_log_exposures_to_the_corresponding_array": [
                  "Succeeded",
                  "Skipped"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "unknown_malware_log_creds",
                    "type": "array"
                  }
                ]
              },
              "description": "Exposures that wasn't previously seen by the Logic App."
            },
            "Initialize_-_Array_of_transformed_new_Credential_dump_exposures": {
              "runAfter": {
                "Add_Log_Analytics_Credential_dump_exposures_to_the_corresponding_array": [
                  "Succeeded",
                  "Skipped"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "transformed_rf_api_credential_dump_creds",
                    "type": "array"
                  }
                ]
              },
              "description": "New Credential dumps are formatted to enable storing and comparing them with existing Credential dumps in Log Analytics."
            },
            "Initialize_-_ID_of_Active_Directory_security_group_for_users_at_risk": {
              "runAfter": {
                "Initialize_-_[Optional]_Active_Directory_Domain": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "risky_security_group_id",
                    "type": "string"
                  }
                ]
              },
              "description": "Create an Active Directory security group that will store any users with exposed credentials."
            },
            "Initialize_-_Lookup_range_(days_back)": {
              "runAfter": {
                "Initialize_-_Name_for_Lookup_results_Log_Analytics_Custom_Log": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "lookup_lookback_days",
                    "type": "integer",
                    "value": -365
                  }
                ]
              },
              "description": "Number of days before today to lookup.  E.g. input \"-14\" to search the last 14 days."
            },
            "Initialize_-_Name_for_\"Credential_Dumps\"_Log_Analytics_Custom_Log": {
              "runAfter": {
                "Initialize_-_Search_range_(days_back)": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "credential_dumps_loganalytics_custom_log",
                    "type": "string",
                    "value": "LeakedCredentials_CredentialDumps_CL"
                  }
                ]
              },
              "description": "Custom Log name (Value) must end with \"CL\""
            },
            "Initialize_-_Name_for_\"Malware_Logs\"_Log_Analytics_Custom_Log": {
              "runAfter": {
                "Initialize_-_Name_for_\"Credential_Dumps\"_Log_Analytics_Custom_Log": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "malware_logs_loganalytics_custom_log",
                    "type": "string",
                    "value": "LeakedCredentials_MalwareLogs_CL"
                  }
                ]
              },
              "description": "Custom Log name (Value) must end with \"CL\""
            },
            "Initialize_-_Name_for_Lookup_results_Log_Analytics_Custom_Log": {
              "runAfter": {
                "For_Each_-_extend_new_exposures_array_with_new_Credential_dump_exposures": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "lookup_results_loganalytics_custom_log",
                    "type": "string",
                    "value": "RiskyUsers_CL"
                  }
                ]
              },
              "description": "Custom Log name (Value) must end with \"CL\""
            },
            "Initialize_-_Organization_domain": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "company_domain",
                    "type": "string",
                    "value": "example.com"
                  }
                ]
              },
              "description": "Organization domain to search exposures for."
            },
            "Initialize_-_Search_range_(days_back)": {
              "runAfter": {
                "Initialize_-_Organization_domain": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "search_lookback_days",
                    "type": "integer",
                    "value": -14
                  }
                ]
              },
              "description": "Number of days before today to search.  E.g. input \"-14\" to search the last 14 days."
            },
            "Initialize_-_[Optional]_Active_Directory_Domain": {
              "runAfter": {
                "Initialize_-_Lookup_range_(days_back)": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "active_directory_domain",
                    "type": "string"
                  }
                ]
              },
              "description": "If Active Directory (AD) and email use different domains, set AD domain here (Value). Syntax: \"company.onmicrosoft.com\" (exclude \"@\")."
            },
            "Query_Log_Analytics_for_Credential_dump_exposures": {
              "runAfter": {
                "Initialize_-_Array_of_known_Credential_dump_exposures": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": "@{variables('credential_dumps_loganalytics_custom_log')} | project email=email_s",
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/queryData",
                "queries": {
                  "resourcegroups": "RF",
                  "resourcename": "RF-log-analyitics",
                  "resourcetype": "Log Analytics Workspace",
                  "subscriptions": "5129b3ff-c0c6-4e86-bd1c-70e5fcd579cf",
                  "timerange": "@{formatDateTime(addDays(utcNow(), variables('search_lookback_days')), 'yyyy-MM-dd')}"
                }
              }
            },
            "Query_Log_Analytics_for_Malware_log_exposures": {
              "runAfter": {
                "Initialize_-_Array_of_known_Malware_log_exposures": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": "@{variables('malware_logs_loganalytics_custom_log')} | project login=login_s, domain=domain_s",
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/queryData",
                "queries": {
                  "resourcegroups": "RF",
                  "resourcename": "RF-log-analyitics",
                  "resourcetype": "Log Analytics Workspace",
                  "subscriptions": "5129b3ff-c0c6-4e86-bd1c-70e5fcd579cf",
                  "timerange": "@{formatDateTime(addDays(utcNow(), variables('search_lookback_days')), 'yyyy-MM-dd')}"
                }
              }
            },
            "Send_Data_-_Save_new_Credential_dump_exposures_into_Log_Analytics_Custom_Log": {
              "runAfter": {
                "Transform_new_Credential_dump_exposures_array_into_a_JSON_object": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": "@{outputs('Transform_new_Credential_dump_exposures_array_into_a_JSON_object')}",
                "headers": {
                  "Log-Type": "@variables('credential_dumps_loganalytics_custom_log')",
                  "time-generated-field": "@{utcNow()}"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/api/logs"
              }
            },
            "Send_Data_-_Save_new_Malware_log_exposures_into_Log_Analytics_Custom_Log": {
              "runAfter": {
                "Transform_new_Malware_log_exposures_array_into_a_JSON_object": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": "@{outputs('Transform_new_Malware_log_exposures_array_into_a_JSON_object')}",
                "headers": {
                  "Log-Type": "@variables('malware_logs_loganalytics_custom_log')",
                  "time-generated-field": "@{utcNow()}"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/api/logs"
              }
            },
            "Transform_new_Credential_dump_exposures_array_into_a_JSON_object": {
              "runAfter": {
                "For_Each_new_Credential_dump_exposures": [
                  "Succeeded"
                ]
              },
              "type": "Compose",
              "inputs": "@variables('unknown_credential_dump_creds')"
            },
            "Transform_new_Malware_log_exposures_array_into_a_JSON_object": {
              "runAfter": {
                "For_Each_new_Malware_log_exposures": [
                  "Succeeded"
                ]
              },
              "type": "Compose",
              "inputs": "@variables('unknown_malware_log_creds')"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "azureloganalyticsdatacollector": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook4-LogAnalyticsDataCollectorConnectionName'))]",
                "connectionName": "[variables('playbook4-LogAnalyticsDataCollectorConnectionName')]",
                "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',parameters('workspace-location'),'/managedApis/azureloganalyticsdatacollector')]"
              },
              "azuremonitorlogs": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook4-AzureMonitorLogsConnectionName'))]",
                "connectionName": "[variables('playbook4-AzureMonitorLogsConnectionName')]",
                "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',parameters('workspace-location'),'/managedApis/azuremonitorlogs')]"
              },
              "recordedfutureidenti": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook4-RecordedFutureIdentityConnectionName'))]",
                "connectionName": "[variables('playbook4-RecordedFutureIdentityConnectionName')]",
                "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',parameters('workspace-location'),'/managedApis/recordedfutureidenti')]"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook4-LogAnalyticsDataCollectorConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "api": {
          "id": "[variables('_playbook-2-connection-2')]"
        },
        "displayName": "[variables('playbook4-LogAnalyticsDataCollectorConnectionName')]"
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook4-AzureMonitorLogsConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "api": {
          "id": "[variables('_playbook-3-connection-3')]"
        },
        "displayName": "[variables('playbook4-AzureMonitorLogsConnectionName')]"
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook4-RecordedFutureIdentityConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "api": {
          "id": "[variables('_playbook-2-connection-3')]"
        },
        "displayName": "[variables('playbook4-RecordedFutureIdentityConnectionName')]"
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "[parameters('playbook5-PlaybookName')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('playbook5-AzureADConnectionName'))]",
        "[resourceId('Microsoft.Web/connections', variables('playbook5-AzureADIdentityProtectionConnectionName'))]"
      ],
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.@{variables('azureManagementUrl')}/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "method": "POST",
                "schema": {
                  "properties": {
                    "active_directory_domain": {
                      "type": "string"
                    },
                    "risky_user_email": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "actions": {
            "Check_if_AD_Identity_Protection_risky_users_list_contains_the_user": {
              "runAfter": {
                "Response_-_Risky_user_was_not_found_in_Active_Directory": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azureadip']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/beta/riskyUsers/@{encodeURIComponent(body('Get_User_-_Check_if_the_user_exists_in_Active_Directory')?['id'])}"
              }
            },
            "Confirm_the_user_is_indeed_compromised": {
              "runAfter": {
                "Check_if_AD_Identity_Protection_risky_users_list_contains_the_user": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "userIds": [
                    "@body('Check_if_AD_Identity_Protection_risky_users_list_contains_the_user')?['id']"
                  ]
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azureadip']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/beta/riskyUsers/confirmCompromised"
              }
            },
            "Get_User_-_Check_if_the_user_exists_in_Active_Directory": {
              "runAfter": {
                "If_Active_Directory_domain_parameter_is_not_null_and_not_empty": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuread']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/v1.0/users/@{encodeURIComponent(variables('user_principal_name'))}"
              }
            },
            "If_Active_Directory_domain_parameter_is_not_null_and_not_empty": {
              "actions": {
                "Set_Active_Directory_user_principal_name_to_user_email's_username_+_AD_domain": {
                  "type": "SetVariable",
                  "inputs": {
                    "name": "user_principal_name",
                    "value": "@{concat(split(triggerBody()?['risky_user_email'], '@')[0], '@', triggerBody()?['active_directory_domain'])}"
                  }
                }
              },
              "runAfter": {
                "Initialize_-_Active_Directory_user_principal_name": [
                  "Succeeded"
                ]
              },
              "else": {
                "actions": {
                  "Set_Active_Directory_user_principal_name_to_user's_email": {
                    "type": "SetVariable",
                    "inputs": {
                      "name": "user_principal_name",
                      "value": "@triggerBody()?['risky_user_email']"
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "not": {
                      "equals": [
                        "@triggerBody()?['active_directory_domain']",
                        "@null"
                      ]
                    }
                  },
                  {
                    "not": {
                      "equals": [
                        "@triggerBody()?['active_directory_domain']",
                        "5"
                      ]
                    }
                  }
                ]
              },
              "type": "If"
            },
            "Initialize_-_Active_Directory_user_principal_name": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "user_principal_name",
                    "type": "string"
                  }
                ]
              }
            },
            "Response_-_Failed_to_confirm_user_at_risk_is_compromised": {
              "runAfter": {
                "Response_-_Successfully_confirmed_user_at_risk_is_indeed_compromised": [
                  "Skipped"
                ]
              },
              "type": "Response",
              "kind": "Http",
              "inputs": {
                "body": {
                  "data": {
                    "active_directory_identity_protection_results_for_risky_user": "@body('Check_if_AD_Identity_Protection_risky_users_list_contains_the_user')",
                    "parameters_passed": {
                      "active_directory_domain": "@triggerBody()?['active_directory_domain']",
                      "risky_user_email": "@triggerBody()?['risky_user_email']"
                    },
                    "user_id_in_active_directory": "@body('Get_User_-_Check_if_the_user_exists_in_Active_Directory')?['id']",
                    "user_principal_name": "@variables('user_principal_name')"
                  },
                  "reason": "Failed to confirm user at risk is compromised. Maybe the user was not present in Active Directory Identity Protection risky users list.",
                  "status": "Error"
                },
                "headers": {
                  "Content-Type": "application/json"
                },
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "active_directory_identity_protection_results_for_risky_user": {
                          "type": "object"
                        },
                        "parameters_passed": {
                          "properties": {
                            "active_directory_domain": {
                              "type": "string"
                            },
                            "risky_user_email": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "user_id_in_active_directory": {
                          "type": "string"
                        },
                        "user_principal_name": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "reason": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "statusCode": 422
              }
            },
            "Response_-_Risky_user_was_not_found_in_Active_Directory": {
              "runAfter": {
                "Get_User_-_Check_if_the_user_exists_in_Active_Directory": [
                  "Succeeded"
                ]
              },
              "type": "Response",
              "kind": "Http",
              "inputs": {
                "body": {
                  "data": {
                    "parameters_passed": {
                      "active_directory_domain": "@triggerBody()?['active_directory_domain']",
                      "risky_user_email": "@triggerBody()?['risky_user_email']"
                    },
                    "user_principal_name": "@variables('user_principal_name')"
                  },
                  "reason": "Risky user was not found in Active Directory.",
                  "status": "Error"
                },
                "headers": {
                  "Content-Type": "application/json"
                },
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "parameters_passed": {
                          "properties": {
                            "active_directory_domain": {
                              "type": "string"
                            },
                            "risky_user_email": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "user_principal_name": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "reason": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "statusCode": 404
              }
            },
            "Response_-_Successfully_confirmed_user_at_risk_is_indeed_compromised": {
              "runAfter": {
                "Confirm_the_user_is_indeed_compromised": [
                  "Succeeded"
                ]
              },
              "type": "Response",
              "kind": "Http",
              "inputs": {
                "body": {
                  "data": {
                    "active_directory_identity_protection_results_for_risky_user": "@body('Check_if_AD_Identity_Protection_risky_users_list_contains_the_user')",
                    "parameters_passed": {
                      "active_directory_domain": "@triggerBody()?['active_directory_domain']",
                      "risky_user_email": "@triggerBody()?['risky_user_email']"
                    },
                    "user_id_in_active_directory": "@body('Get_User_-_Check_if_the_user_exists_in_Active_Directory')?['id']",
                    "user_principal_name": "@variables('user_principal_name')"
                  },
                  "status": "Confirmed user at risk is indeed compromised."
                },
                "headers": {
                  "Content-Type": "application/json"
                },
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "active_directory_identity_protection_results_for_risky_user": {
                          "type": "object"
                        },
                        "parameters_passed": {
                          "properties": {
                            "active_directory_domain": {
                              "type": "string"
                            },
                            "risky_user_email": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "user_id_in_active_directory": {
                          "type": "string"
                        },
                        "user_principal_name": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "statusCode": 200
              }
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "azuread": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook5-AzureADConnectionName'))]",
                "connectionName": "[variables('playbook5-AzureADConnectionName')]",
                "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',parameters('workspace-location'),'/managedApis/azuread')]"
              },
              "azureadip": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook5-AzureADIdentityProtectionConnectionName'))]",
                "connectionName": "[variables('playbook5-AzureADIdentityProtectionConnectionName')]",
                "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',parameters('workspace-location'),'/managedApis/azureadip')]"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook5-AzureADConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "api": {
          "id": "[variables('_playbook-1-connection-2')]"
        },
        "displayName": "[variables('playbook5-AzureADConnectionName')]"
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook5-AzureADIdentityProtectionConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "api": {
          "id": "[variables('_playbook-5-connection-3')]"
        },
        "displayName": "[variables('playbook5-AzureADIdentityProtectionConnectionName')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2021-03-01-preview",
      "properties": {
        "version": "1.0.0",
        "kind": "Solution",
        "contentId": "[variables('_sourceId')]",
        "parentId": "[variables('_sourceId')]",
        "source": {
          "kind": "Solution",
          "name": "Recorded Future Identuty",
          "sourceId": "[variables('_sourceId')]"
        },
        "author": {
          "name": "Recorded Future Premier Integrations",
          "email": "support@recordedfuture.com"
        },
        "support": {
          "name": "Recorded Future Support Team",
          "email": "support@recordedfuture.com",
          "tier": "Partner",
          "link": "http://support.recordedfuture.com/"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "Playbook",
              "contentId": "[variables('_playbook1-Playbooks')]",
              "version": "1.0.0"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_playbook2-Playbooks')]",
              "version": "1.0.0"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_playbook3-Playbooks')]",
              "version": "1.0.0"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_playbook4-Playbooks')]",
              "version": "1.0.0"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_playbook5-Playbooks')]",
              "version": "1.0.0"
            }
          ]
        },
        "firstPublishDate": "2022-17-05",
        "providers": [
          "Recorded Future"
        ],
        "categories": {
          "domains": [
            "Security - Threat Intelligence"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_sourceId'))]"
    }
  ],
  "outputs": {}
}
