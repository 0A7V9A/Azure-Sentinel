{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "Julian Wang - julian.wang@forescout.com",
    "comments": "Solution template for ForescoutHostPropertyMonitor"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    },
    "analytic1-id": {
      "type": "string",
      "defaultValue": "[newGuid()]",
      "minLength": 1,
      "metadata": {
        "description": "Unique id for the scheduled alert rule"
      }
    },
    "playbook1-PlaybookName": {
      "defaultValue": "Forescout-DNS_Sniff_Event_Playbook",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Resource name for the logic app playbook.  No spaces are allowed"
      }
    }
  },
  "variables": {
    "ForeScout-DNSSniffEventMonitor_AnalyticalRules": "ForeScout-DNSSniffEventMonitor_AnalyticalRules",
    "_ForeScout-DNSSniffEventMonitor_AnalyticalRules": "[variables('ForeScout-DNSSniffEventMonitor_AnalyticalRules')]",
    "playbook1-Playbooks": "playbook1-Playbooks",
    "_playbook1-Playbooks": "[variables('playbook1-Playbooks')]",
    "playbook1-MicrosoftSentinelConnectionName": "[concat('MicrosoftSentinel-', parameters('playbook1-PlaybookName'))]",
    "playbook-1-connection-2": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Azuresentinel')]",
    "_playbook-1-connection-2": "[variables('playbook-1-connection-2')]",
    "sourceId": "azuresentinel.azure-sentinel-solution-forescout-host-property-monitor",
    "_sourceId": "[variables('sourceId')]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',parameters('analytic1-id'))]",
      "apiVersion": "2021-03-01-preview",
      "kind": "Scheduled",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "description": "This rule creates an incident when more than certain number of Dnsniff events are generated from a host",
        "displayName": "Forescout-DNS_Sniff_Event_Monitor",
        "enabled": false,
        "query": "ForescoutHostProperties_CL | where HostProperties_DnsniffEvent_s matches regex \"DNS Query Type:.A;DNS Query/Response:.Query\" | extend ipaddress = iif(isnotempty(HostProperties_Ipv4Addr_s), HostProperties_Ipv4Addr_s, (iif(isnotempty(HostProperties_Ipv6Addr_s), HostProperties_Ipv6Addr_s, HostProperties_IpAddr_s))) | summarize NumEvents_d =count() by ipaddress, HostProperties_DnsniffEvent_s, HostProperties_EmIpAddr_s | where NumEvents_d > 5 | where isnotempty(ipaddress) and isnotempty(HostProperties_EmIpAddr_s) | sort by NumEvents_d asc | project NumEvents_d, ipaddress, HostProperties_EmIpAddr_s",
        "queryFrequency": "PT5M",
        "queryPeriod": "PT5M",
        "severity": "Medium",
        "suppressionDuration": "PT1H",
        "suppressionEnabled": false,
        "triggerOperator": "GreaterThan",
        "triggerThreshold": 0,
        "customDetails": {
          "Ip": "ipaddress",
          "EmIp": "HostProperties_EmIpAddr_s",
          "NumEvents": "NumEvents_d"
        },
        "alertDetailsOverride": {
          "alertDisplayNameFormat": "Dnsniff-Address-Check",
          "alertDescriptionFormat": "Dnsniff-Address-Check alert"
        }
      }
    },
    {
      "properties": {
        "provisioningState": "Succeeded",
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.@{variables('azureManagementUrl')}/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "type": "Object"
            }
          },
          "triggers": {
            "Microsoft_Sentinel_incident": {
              "type": "ApiConnectionWebhook",
              "inputs": {
                "body": {
                  "callback_url": "@{listCallbackUrl()}"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                  }
                },
                "path": "/incident-creation"
              }
            }
          },
          "actions": {
            "For_each": {
              "foreach": "@triggerBody()?['object']?['properties']?['Alerts']",
              "actions": {
                "Condition": {
                  "actions": {
                    "Set_variable_4": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "Disposition",
                        "value": "\"31\""
                      }
                    },
                    "Set_variable_6": {
                      "runAfter": {
                        "Set_variable_4": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "Action_group",
                        "value": "\"restrict\""
                      }
                    }
                  },
                  "runAfter": {
                    "For_each_5": [
                      "Succeeded"
                    ]
                  },
                  "else": {
                    "actions": {
                      "Set_variable_5": {
                        "type": "SetVariable",
                        "inputs": {
                          "name": "Disposition",
                          "value": "\"31\""
                        }
                      },
                      "Set_variable_7": {
                        "runAfter": {
                          "Set_variable_5": [
                            "Succeeded"
                          ]
                        },
                        "type": "SetVariable",
                        "inputs": {
                          "name": "Action_group",
                          "value": "\"restrict\""
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "greaterOrEquals": [
                          "@variables('CurNumEventVar')",
                          5
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "For_each_5": {
                  "foreach": "@variables('NumEventsVar')",
                  "actions": {
                    "Set_variable": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "CurNumEventVar",
                        "value": "@int(items('For_each_5'))"
                      }
                    }
                  },
                  "runAfter": {
                    "Set_variable_2": [
                      "Succeeded"
                    ]
                  },
                  "type": "Foreach"
                },
                "Parse_JSON": {
                  "type": "ParseJson",
                  "inputs": {
                    "content": "@items('For_each')?['properties']?['additionalData']?['Custom Details']",
                    "schema": {
                      "properties": {
                        "EmIp": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "Ip": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "NumEvents": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  }
                },
                "Set_variable_2": {
                  "runAfter": {
                    "Set_variable_8": [
                      "Succeeded"
                    ]
                  },
                  "type": "SetVariable",
                  "inputs": {
                    "name": "NumEventsVar",
                    "value": "@body('Parse_JSON')?['NumEvents']"
                  }
                },
                "Set_variable_3": {
                  "runAfter": {
                    "Parse_JSON": [
                      "Succeeded"
                    ]
                  },
                  "type": "SetVariable",
                  "inputs": {
                    "name": "HostIpVar",
                    "value": "@body('Parse_JSON')?['Ip']"
                  }
                },
                "Set_variable_8": {
                  "runAfter": {
                    "Set_variable_3": [
                      "Succeeded"
                    ]
                  },
                  "type": "SetVariable",
                  "inputs": {
                    "name": "EmIpVar",
                    "value": "@body('Parse_JSON')?['EmIp']"
                  }
                },
                "Update_incident": {
                  "runAfter": {
                    "Condition": [
                      "Succeeded"
                    ]
                  },
                  "type": "ApiConnection",
                  "inputs": {
                    "body": {
                      "description": "action_group=@{variables('Action_group')};disposition=@{variables('Disposition')};endpoint_ip=@{body('Parse_JSON')?['Ip']};em_ip=@{body('Parse_JSON')?['EmIp']};info=Generated_by_Dnsniff_event",
                      "incidentArmId": "@triggerBody()?['object']?['id']"
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                      }
                    },
                    "method": "put",
                    "path": "/Incidents"
                  }
                }
              },
              "runAfter": {
                "Initialize_variable_6": [
                  "Succeeded"
                ]
              },
              "type": "Foreach",
              "runtimeConfiguration": {
                "concurrency": {
                  "repetitions": 1
                }
              }
            },
            "Initialize_variable": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "EmIpVar",
                    "type": "array"
                  }
                ]
              }
            },
            "Initialize_variable_2": {
              "runAfter": {
                "Initialize_variable": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "HostIpVar",
                    "type": "array"
                  }
                ]
              }
            },
            "Initialize_variable_3": {
              "runAfter": {
                "Initialize_variable_2": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "NumEventsVar",
                    "type": "array"
                  }
                ]
              }
            },
            "Initialize_variable_4": {
              "runAfter": {
                "Initialize_variable_3": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "Disposition",
                    "type": "string",
                    "value": "\"10\""
                  }
                ]
              }
            },
            "Initialize_variable_5": {
              "runAfter": {
                "Initialize_variable_4": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "Action_group",
                    "type": "string",
                    "value": "\"notify\""
                  }
                ]
              }
            },
            "Initialize_variable_6": {
              "runAfter": {
                "Initialize_variable_5": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "CurNumEventVar",
                    "type": "integer",
                    "value": 0
                  }
                ]
              }
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "azuresentinel": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook1-MicrosoftSentinelConnectionName'))]",
                "connectionName": "[variables('playbook1-MicrosoftSentinelConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Azuresentinel')]",
                "connectionProperties": {
                  "authentication": {
                    "type": "ManagedServiceIdentity"
                  }
                }
              }
            }
          }
        }
      },
      "name": "[parameters('playbook1-PlaybookName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('workspace-location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "apiVersion": "2019-05-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('playbook1-MicrosoftSentinelConnectionName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook1-MicrosoftSentinelConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('playbook1-MicrosoftSentinelConnectionName')]",
        "parameterValueType": "Alternative",
        "api": {
          "id": "[variables('_playbook-1-connection-2')]"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2021-03-01-preview",
      "properties": {
        "version": "1.0.0",
        "kind": "Solution",
        "contentId": "[variables('_sourceId')]",
        "parentId": "[variables('_sourceId')]",
        "source": {
          "kind": "Solution",
          "name": "ForescoutHostPropertyMonitor",
          "sourceId": "[variables('_sourceId')]"
        },
        "author": {
          "name": "Julian Wang",
          "email": "julian.wang@forescout.com"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('_ForeScout-DNSSniffEventMonitor_AnalyticalRules')]",
              "version": "1.0.0"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_playbook1-Playbooks')]",
              "version": "1.0.0"
            }
          ]
        },
        "firstPublishDate": "2022-06-28",
        "providers": [
          "Forescout"
        ],
        "categories": {
          "domains": [
            "Security – Network"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_sourceId'))]"
    }
  ],
  "outputs": {}
}
