id: 01191239-274e-43c9-b154-3a042692af06
name: Potential DGA(Domain Generation Algorithm) detected via Repetitive Failures - Anomaly based (ASIM DNS Solution)
description: |
  'This rule makes use of series decompose anomaly method to detect clients with high NXDomain response count which could be indicative of a DGA (cycling through possible C2 domains where most C2s are not live). Alert is generated when a new IP address DNS activity is seen as an outlier after comparing with the baseline which represents repetitive pattern.\n\nThe rule utilizes [ASIM](https://aka.ms/AboutASIM) normalization and is applied to any source which supports ASIM DNS schema'
severity: Medium
status: Available 
tags:
  - Schema: ASimDns
    SchemaVersion: 0.1.6
requiredDataConnectors:
  - connectorId: ASimDnsActivityLogs
    dataTypes:
      - ASimDnsActivityLogs
  - connectorId: GCPDNSDataConnector
    dataTypes:
      - GCPCloudDNS
  - connectorId: AzureFirewall
    dataTypes:
      - AzureDiagnostics
  - connectorId: CiscoUmbrellaDataConnector
    dataTypes:
      - Cisco_Umbrella_proxy_CL
  - connectorId: Corelight
    dataTypes:
      - Corelight
  - connectorId: InfobloxNIOS
    dataTypes:
      - Syslog
  - connectorId: NXLogDnsLogs
    dataTypes:
      - NXLog_DNS_Server_CL
  - connectorId: DNS
    dataTypes:
      - DnsEvents
  - connectorId: AIVectraStream
    dataTypes:
      - VectraStream
  - connectorId: WindowsForwardedEvents
    dataTypes:
      - WindowsEvents
  - connectorId: Zscaler
    dataTypes:
      - CommonSecurityLog
  - connectorId: ISCBind
    dataTypes:
      - Syslog
queryFrequency: 1d
queryPeriod: 14d
triggerOperator: gt
triggerThreshold: 0
tactics:
  - CommandAndControl
relevantTechniques:
  - T1568
  - T1008
query: |
  let threshold = materialize (_GetWatchlist('DNS_Solution_Monitoring_Configuration')
    | where wl_RuleName == 'Anomaly - Potential DGA(Domain Generation Algorithm) detected'
        and wl_Type == 'Detection'
    | project todouble(wl_AnomalyThreshold));
  let min_t = ago(14d);
  let max_t = now();
  let timeframe = 1d;
  // calculate avg. eps(events per second)
  let eps = materialize (_Im_Dns
    | project TimeGenerated
    | where TimeGenerated > ago(5m)
    | count
    | extend Count = Count / 300);
  let maxSummarizedTime = toscalar (
    union isfuzzy=true 
        (
        DNS_Summarized_Logs_ip_CL 
        | where EventTime_t >= min_t
        | summarize max_TimeGenerated=max(EventTime_t)
        | extend max_TimeGenerated = datetime_add('hour', 1, max_TimeGenerated)
        ),
        (
        print(min_t)
        | project max_TimeGenerated = print_0
        )
    | summarize maxTimeGenerated = max(max_TimeGenerated) 
    );
  let summarizationexist = materialize(
    union isfuzzy=true 
        (
        DNS_Summarized_Logs_ip_CL
        | where EventTime_t > ago(1d) 
        | project v = int(2)
        ),
        (
        print int(1) 
        | project v = print_0
        )
    | summarize maxv = max(v)
    | extend sumexist = (maxv > 1)
    );
  let allData = union isfuzzy=true
        (
        (datatable(exists: int, sumexist: bool)[1, false]
        | where toscalar(eps) > 1000
        | join (summarizationexist) on sumexist)
        | join (
            _Im_Dns(responsecodename='NXDOMAIN', starttime=todatetime(ago(2d)), endtime=now())
            | where TimeGenerated > maxSummarizedTime
            | summarize Count=count() by SrcIpAddr, DnsQuery, bin(TimeGenerated, 1h)
            | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)
            )
            on exists
        | project-away exists, maxv, sum*
        ),
        (
        (datatable(exists: int, sumexist: bool)[1, false]
        | where toscalar(eps) between (501 .. 1000)
        | join (summarizationexist) on sumexist)
        | join (
            _Im_Dns(responsecodename='NXDOMAIN', starttime=todatetime(ago(3d)), endtime=now())
            | where TimeGenerated > maxSummarizedTime
            | summarize Count=count() by SrcIpAddr, DnsQuery, bin(TimeGenerated, 1h)
            | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)
            )
            on exists
        | project-away exists, maxv, sum*
        ),
        (
        (datatable(exists: int, sumexist: bool)[1, false]
        | where toscalar(eps) <= 500
        | join (summarizationexist) on sumexist)
        | join (
            _Im_Dns(responsecodename='NXDOMAIN', starttime=todatetime(ago(4d)), endtime=now())
            | where TimeGenerated > maxSummarizedTime
            | summarize Count=count() by SrcIpAddr, DnsQuery, bin(TimeGenerated, 1h)
            | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)
            )
            on exists
        | project-away exists, maxv, sum*
        ),
        (
        DNS_Summarized_Logs_ip_CL
        | where EventTime_t > min_t and EventResultDetails_s == 'NXDOMAIN'
        | project-rename
            SrcIpAddr=SrcIpAddr_s,
            DnsQuery=DnsQuery_s,
            Count=count__d,
            EventTime=EventTime_t
        | extend Count = toint(Count)
        );
  allData
  | make-series QueryCount=dcount(DnsQuery) on EventTime from min_t to max_t step timeframe by SrcIpAddr
  // include calculated Anomalies, Score and Baseline
  | extend (anomalies, score, baseline) = series_decompose_anomalies(QueryCount, toscalar(threshold), -1, 'linefit')
  | mv-expand anomalies, score, baseline, EventTime, QueryCount
  | extend
    anomalies = toint(anomalies),
    score = toint(score),
    baseline = toint(baseline),
    EventTime = todatetime(EventTime),
    Total = tolong(QueryCount)
  | where EventTime >= ago(timeframe)
  | where score >= (toscalar(threshold) * 2)
  // Join the allData to include DnsQuery details
  | join kind=inner(allData
    | where TimeGenerated >= ago(timeframe)
    | summarize DNSQueries = make_set(DnsQuery, 1000) by SrcIpAddr)
    on SrcIpAddr
  | project-away SrcIpAddr1
entityMappings:
  - entityType: IP
    fieldMappings:
      - identifier: Address
        columnName: SrcIpAddr
eventGroupingSettings:
  aggregationKind: AlertPerResult
customDetails:
  DNSQueries: DNSQueries
  AnomalyScore: score
  baseline: baseline
  Total: Total
alertDetailsOverride:
  alertDisplayNameFormat: "[Anomaly] Potential DGA (Domain Generation Algorithm) originating from Client IP: '{{SrcIpAddr}}' has been detected."
  alertDescriptionFormat: "Client source has been identified with high NXDomain count which could be indicative of a DGA (cycling through possible C2 domains where most C2s are not live). This Client is found to be communicating with multiple Domains which do not exist.\n\nBaseline Domain or DnsQuery count from this client: '{{baseline}}'\n\nCurrent Domain or DnsQuery count from this client: '{{Total}}'\n\nDNSQueries requested by this client inlcude: '{{DNSQueries}}'"
version: 1.0.0
kind: Scheduled