{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "slashnext",
    "comments": "Solution template for SlashNext"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    },
    "playbook1-PlaybookName": {
      "defaultValue": "SlashNextWebAccessLogAssessment",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Resource name for the logic app playbook.  No spaces are allowed"
      }
    },
    "playbook1-Subscription Id": {
      "defaultValue": "",
      "type": "string",
      "minLength": 1
    },
    "playbook1-Workspace Id": {
      "defaultValue": "",
      "type": "string",
      "minLength": 1
    },
    "playbook1-Resource Group": {
      "defaultValue": "",
      "type": "string",
      "minLength": 1
    },
    "playbook1-Workspace Name": {
      "defaultValue": "",
      "type": "string",
      "minLength": 1
    },
    "playbook2-PlaybookName": {
      "defaultValue": "SlashNextPhishingIncidentInvestigation",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Resource name for the logic app playbook.  No spaces are allowed"
      }
    }
  },
  "variables": {
    "solutionId": "azuresentinelslashnext.azure-sentinel-solution-slashnext",
    "_solutionId": "[variables('solutionId')]",
    "SlashNextWebAccessLogAssessment": "SlashNextWebAccessLogAssessment",
    "_SlashNextWebAccessLogAssessment": "[variables('SlashNextWebAccessLogAssessment')]",
    "playbook1-slashnext_connection_name": "[concat('slashnext-connection-', parameters('playbook1-PlaybookName'))]",
    "playbook1-customApis_slashnext_name": "SlashNext",
    "playbook1-parent_suffix": "[substring(toLower(uniqueString(resourceGroup().id, resourceGroup().location)),0,5)]",
    "playbook1-azureFunction": "[concat('slashnext-azure-function-',variables('parent_suffix'))]",
    "SlashNextPhishingIncidentInvestigation": "SlashNextPhishingIncidentInvestigation",
    "_SlashNextPhishingIncidentInvestigation": "[variables('SlashNextPhishingIncidentInvestigation')]",
    "playbook2-slashnext_connection_name": "[concat('slashnext-connection-', parameters('playbook2-PlaybookName'))]",
    "playbook2-MicrosoftSentinelConnectionName": "[concat('sentinel-connection-', parameters('playbook2-PlaybookName'))]",
    "playbook2-customApis_slashnext_name": "SlashNext"
  },
  "resources": [
    {
      "name": "SlashNext_azure_LinkedTemplate",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "variables": {
            "suffix": "[substring(toLower(uniqueString(resourceGroup().id, variables('workspace-location-inline'))),0,5)]",
            "funcAppName": "[concat('slashnext-azure-function-',variables('suffix'))]",
            "funcStorageName": "[concat('slashnextstorage', variables('suffix'))]",
            "serverFarmName": "[concat('slashnextfarm', variables('suffix'))]",
            "repoURL": "https://github.com/slashnext/processlogs",
            "srcControlsName": "web",
            "GitHubBranch": "master"
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2018-11-01",
              "name": "[variables('funcAppName')]",
              "location": "[variables('workspace-location-inline')]",
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms',variables('serverFarmName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('funcStorageName'))]"
              ],
              "kind": "functionapp,linux",
              "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('serverFarmName'))]",
                "siteConfig": {
                  "alwaysOn": true,
                  "appSettings": [
                    {
                      "name": "AzureWebJobsDashboard",
                      "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('funcStorageName'), ';AccountKey=', listKeys(variables('funcStorageName'),'2019-06-01').keys[0].value,';EndpointSuffix=core.windows.net')]"
                    },
                    {
                      "name": "AzureWebJobsStorage",
                      "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('funcStorageName'), ';AccountKey=', listKeys(variables('funcStorageName'),'2019-06-01').keys[0].value,';EndpointSuffix=core.windows.net')]"
                    },
                    {
                      "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                      "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('funcStorageName'), ';AccountKey=', listKeys(variables('funcStorageName'),'2019-06-01').keys[0].value,';EndpointSuffix=core.windows.net')]"
                    },
                    {
                      "name": "FUNCTIONS_EXTENSION_VERSION",
                      "value": "~2"
                    },
                    {
                      "name": "FUNCTIONS_WORKER_RUNTIME",
                      "value": "python"
                    }
                  ],
                  "linuxFxVersion": "python|3.6"
                }
              },
              "resources": [
                {
                  "type": "sourcecontrols",
                  "apiVersion": "2018-11-01",
                  "name": "[variables('srcControlsName')]",
                  "dependsOn": [
                    "[resourceId('Microsoft.Web/sites/', variables('funcAppName'))]"
                  ],
                  "properties": {
                    "RepoUrl": "[variables('repoURL')]",
                    "branch": "[variables('GitHubBranch')]",
                    "IsManualIntegration": true
                  }
                }
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2018-07-01",
              "name": "[variables('funcStorageName')]",
              "location": "[variables('workspace-location-inline')]",
              "tags": {
                "displayName": "funStorageName"
              },
              "sku": {
                "name": "Standard_LRS"
              },
              "kind": "StorageV2"
            },
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2018-02-01",
              "name": "[variables('serverFarmName')]",
              "location": "[variables('workspace-location-inline')]",
              "sku": {
                "name": "S1",
                "tier": "Standard"
              },
              "kind": "elastic",
              "properties": {
                "kind": "functionapp",
                "name": "[variables('serverFarmName')]",
                "computeMode": "Dynamic",
                "reserved": true
              }
            }
          ]
        }
      }
    },
    {
      "name": "[variables('slashnext_connection_name')]",
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "location": "[variables('workspace-location-inline')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('slashnext_connection_name')]",
        "api": {
          "id": "[variables('_connection-2')]"
        }
      }
    },
    {
      "properties": {
        "state": "Disabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "type": "Object"
            }
          },
          "triggers": {
            "Recurrence": {
              "recurrence": {
                "frequency": "Minute",
                "interval": 5
              },
              "evaluatedRecurrence": {
                "frequency": "Minute",
                "interval": 5
              },
              "type": "Recurrence"
            }
          },
          "actions": {
            "Current_time": {
              "type": "Expression",
              "kind": "CurrentTime"
            },
            "Get_past_time": {
              "runAfter": {
                "Current_time": [
                  "Succeeded"
                ]
              },
              "type": "Expression",
              "kind": "GetPastTime",
              "inputs": {
                "interval": 5,
                "timeUnit": "Minute"
              }
            },
            "Incident_Id": {
              "runAfter": {
                "Malicious_urls": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "IncidentId",
                    "type": "string",
                    "value": "''"
                  }
                ]
              }
            },
            "Log_Query_API": {
              "runAfter": {
                "Incident_Id": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "Query API",
                    "type": "string",
                    "value": "https://api.loganalytics.io/v1/workspaces/@{variables('workspace_id')}/query"
                  }
                ]
              }
            },
            "Malicious_urls": {
              "runAfter": {
                "Workspace_Name": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "malicious_urls",
                    "type": "array"
                  }
                ]
              }
            },
            "Parse_JSON": {
              "runAfter": {
                "Query_for_table_names": [
                  "Succeeded"
                ]
              },
              "type": "ParseJson",
              "inputs": {
                "content": "@body('Query_for_table_names')",
                "schema": {
                  "properties": {
                    "tables": {
                      "items": {
                        "properties": {
                          "columns": {
                            "items": {
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "name",
                                "type"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "name": {
                            "type": "string"
                          },
                          "rows": {
                            "items": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "name",
                          "columns",
                          "rows"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "Query_for_table_names": {
              "runAfter": {
                "Log_Query_API": [
                  "Succeeded"
                ]
              },
              "type": "Http",
              "inputs": {
                "authentication": {
                  "audience": "https://api.loganalytics.io",
                  "type": "ManagedServiceIdentity"
                },
                "body": {
                  "query": "search * | where TimeGenerated > ago(2h)|distinct $table"
                },
                "method": "POST",
                "uri": "@variables('Query API')"
              }
            },
            "Resource_Group": {
              "runAfter": {
                "Workspace_Id": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "resource_group",
                    "type": "string",
                    "value": "[parameters('Resource Group')]"
                  }
                ]
              }
            },
            "Subscription_Id": {
              "runAfter": {
                "Get_past_time": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "subscription_id",
                    "type": "string",
                    "value": "[parameters('subscription Id')]"
                  }
                ]
              }
            },
            "Traverse_Table_Names": {
              "foreach": "@body('Parse_JSON')?['tables']",
              "actions": {
                "For_each": {
                  "foreach": "@items('Traverse_Table_Names')?['rows']",
                  "actions": {
                    "Fetch_Data_from_Each_Table_": {
                      "foreach": "@body('Parse_Table_Names')",
                      "actions": {
                        "Ignore_Tables": {
                          "actions": {
                            "Clear_Incident_Id_for_Next_Table": {
                              "runAfter": {
                                "Traverse_Split_Lists": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "IncidentId",
                                "value": "''"
                              }
                            },
                            "Extract_List_of_URLs": {
                              "runAfter": {
                                "Query_data_from_each_table": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Function",
                              "inputs": {
                                "body": "@body('Query_data_from_each_table')",
                                "function": {
                                  "id": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/', resourceGroup().name,'/providers/Microsoft.Web/sites/',variables('azureFunction'),'/functions/processlogs')]"
                                },
                                "queries": {
                                  "label": "extract"
                                },
                                "retryPolicy": {
                                  "type": "none"
                                }
                              }
                            },
                            "Query_data_from_each_table": {
                              "type": "Http",
                              "inputs": {
                                "authentication": {
                                  "audience": "https://api.loganalytics.io",
                                  "type": "ManagedServiceIdentity"
                                },
                                "body": {
                                  "query": "@{items('Fetch_Data_from_Each_Table_')} |where ingestion_time() >= todatetime(format_datetime(datetime(@{body('Get_past_time')}),'yyyy-MM-dd HH:mm')) and ingestion_time() <todatetime(format_datetime(datetime(@{body('Current_time')}),'yyyy-MM-dd HH:mm')) "
                                },
                                "method": "POST",
                                "uri": "@variables('Query API')"
                              }
                            },
                            "Split_List_of_URLs": {
                              "runAfter": {
                                "Extract_List_of_URLs": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('Extract_List_of_URLs')",
                                "schema": {
                                  "items": {
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "type": "array"
                                }
                              }
                            },
                            "Traverse_Split_Lists": {
                              "foreach": "@body('Split_List_of_URLs')",
                              "actions": {
                                "Empty_List_Check": {
                                  "actions": {
                                    "Clear_Malicious_URLs_List": {
                                      "runAfter": {
                                        "Incident_Creating_Loop": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "malicious_urls"
                                      }
                                    },
                                    "Generate_URL_Mapping": {
                                      "type": "Function",
                                      "inputs": {
                                        "body": "@variables('malicious_urls')",
                                        "function": {
                                          "id": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/', resourceGroup().name,'/providers/Microsoft.Web/sites/',variables('azureFunction'),'/functions/processlogs')]"
                                        },
                                        "queries": {
                                          "label": "mapping"
                                        }
                                      }
                                    },
                                    "Incident_Creating_Loop": {
                                      "foreach": "@body('Parse_Mapping_Repsonse')",
                                      "actions": {
                                        "Incident_Already_Exists": {
                                          "actions": {
                                            "Add_Comment_in_Existing_Incident": {
                                              "type": "Http",
                                              "inputs": {
                                                "authentication": {
                                                  "audience": "https://management.azure.com",
                                                  "type": "ManagedServiceIdentity"
                                                },
                                                "body": {
                                                  "properties": {
                                                    "message": "Event spotted again in @{items('Fetch_Data_from_Each_Table_')} at @{body('Current_time')}"
                                                  }
                                                },
                                                "method": "PUT",
                                                "uri": "https://management.azure.com/subscriptions/@{variables('subscription_id')}/resourceGroups/@{variables('resource_group')}/providers/Microsoft.OperationalInsights/workspaces/@{variables('workspace_name')}/providers/Microsoft.SecurityInsights/incidents/@{items('Incident_Creating_Loop')['hash']}/comments/@{guid()}?api-version=2021-10-01\n"
                                              }
                                            }
                                          },
                                          "runAfter": {
                                            "Insert_Incident": [
                                              "Succeeded",
                                              "Failed"
                                            ]
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "equals": [
                                                  "@outputs('Insert_Incident')['statusCode']",
                                                  409
                                                ]
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        },
                                        "Insert_Incident": {
                                          "runAfter": {
                                            "Parse_URL_Mapping": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "Http",
                                          "inputs": {
                                            "authentication": {
                                              "audience": "https://management.azure.com",
                                              "type": "ManagedServiceIdentity"
                                            },
                                            "body": {
                                              "etag": "@{guid()}",
                                              "properties": {
                                                "description": "@{items('Fetch_Data_from_Each_Table_')} table contains malicious url @{body('Parse_URL_Mapping')?['url']}",
                                                "severity": "High",
                                                "status": "New",
                                                "title": "Malicious Incident"
                                              }
                                            },
                                            "method": "PUT",
                                            "uri": "https://management.azure.com/subscriptions/@{variables('subscription_id')}/resourceGroups/@{variables('resource_group')}/providers/Microsoft.OperationalInsights/workspaces/@{variables('workspace_name')}/providers/Microsoft.SecurityInsights/incidents/@{body('Parse_URL_Mapping')?['hash']}?api-version=2021-10-01-preview"
                                          }
                                        },
                                        "Parse_URL_Mapping": {
                                          "type": "ParseJson",
                                          "inputs": {
                                            "content": "@items('Incident_Creating_Loop')",
                                            "schema": {
                                              "properties": {
                                                "hash": {
                                                  "type": "string"
                                                },
                                                "url": {
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          }
                                        }
                                      },
                                      "runAfter": {
                                        "Parse_Mapping_Repsonse": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "Foreach"
                                    },
                                    "Parse_Mapping_Repsonse": {
                                      "runAfter": {
                                        "Generate_URL_Mapping": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "ParseJson",
                                      "inputs": {
                                        "content": "@body('Generate_URL_Mapping')",
                                        "schema": {
                                          "items": {
                                            "properties": {
                                              "hash": {
                                                "type": "string"
                                              },
                                              "url": {
                                                "type": "string"
                                              }
                                            },
                                            "required": [
                                              "hash",
                                              "url"
                                            ],
                                            "type": "object"
                                          },
                                          "type": "array"
                                        }
                                      }
                                    }
                                  },
                                  "runAfter": {
                                    "Traverse_List_of_Malicious_URLs": [
                                      "Succeeded"
                                    ]
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "greaterOrEquals": [
                                          "@length(variables('malicious_urls'))",
                                          1
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                },
                                "Parse_List_of_URLs": {
                                  "type": "ParseJson",
                                  "inputs": {
                                    "content": "@items('Traverse_Split_Lists')",
                                    "schema": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  }
                                },
                                "Repute": {
                                  "runAfter": {
                                    "Parse_List_of_URLs": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "ApiConnection",
                                  "inputs": {
                                    "body": {
                                      "urls": "@body('Parse_List_of_URLs')"
                                    },
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['SlashNext']['connectionId']"
                                      }
                                    },
                                    "method": "post",
                                    "path": "/api/v1/urls/repute"
                                  }
                                },
                                "Traverse_List_of_Malicious_URLs": {
                                  "foreach": "@body('Repute')?['malicious_urls_details']",
                                  "actions": {
                                    "Add_Malicious_URL": {
                                      "runAfter": {
                                        "Parse_Malicious_URL_Details": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "AppendToArrayVariable",
                                      "inputs": {
                                        "name": "malicious_urls",
                                        "value": "@body('Parse_Malicious_URL_Details')?['scanned_url']"
                                      }
                                    },
                                    "Parse_Malicious_URL_Details": {
                                      "type": "ParseJson",
                                      "inputs": {
                                        "content": "@items('Traverse_List_of_Malicious_URLs')",
                                        "schema": {
                                          "properties": {
                                            "active": {
                                              "type": "string"
                                            },
                                            "associated_urls": {
                                              "type": "array"
                                            },
                                            "match_type": {
                                              "type": "string"
                                            },
                                            "scanned_url": {
                                              "type": "string"
                                            },
                                            "scanned_url_type": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      }
                                    }
                                  },
                                  "runAfter": {
                                    "Repute": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "Foreach"
                                }
                              },
                              "runAfter": {
                                "Split_List_of_URLs": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Foreach"
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@items('Fetch_Data_from_Each_Table_')",
                                    "SecurityIncident"
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {
                        "Parse_Table_Names": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "Parse_Table_Names": {
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@items('For_each')",
                        "schema": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      }
                    }
                  },
                  "type": "Foreach"
                }
              },
              "runAfter": {
                "Parse_JSON": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "Workspace_Id": {
              "runAfter": {
                "Subscription_Id": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "workspace_id",
                    "type": "string",
                    "value": "[parameters('Workspace Id')]"
                  }
                ]
              }
            },
            "Workspace_Name": {
              "runAfter": {
                "Resource_Group": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "workspace_name",
                    "type": "string",
                    "value": "[parameters('Workspace Name')]"
                  }
                ]
              }
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "SlashNext": {
                "connectionId": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Web/connections/',variables('slashnext_connection_name'))]",
                "connectionName": "[variables('slashnext_connection_name')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', 'SlashNext')]"
              }
            }
          }
        }
      },
      "name": "[parameters('PlaybookName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[variables('workspace-location-inline')]",
      "tags": {
        "hidden-SentinelTemplateName": "SlashnextProcessLogs",
        "hidden-SentinelTemplateVersion": "1.0"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "apiVersion": "2017-07-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('slashnext_connection_name'))]",
        "[resourceId('Microsoft.Resources/deployments', 'SlashNext_azure_LinkedTemplate')]"
      ]
    },
    {
      "properties": {
        "provisioningState": "Succeeded",
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "type": "Object"
            }
          },
          "triggers": {
            "Microsoft_Sentinel_incident": {
              "type": "ApiConnectionWebhook",
              "inputs": {
                "body": {
                  "callback_url": "@{listCallbackUrl()}"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                  }
                },
                "path": "/incident-creation"
              }
            }
          },
          "actions": {
            "Add_comment_to_incident": {
              "runAfter": {
                "Sentinel_Comment_Condition": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "incidentArmId": "@triggerBody()?['object']?['id']",
                  "message": "<p>@{variables('message')}</p>"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/Incidents/Comment"
              }
            },
            "Entities_-_Get_URLs": {
              "type": "ApiConnection",
              "inputs": {
                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/entities/url"
              }
            },
            "For_each": {
              "foreach": "@body('Entities_-_Get_URLs')?['URLs']",
              "actions": {
                "Condition": {
                  "actions": {
                    "Append_Malicious_URL": {
                      "type": "AppendToArrayVariable",
                      "inputs": {
                        "name": "malicious_urls",
                        "value": "@items('For_each')?['Url']"
                      }
                    }
                  },
                  "runAfter": {
                    "Repute": [
                      "Succeeded"
                    ]
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@body('Repute')?['total_malicious_urls']",
                          1
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "Repute": {
                  "type": "ApiConnection",
                  "inputs": {
                    "body": {
                      "urls": [
                        "@items('For_each')?['Url']"
                      ]
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['SlashNext']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "/api/v1/urls/repute"
                  }
                }
              },
              "runAfter": {
                "Message": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "Malicious_URLs": {
              "runAfter": {
                "Entities_-_Get_URLs": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "malicious_urls",
                    "type": "array"
                  }
                ]
              }
            },
            "Message": {
              "runAfter": {
                "Malicious_URLs": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "message",
                    "type": "string",
                    "value": "''"
                  }
                ]
              }
            },
            "Sentinel_Comment_Condition": {
              "actions": {
                "Message_For_Multiple_Incidents": {
                  "type": "SetVariable",
                  "inputs": {
                    "name": "message",
                    "value": "According to SlashNext connector below mentioned URLs are malicious\n@{variables('malicious_urls')}"
                  }
                }
              },
              "runAfter": {
                "For_each": [
                  "Succeeded"
                ]
              },
              "else": {
                "actions": {
                  "Message_For_Single_Incident": {
                    "type": "SetVariable",
                    "inputs": {
                      "name": "message",
                      "value": "According to SlashNext connector below mentioned URL is malicious\n@{variables('malicious_urls')}"
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "greater": [
                      "@length(variables('malicious_urls'))",
                      1
                    ]
                  }
                ]
              },
              "type": "If"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "SlashNext": {
                "connectionId": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Web/connections/',variables('slashnext_connection_name'))]",
                "connectionName": "[variables('slashnext_connection_name')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', 'SlashNext')]"
              },
              "azuresentinel": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "connectionName": "[variables('MicrosoftSentinelConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                "connectionProperties": {
                  "authentication": {
                    "type": "ManagedServiceIdentity"
                  }
                }
              }
            }
          }
        }
      },
      "name": "[parameters('PlaybookName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[variables('workspace-location-inline')]",
      "tags": {
        "hidden-SentinelTemplateName": "incidentenrichment",
        "hidden-SentinelTemplateVersion": "1.0"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "apiVersion": "2017-07-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('slashnext_connection_name'))]",
        "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]"
      ]
    },
    {
      "name": "[variables('slashnext_connection_name')]",
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "location": "[variables('workspace-location-inline')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('slashnext_connection_name')]",
        "api": {
          "id": "[variables('_connection-2')]"
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('MicrosoftSentinelConnectionName')]",
      "location": "[variables('workspace-location-inline')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('MicrosoftSentinelConnectionName')]",
        "parameterValueType": "Alternative",
        "api": {
          "id": "[variables('_connection-3')]"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "version": "1.0.0",
        "kind": "Solution",
        "contentId": "[variables('_solutionId')]",
        "parentId": "[variables('_solutionId')]",
        "source": {
          "kind": "Solution",
          "name": "SlashNext",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "slashnext"
        },
        "support": {
          "name": "SlashNext",
          "email": "support@slashnext.com",
          "tier": "Partner",
          "link": "https://support@slashnext.com "
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "Playbook",
              "contentId": "[variables('_SlashNextWebAccessLogAssessment')]",
              "version": "[variables('playbookVersion1')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_SlashNextPhishingIncidentInvestigation')]",
              "version": "[variables('playbookVersion2')]"
            }
          ]
        },
        "firstPublishDate": "2022-08-12",
        "lastPublishDate": "2022-08-12",
        "providers": [
          "SlashNext"
        ],
        "categories": {
          "domains": [
            "Security - Network"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_solutionId'))]"
    }
  ],
  "outputs": {}
}
