id: cf687598-5a2c-46f8-81c8-06b15ed489b1
name: Multiple errors reported for same DNSQuery - Anomaly Based (ASIM Domain Solution)
description: |
  'This creates an incident in the event where multiple clients are logging errors for the same DNSQuery. This uses anomaly based dynamic thresholding method.\n\nThis analytic rule uses ASIM and supports any built-in or custom source that supports the ASIM DNS schema'
severity: Medium
status: Available 
tags:
  - Schema: ASimNetworkSessions
    SchemaVersion: 0.2.4
requiredDataConnectors:
  - connectorId: GCPDNSDataConnector
    dataTypes:
      - GCPCloudDNS
  - connectorId: AzureFirewall
    dataTypes:
      - AzureDiagnostics
  - connectorId: CiscoUmbrellaDataConnector
    dataTypes:
      - Cisco_Umbrella_proxy_CL
  - connectorId: Corelight
    dataTypes:
      - Corelight
  - connectorId: InfobloxNIOS
    dataTypes:
      - Syslog
  - connectorId: NXLogDnsLogs
    dataTypes:
      - NXLog_DNS_Server_CL
  - connectorId: DNS
    dataTypes:
      - DnsEvents
  - connectorId: AIVectraStream
    dataTypes:
      - VectraStream
  - connectorId: Zscaler
    dataTypes:
      - CommonSecurityLog
  - connectorId: ISCBind
    dataTypes:
      - Syslog

queryFrequency: 1d
queryPeriod: 14d
triggerOperator: gt
triggerThreshold: 0
tactics:
  - CommandAndControl
relevantTechniques:
query: |
  let min_t = ago(14d);
  let max_t = now();
  let dt = 1d;
  let AnomalyThreshold = 2.5;
  let Errors = dynamic(['NXDOMAIN', 'SERVFAIL', 'REFUSED']);
  // calculate avg. eps(events per second)
  let eps = materialize (imDns | project TimeGenerated | where TimeGenerated > ago(5m) | count | extend Count = Count/300);
  let maxSummarizedTime = toscalar (
    union isfuzzy=true 
        (
            DNS_Summarized_Logs_ip1_CL 
                | where EventTime_t >= min_t
                | summarize max_TimeGenerated=max(EventTime_t)
                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)
        ),
        (
            print(min_t)
            | project max_TimeGenerated = print_0
        )
      | summarize maxTimeGenerated = max(max_TimeGenerated) 
    );
    let summarizationexist = materialize(
              union isfuzzy=true 
                (
                    DNS_Summarized_Logs_ip1_CL
                    | where EventTime_t > ago(1d) 
                    | project v = int(2)
                ),
                (
                    print int(1) 
                    | project v = print_0
                )
                | summarize maxv = max(v)
                | extend sumexist = (maxv > 1)
              );
  let allData = union isfuzzy=true
  (
    (datatable(exists:int, sumexist:bool)[1,false] | where toscalar(eps) > 1000 | join (summarizationexist) on sumexist) | join (
    imDns(starttime=todatetime(ago(2d)), endtime=now())
    | where TimeGenerated > maxSummarizedTime and EventResultDetails in (Errors)
    | summarize Count=count() by SrcIpAddr, DnsQuery, bin(TimeGenerated,1h)
    | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)
    ) on exists
    | project-away exists, maxv, sum*
  ),
  (
    (datatable(exists:int, sumexist:bool)[1,false] | where toscalar(eps) between (501 .. 1000) | join (summarizationexist) on sumexist) | join (
    imDns(starttime=todatetime(ago(3d)), endtime=now())
    | where TimeGenerated > maxSummarizedTime and EventResultDetails in (Errors)
    | summarize Count=count() by SrcIpAddr, DnsQuery, bin(TimeGenerated,1h)
    | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)
    ) on exists
    | project-away exists, maxv, sum*
  ),
  (
    (datatable(exists:int, sumexist:bool)[1,false] | where toscalar(eps) <= 500 | join (summarizationexist) on sumexist) | join (
    imDns(starttime=todatetime(ago(4d)), endtime=now())
    | where TimeGenerated > maxSummarizedTime and EventResultDetails in (Errors)
    | summarize Count=count() by SrcIpAddr, DnsQuery, bin(TimeGenerated,1h)
    | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)
    ) on exists
    | project-away exists, maxv, sum*
  ),
  (
        DNS_Summarized_Logs_ip1_CL
        | where EventTime_t > min_t and EventResultDetails_s in (Errors)
        | project-rename SrcIpAddr=SrcIpAddr_s, DnsQuery=DnsQuery_s, Count=count__d, EventTime=EventTime_t
        | extend Count = toint(Count) 
  )
  ;
  allData
  | make-series TotalIPCount= dcount(SrcIpAddr) on TimeGenerated in range (min_t, max_t, dt) by DnsQuery
  | extend (anomalies, score, baseline) = series_decompose_anomalies(TotalIPCount, AnomalyThreshold, -1, 'linefit')
  | mv-expand anomalies, score, baseline, TimeGenerated, TotalIPCount
  | extend
    anomalies = toint(anomalies),
    score = toint(score),
    baseline = toint(baseline),
    EventTime = todatetime(TimeGenerated),
    TotalIPs = tolong(TotalIPCount)
  | where TimeGenerated >= ago(dt)
  | where score > 2 * AnomalyThreshold
  | join kind=inner(allData | where TimeGenerated>ago(dt) | summarize SrcIps = make_set(SrcIpAddr,1000) by DnsQuery) on DnsQuery

eventGroupingSettings:
  aggregationKind: AlertPerResult
customDetails:

alertDetailsOverride:
  alertDisplayNameFormat: "[Anomaly] Multiple errors detectd for same DNSQuery - {{DnsQuery}}"
  alertDescriptionFormat: "Multiple Errors reported for DNSQuery:{{DnsQuery}} by IPs: {{SrcIps}} at {{TimeGenerated}}.\n\nThis creates an incident in the event where multiple clients are logging errors for the same DNSQuery."
version: 1.0.0
kind: Scheduled