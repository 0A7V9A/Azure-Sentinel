id: 01191239-274e-43c9-b154-3a042692af06
name: Potential DGA(Domain Generation Algorithm) detected via Repetitive Failures - Anomaly based (ASIM DNS Solution)
description: |
  'Identifies clients with a high NXDomain count which could be indicative of a DGA (cycling through possible C2 domains where most C2s are not live). Alert is generated when a new IP address is seen (based on not being seen associated with NXDomain records in prior 10-day baseline period). This analytic rule uses ASIM and supports any built-in or custom source that supports the ASIM DNS schema\n\nThis analytic rule uses ASIM and supports any built-in or custom source that supports the ASIM DNS schema'
severity: Medium
status: Available 
tags:
  - Schema: ASimNetworkSessions
    SchemaVersion: 0.2.4
requiredDataConnectors:
  - connectorId: GCPDNSDataConnector
    dataTypes:
      - GCPCloudDNS
  - connectorId: AzureFirewall
    dataTypes:
      - AzureDiagnostics
  - connectorId: CiscoUmbrellaDataConnector
    dataTypes:
      - Cisco_Umbrella_proxy_CL
  - connectorId: Corelight
    dataTypes:
      - Corelight
  - connectorId: InfobloxNIOS
    dataTypes:
      - Syslog
  - connectorId: NXLogDnsLogs
    dataTypes:
      - NXLog_DNS_Server_CL
  - connectorId: DNS
    dataTypes:
      - DnsEvents
  - connectorId: AIVectraStream
    dataTypes:
      - VectraStream
  - connectorId: Zscaler
    dataTypes:
      - CommonSecurityLog
  - connectorId: ISCBind
    dataTypes:
      - Syslog

queryFrequency: 1d
queryPeriod: 14d
triggerOperator: gt
triggerThreshold: 0
tactics:
  - CommandAndControl
relevantTechniques:
query: |
  let min_t = ago(14d);
  let max_t = now();
  let dt = 1d;
  let AnomalyThreshold = 2.5;
  // calculate avg. eps(events per second)
  let eps = materialize (imDns
    | project TimeGenerated
    | where TimeGenerated > ago(5m)
    | count
    | extend Count = Count / 300);
  let maxSummarizedTime = toscalar (
    union isfuzzy=true 
        (
        DNS_Summarized_Logs_ip1_CL 
        | where EventTime_t >= min_t
        | summarize max_TimeGenerated=max(EventTime_t)
        | extend max_TimeGenerated = datetime_add('hour', 1, max_TimeGenerated)
        ),
        (
        print(min_t)
        | project max_TimeGenerated = print_0
        )
    | summarize maxTimeGenerated = max(max_TimeGenerated) 
    );
  let summarizationexist = materialize(
    union isfuzzy=true 
        (
        DNS_Summarized_Logs_ip1_CL
        | where EventTime_t > ago(1d) 
        | project v = int(2)
        ),
        (
        print int(1) 
        | project v = print_0
        )
    | summarize maxv = max(v)
    | extend sumexist = (maxv > 1)
    );
  let allData = union isfuzzy=true
        (
        (datatable(exists: int, sumexist: bool)[1, false]
        | where toscalar(eps) > 1000
        | join (summarizationexist) on sumexist)
        | join (
            imDns(responsecodename='NXDOMAIN', starttime=todatetime(ago(2d)), endtime=now())
            | where TimeGenerated > maxSummarizedTime
            | summarize Count=count() by SrcIpAddr, DnsQuery, bin(TimeGenerated, 1h)
            | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)
            )
            on exists
        | project-away exists, maxv, sum*
        ),
        (
        (datatable(exists: int, sumexist: bool)[1, false]
        | where toscalar(eps) between (501 .. 1000)
        | join (summarizationexist) on sumexist)
        | join (
            imDns(responsecodename='NXDOMAIN', starttime=todatetime(ago(3d)), endtime=now())
            | where TimeGenerated > maxSummarizedTime
            | summarize Count=count() by SrcIpAddr, DnsQuery, bin(TimeGenerated, 1h)
            | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)
            )
            on exists
        | project-away exists, maxv, sum*
        ),
        (
        (datatable(exists: int, sumexist: bool)[1, false]
        | where toscalar(eps) <= 500
        | join (summarizationexist) on sumexist)
        | join (
            imDns(responsecodename='NXDOMAIN', starttime=todatetime(ago(4d)), endtime=now())
            | where TimeGenerated > maxSummarizedTime
            | summarize Count=count() by SrcIpAddr, DnsQuery, bin(TimeGenerated, 1h)
            | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)
            )
            on exists
        | project-away exists, maxv, sum*
        ),
        (
        DNS_Summarized_Logs_ip1_CL
        | where EventTime_t > min_t and EventResultDetails_s == 'NXDOMAIN'
        | project-rename
            SrcIpAddr=SrcIpAddr_s,
            DnsQuery=DnsQuery_s,
            Count=count__d,
            EventTime=EventTime_t
        | extend Count = toint(Count) 
        )
  ;
  allData
  // extract sld(second level domain)
  | extend sld = tostring(split(DnsQuery, ".")[-2])
  // Make series of sld list per hour for each SrcIpAddr for past 14 days
  | make-series sldCount=dcount(sld) on TimeGenerated in range (min_t, max_t, dt) by SrcIpAddr
  // include calculated Anomalies, Score and Baseline
  | extend (anomalies, score, baseline) = series_decompose_anomalies(sldCount, AnomalyThreshold, -1, 'linefit')
  | mv-expand anomalies, score, baseline, TimeGenerated, sldCount
  | extend
    anomalies = toint(anomalies),
    score = toint(score),
    baseline = toint(baseline),
    EventTime = todatetime(TimeGenerated),
    Total = tolong(sldCount)
  // take only 1 hour of data
  | where TimeGenerated > ago(dt)
  // take records where Anomaly score is greater than two times of Anomaly threshold
  | where score > 2 * AnomalyThreshold
  // Join the allData to include DnsQuery details
  | join kind=inner(allData
    | where TimeGenerated > ago(dt)
    | summarize DNSQueries = make_set(DnsQuery, 1000) by SrcIpAddr)
    on SrcIpAddr
  | extend Severity='Medium', Tactic='Command n Control'

eventGroupingSettings:
  aggregationKind: AlertPerResult
customDetails:

alertDetailsOverride:
  alertDisplayNameFormat: "[Anomaly] Potential DGA (Domain Generation Algorithm) originating from ClientIP: {{SrcIpAddr}} has been detected."
  alertDescriptionFormat: "Domains include: {{DNSQueries}}\nBaseline Domain count from this client: {{baseline}}\nCurrent Domain count from this client: {{Total}}\n\nIdentifies clients with a high NXDomain count which could be indicative of a DGA (cycling through possible C2 domains where most C2s are not live). Alert is generated when a new IP address is seen (based on not being seen associated with NXDomain records in prior 10-day baseline period). This analytic rule uses ASIM and supports any built-in or custom source that supports the ASIM DNS schema"
version: 1.0.0
kind: Scheduled