id: 4a7c3525-818d-4453-a532-5b84c0baaf80
name: Potential beaconing activity (ASIM DNS Solution)
description: |
  'This rule identifies beaconing patterns from DNS logs based on recurrent frequency patterns. Such potential outbound beaconing pattern to untrusted public networks should be investigated for any malware callbacks or data exfiltration attempts.'

tags:
  - Schema: ASimNetworkSessions
    SchemaVersion: 0.2.4
requiredDataConnectors:
  - connectorId: GCPDNSDataConnector
    dataTypes:
      - GCPCloudDNS
  - connectorId: AzureFirewall
    dataTypes:
      - AzureDiagnostics
  - connectorId: CiscoUmbrellaDataConnector
    dataTypes:
      - Cisco_Umbrella_proxy_CL
  - connectorId: Corelight
    dataTypes:
      - Corelight
  - connectorId: InfobloxNIOS
    dataTypes:
      - Syslog
  - connectorId: NXLogDnsLogs
    dataTypes:
      - NXLog_DNS_Server_CL
  - connectorId: DNS
    dataTypes:
      - DnsEvents
  - connectorId: AIVectraStream
    dataTypes:
      - VectraStream
  - connectorId: Zscaler
    dataTypes:
      - CommonSecurityLog
  - connectorId: ISCBind
    dataTypes:
      - Syslog

tactics:
  - Exfiltration

query: |
  let querystarttime = 2d;
  let queryendtime = 1d;
  let TimeDeltaThreshold = 10;
  let TotalEventsThreshold = 15;
  let PercentBeaconThreshold = 80;
  imDns(starttime=ago(querystarttime), endtime=ago(queryendtime))
  | where isnotempty(SrcIpAddr)
  //| take 10000000
  | project TimeGenerated, SrcIpAddr, DnsQuery
  | sort by SrcIpAddr asc,TimeGenerated asc
  | serialize
  | extend nextTimeGenerated = next(TimeGenerated, 1), nextSrcIpAddr = next(SrcIpAddr, 1)
  | extend TimeDeltainSeconds = datetime_diff('second',nextTimeGenerated,TimeGenerated)
  | where SrcIpAddr == nextSrcIpAddr
  //Whitelisting criteria/ threshold criteria
  | where TimeDeltainSeconds > TimeDeltaThreshold
  | project TimeGenerated, TimeDeltainSeconds, SrcIpAddr, DnsQuery
  | summarize count(), make_list(TimeDeltainSeconds) by TimeDeltainSeconds, bin(TimeGenerated, 1h), SrcIpAddr, DnsQuery
  | summarize (MostFrequentTimeDeltaCount, MostFrequentTimeDeltainSeconds) = arg_max(count_, TimeDeltainSeconds), TotalEvents=sum(count_)
    by bin(TimeGenerated, 1h), SrcIpAddr, DnsQuery
  | where TotalEvents > TotalEventsThreshold
  | extend BeaconPercent = MostFrequentTimeDeltaCount/toreal(TotalEvents) * 100
  | where BeaconPercent > PercentBeaconThreshold
  | order by BeaconPercent
  | take 50
  | extend IP_0_Address = SrcIpAddr
  | extend DNS_0_DomainName = DnsQuery

entityMappings:
  - entityType: DNS
    fieldMappings:
      - identifier: DomainName
        columnName: FullNameLookup
  - entityType: IP
    fieldMappings:
      - identifier: Address
        columnName: SrcIpAddr