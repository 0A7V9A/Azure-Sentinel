Parser:
  Title: Audit Event ASIM filtering parser for VectraCloud Account Detection Logs Event
  Version: '0.1'
  LastUpdated: Mar 17 2023
Product:
  Name: Vectra
Normalization:
  Schema: AuditEvent
  Version: '0.1.0'
References:
- Title: ASIM Audit Event Schema
  Link: https://aka.ms/ASimAuditEventDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports filtering and normalizing VectraCloud Account Detection Logs Event in the Account_Detection_Data_CL table to the ASIM Audit Event schema.
ParserName: vimAuditEventVectraCloudAccountDetection
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: actorusername_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: operation_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
ParserQuery: |
  let parser = (disabled:bool = false, eventresult:string='*', starttime:datetime=datetime(null), endtime:datetime=datetime(null), actorusername_has_any:dynamic=dynamic([]),operation_has_any:dynamic=dynamic([]),eventtype_in:dynamic=dynamic([]))
  {
    Account_Detection_Data_CL
    | where (isnull(starttime) or event_timestamp_t >= starttime) and (array_length(actorusername_has_any) == 0 or tostring(toint(detection_id_d)) has_any (actorusername_has_any)) and (array_length(operation_has_any) == 0 or d_type_vname_s has_any (operation_has_any)) and (array_length(eventtype_in) == 0 or detection_type_s has_any (eventtype_in))
    | extend details_json = parse_json(detail_s)
    | where (isnull(endtime) or todatetime(details_json[0].last_timestamp) <= endtime)
    | extend EventMessage = iff(isnull(details_json[0].error_code) and isnull(details_json[0].error_message),"No error", strcat(details_json[0].error_code, " : ", details_json[0].error_message))
    | extend
          EventEndTime = todatetime(details_json[0].last_timestamp),
          EventProduct = 'Vectra Cloud',
          EventResult = "Success",
          EventType = "Other",
          EventSchema = "AuditEvent",
          EventSchemaVersion = "0.1.0",
          EventStartTime = event_timestamp_t,
          EventVendor = 'Vectra',
          EventUid = tostring(toint(id_d)),
          EventOriginalUid = tostring(toint(detection_id_d)),
          HttpUserAgent = tostring(details_json[0].user_agent),
          SrcDescription = src_account_s,
          Type = detection_type_s,
          ThreatConfidence = toint(threat_d),
          EventOriginalSeverity = case(Severity == 0, "Informational", (Severity > 0 and Severity <=3),"Low", (Severity > 3 and Severity <=6),"Medium", (Severity > 6 and Severity <=10), "High","High")
    | project-rename
          Dvc = ip_s,
          EventSubType = detection_type_s,
          Operation = d_type_vname_s,
          Src = src_account_s,
          EventReportUrl = detection_href_s
    | project-away
          id_d, Category, threat_d, certainty_d, triaged_b, detection_id_d, account_id_d, account_href_s, href_s, account_uid_s, event_timestamp_t, detail_s, details_json, Severity, _SubscriptionId, _ResourceId, RawData, TenantId, SourceSystem, Computer, MG, ManagementGroupName
  };
  parser (disabled=disabled, eventresult=eventresult, starttime=starttime, endtime=endtime, actorusername_has_any=actorusername_has_any,operation_has_any=operation_has_any, eventtype_in=eventtype_in)