Parser:
  Title: Audit Event ASIM filtering parser for VectraCloud Account Detection Logs Event
  Version: '0.1'
  LastUpdated: Mar 17 2023
Product:
  Name: Vectra
Normalization:
  Schema: AuditEvent
  Version: '0.1.0'
References:
- Title: ASIM Audit Event Schema
  Link: https://aka.ms/ASimAuditEventDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Exceptions:
- Field: Dvc
  Warning: Empty value in mandatory field
  Exception: May be empty for requests for root servers and for requests for RR type DNSKEY
Description: |
  This ASIM parser supports filtering and normalizing VectraCloud Account Detection Logs Event in the Account_Detection_Data_CL table to the ASIM Audit Event schema.
ParserName: vimAuditEventVectraCloudAccountDetection
EquivalentBuiltInParser: _Im_AuditEvent_VectraCloudAccountDetection
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: actorusername_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: operation_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
ParserQuery: |
  let parser = (disabled:bool = false, eventresult:string='*', starttime:datetime=datetime(null), endtime:datetime=datetime(null), actorusername_has_any:dynamic=dynamic([]),operation_has_any:dynamic=dynamic([]),eventtype_in:dynamic=dynamic([]))
  {
    Account_Detection_Data_CL
    | where (isnull(starttime) or event_timestamp_t >= starttime) and (array_length(actorusername_has_any) == 0 or tostring(toint(detection_id_d)) has_any (actorusername_has_any)) and (array_length(operation_has_any) == 0 or d_type_vname_s has_any (operation_has_any)) and (array_length(eventtype_in) == 0 or detection_type_s has_any (eventtype_in))
    | parse-kv detail_s as (['error_code']:string, ['error_message']:string, ['last_timestamp']: datetime, ['user_agent']: string) with (regex=@'"?(error_code|error_message|last_timestamp|user_agent)":\s"?([^,"]+)"?\s*[,|}]')
    | where (isnull(endtime) or todatetime(last_timestamp) <= endtime)
    | extend EventMessage = iff((isnull(error_code) and isnull(error_message)) or (isempty(error_code) and isempty(error_message)),"No error", strcat(error_code, " : ",error_message))
    | extend
          EventEndTime = todatetime(last_timestamp),
          EventProduct = 'Vectra Cloud',
          EventResult = "Success",
          EventType = "Other",
          EventSchema = "AuditEvent",
          EventSchemaVersion = "0.1.0",
          EventStartTime = event_timestamp_t,
          EventVendor = 'Vectra',
          EventUid = tostring(id_d),
          EventOriginalUid = tostring(detection_id_d),
          HttpUserAgent = tostring(user_agent),
          SrcDescription = src_account_s,
          Type = detection_type_s,
          ThreatConfidence = toint(threat_d),
          EventOriginalSeverity = case(Severity == 0, "Informational", (Severity > 0 and Severity <=3),"Low", (Severity > 3 and Severity <=6),"Medium", (Severity > 6 and Severity <=10), "High","High")
    | project-rename
          Dvc = ip_s,
          EventSubType = detection_type_s,
          Operation = d_type_vname_s,
          Src = src_account_s,
          EventReportUrl = detection_href_s
    | project-away
          *_d, *_s, error_code, error_message, user_agent, last_timestamp, Category, triaged_b, event_timestamp_t, Severity, _SubscriptionId, _ResourceId, RawData, TenantId, SourceSystem, Computer, MG, ManagementGroupName
  };
  parser (disabled=disabled, eventresult=eventresult, starttime=starttime, endtime=endtime, actorusername_has_any=actorusername_has_any,operation_has_any=operation_has_any, eventtype_in=eventtype_in)