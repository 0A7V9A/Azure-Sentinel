Parser:
  Title: Audit Event ASIM parser for Cisco Meraki
  Version: '0.1'
  LastUpdated: Jun 20 2023
Product:
  Name: Cisco Meraki
Normalization:
  Schema: AuditEvent
  Version: '0.1'
References:
- Title: ASIM Audit Event Schema
  Link: https://aka.ms/ASimAuditEventDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
- Title: Cisco Meraki Documentation
  Link: https://documentation.meraki.com/
Description: |
  This ASIM parser supports normalizing Cisco Meraki to the ASIM Audit Event schema.
ParserName: vimAuditEventCiscoMeraki
EquivalentBuiltInParser: _Im_AuditEvent_CiscoMeraki
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: operation_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
ParserQuery: |
  let lookUpTable = datatable(Operation: string, EventResult: string, EventType: string)
    [
      "vpn_connectivity_change", "Success", "Set",
      "purging ISAKMP-SA", "Partial", "Delete",
      "purged ISAKMP-SA", "Success", "Delete",
      "ISAKMP-SA deleted", "Success", "Delete",
      "IPsec-SA request queued due to no phase 1 found", "Failure", "Execute",
      "failed to get sainfo", "Failure", "Execute",
      "failed to pre-process ph2 packet", "Failure", "Execute",
      "phase2 negotiation failed due to time up waiting for phase1", "Failure", "Execute",
      "initiate new phase 1 negotiation", "Success", "Execute",
      "ISAKMP-SA established", "Success", "Execute",
      "initiate new phase 2 negotiation", "Partial", "Execute",
      "IPsec-SA established", "Success", "Execute",
      "spanning-tree interface role change", "Success", "Set",
      "VRRP transition", "Success", "Set",
  ];
  let severitylookupforeventresult=datatable(EventResult: string, EventSeverity: string)[
      "Success", "Informational",
      "Partial", "Informational",
      "Failure", "Low"
  ];
  let parser=(disabled: bool = false, starttime: datetime=datetime(null), endtime: datetime=datetime(null), eventresult: string='*', operation_has_any: dynamic=dynamic([]), eventtype_in: dynamic=dynamic([]), srcipaddr_has_any_prefix: dynamic=dynamic([])) {
      union isfuzzy=true
          (
          meraki_CL
          | project-rename LogMessage =  Message
          ),
          (
          Syslog
          | project-rename LogMessage =  SyslogMessage
          )
      | where not(disabled)
          and LogMessage has "events"
          and (LogMessage has_any ("vpn_connectivity_change", "status changed", "VRRP active", "VRRP passive") or LogMessage has_cs "Site-to-site" or LogMessage has_cs "Port")
      | extend Parser = extract_all(@"(\d+.\d+)\s([\w\-\_]+)\s([\w\-\_]+)\s([\S\s]+)$", dynamic([1, 2, 3, 4]), LogMessage)[0]
      | extend
          Epoch = tostring(Parser[0]),
          Substring = tostring(Parser[3]),
          LogType = tostring(Parser[2])
      | where (LogType == "events") and (Substring has_any ("vpn_connectivity_change", "status changed", "VRRP active", "VRRP passive") or Substring has_cs "Site-to-site" or Substring has_cs "Port")
      | extend EpochTimestamp = split(Epoch, ".")
      | extend EventStartTime = unixtime_seconds_todatetime(tolong(EpochTimestamp[0]))
      | extend EventEndTime = EventStartTime 
      | where (isnull(starttime) or EventStartTime >= starttime)
          and (isnull(endtime) or EventStartTime <= endtime)
      | parse-kv Substring as (type: string, peer_contact: string, connectivity: string) with (pair_delimiter=" ", kv_delimiter="=")
      | extend Operation = case ( 
                          type == "vpn_connectivity_change",
                          type,  
                          Substring has "purging ISAKMP-SA",
                          "purging ISAKMP-SA",
                          Substring has "purged ISAKMP-SA",
                          "purged ISAKMP-SA",
                          Substring has "ISAKMP-SA deleted",
                          "ISAKMP-SA deleted",
                          Substring has "IPsec-SA request",
                          "IPsec-SA request queued due to no phase 1 found",
                          Substring has "failed to get sainfo",
                          "failed to get sainfo",
                          Substring has "failed to pre-process ph2 packet",
                          "failed to pre-process ph2 packet",
                          Substring has "phase2 negotiation failed due to time up waiting for phase1",
                          "phase2 negotiation failed due to time up waiting for phase1",
                          Substring has "initiate new phase 1 negotiation",
                          "initiate new phase 1 negotiation",
                          Substring has "ISAKMP-SA established",
                          "ISAKMP-SA established",
                          Substring has "initiate new phase 2 negotiation",
                          "initiate new phase 2 negotiation",
                          Substring has "IPsec-SA established",
                          "IPsec-SA established",
                          Substring has "status changed",
                          "port status change",
                          Substring has_cs "Port" and Substring has "STP BPDU",
                          "spanning-tree guard state change",
                          Substring has_cs "Port" and Substring has "STP role",
                          "spanning-tree interface role change",
                          Substring has_any("VRRP active", "VRRP passive"),
                          "VRRP transition",
                          ""    
                      )
      | where (array_length(operation_has_any) == 0 or Operation has_any (operation_has_any))
      | lookup lookUpTable on Operation
      | extend EventResult = case(
                            Substring has "from Down",
                            "Success",
                            Substring has "to Down",
                            "Failure",
                            Operation has_cs "spanning-tree guard state change" and Substring has_any ("connected", "forwarding"),
                            "Success",
                            Operation has_cs "spanning-tree guard state change" and Substring has_any ("disconnected", "error disabled", "blocked", "disabled", "not configured"),
                            "Failure",
                            Operation has_cs "spanning-tree guard state change" and Substring has "learning",
                            "Partial",
                            EventResult
                        )
      | where (eventresult == "*" or EventResult =~ eventresult)
      | extend EventType = case(
                          Operation == "port status change" and EventResult == "Success",
                          "Enable",
                          Operation == "port status change" and EventResult == "Failure",
                          "Disable",
                          Operation == "spanning-tree guard state change" and EventResult == "Success",
                          "Enable",
                          Operation == "spanning-tree guard state change",
                          "Disable",
                          EventType
                      )
      | where (array_length(eventtype_in) == 0 or Operation has_any (eventtype_in))
      | parse Substring with * " deleted " temp_deletedSrcIp "-" temp_deletedTargetIp " " temp_restmessage
      | parse Substring with * " for " temp_forTaregtSrcIp " " temp_restmessage
      | parse Substring with * " ESP " temp_espSrcIp "->" temp_espTargetIp
      | parse Substring with * " negotiation: " temp_negotiationSrcIp "<=>" temp_negotiationTargetIp
      | parse Substring with * " established " temp_estSrcIp "-" temp_estTargetIp " " temp_restmessage
      | parse Substring with * "Tunnel " temp_tunnelSrcIp "->" temp_tunnelTargetIp " " temp_restmessage
      | parse Substring with * "from " STPMac " " temp_restmessage
      | extend
          temp_srcipport = case(
                      Operation == "ISAKMP-SA deleted",
                      temp_deletedSrcIp,
                      Operation == "phase2 negotiation failed due to time up waiting for phase1",
                      temp_espSrcIp,
                      Operation == "initiate new phase 1 negotiation",
                      temp_negotiationSrcIp,
                      Operation == "ISAKMP-SA established",
                      temp_estSrcIp,
                      Operation == "initiate new phase 2 negotiation",
                      temp_negotiationSrcIp,
                      Operation == "IPsec-SA established",
                      temp_tunnelSrcIp,
                      ""
                  ),
          temp_targetipport = case(
                          Operation == "ISAKMP-SA deleted",
                          temp_deletedTargetIp,
                          Operation == "IPsec-SA request queued due to no phase 1 found",
                          temp_forTaregtSrcIp,
                          Operation == "phase2 negotiation failed due to time up waiting for phase1",
                          temp_espTargetIp,
                          Operation == "initiate new phase 1 negotiation",
                          temp_negotiationTargetIp,
                          Operation == "ISAKMP-SA established",
                          temp_estTargetIp,
                          Operation == "initiate new phase 2 negotiation",
                          temp_negotiationTargetIp,
                          Operation == "IPsec-SA established",
                          temp_tunnelTargetIp,
                          ""
                      )
      | extend
          temp_srcipport = iff(temp_srcipport has "[" and temp_srcipport !has ":", replace_strings(temp_srcipport, dynamic(['[', ']']), dynamic([':', ''])), temp_srcipport),
          temp_targetipport = iff(temp_targetipport has "[" and temp_targetipport !has ":", replace_strings(temp_targetipport, dynamic(['[', ']']), dynamic([':', ''])), temp_targetipport),
          DvcMacAddr = iff(Operation == "spanning-tree guard state change" and isnotempty(STPMac) and STPMac matches regex "([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})\'*", STPMac, "")
      | extend temp_srcipport = iff(isempty(DvcMacAddr) and isnotempty(STPMac) and Operation == "spanning-tree guard state change", STPMac, temp_srcipport)
      | extend
          peer_contact = iff(
                    peer_contact has '"',
                    replace_string(tostring(peer_contact), '"', ''),
                    replace_string(tostring(peer_contact), "'", "")
                ),
          temp_srcipport = iff(
                      temp_srcipport has '"',
                      replace_string(tostring(temp_srcipport), '"', ''),
                      replace_string(tostring(temp_srcipport), "'", "")
                  ),
          temp_targetipport = iff(
                          temp_targetipport has '"',
                          replace_string(tostring(temp_targetipport), '"', ''),
                          replace_string(tostring(temp_targetipport), "'", "")
                      )
      | extend temp_srcipport = coalesce(peer_contact, temp_srcipport)
      | parse temp_srcipport with * "[" temp_srcip "]:" temp_srcport
      | extend SrcIpAddr = iff(temp_srcipport has ".", split(temp_srcipport, ":")[0], coalesce(temp_srcip, temp_srcipport))
      | extend
          temp_SrcMatch=has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix)
      | where array_length(srcipaddr_has_any_prefix) == 0 or isnotempty(temp_SrcMatch)
      | parse temp_targetipport with * "[" temp_targetip "]:" temp_targetport
      | extend TargetIpAddr = iff(temp_targetipport has ".", split(temp_targetipport, ":")[0], coalesce(temp_targetip, temp_targetipport))
      | extend TargetPortNumber = iff(TargetIpAddr has ".", toint(split(temp_targetipport, ":")[1]), toint(coalesce(temp_targetport, "")))
      | parse Substring with * "Port " Port " " PortNextPart
      | parse Substring with * "port " port " " portnextpart
      | extend SrcPortNumber = case(
                              isnotempty(temp_srcipport),
                              iff(SrcIpAddr has ".", toint(split(temp_srcipport, ":")[1]), toint(coalesce(temp_srcport, ""))),
                              Substring has_cs "Port",
                              toint(Port),
                              Operation has "port status change",
                              toint(port),
                              int(null)
                          )
      | lookup severitylookupforeventresult on EventResult
      | extend
          Operation = iff(
                  Operation in ("spanning-tree interface role change", "VRRP transition"),
                  Substring,
                  Operation
              ),
          EventResultDetails = iff(isnotempty(connectivity), strcat("connectivity=", connectivity), ""),
          EventMessage = case(
                    Substring has "Site-to-site",
                    split(Substring, 'Site-to-site ')[1],
                    Substring has "Port",
                    Substring,
                    Operation in ("port status change", "VRRP transition"),
                    Substring,
                    ""
                )
      | extend Device = tostring(Parser[1])
      | invoke _ASIM_ResolveDvcFQDN('Device')
      | extend
          EventCount = int(1),
          Dvc = DvcHostname,
          IpAddr = SrcIpAddr,
          EventProduct = "Meraki",
          EventVendor = "Cisco",
          EventSchema = "AuditEvent",
          EventSchemaVersion = "0.1"
      | project-away
          LogMessage,
          Parser,
          type,
          Epoch,
          EpochTimestamp,
          Device,
          Substring,
          temp*,
          STPMac,
          peer_contact,
          connectivity,
          Port,
          PortNextPart,
          port,
          portnextpart,
          LogType,
          TenantId,
          SourceSystem,
          Computer,
          _ResourceId,
          MG,
          ManagementGroupName,
          RawData,
          EventTime,
          Facility,
          HostName,
          SeverityLevel,
          ProcessID,
          HostIP,
          ProcessName
  };
  parser(disabled=disabled, starttime=starttime, endtime=endtime, eventresult=eventresult, operation_has_any=operation_has_any, eventtype_in=eventtype_in, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix)