Parser:
  Title: Audit Event ASIM parser for Cisco Meraki
  Version: '0.1'
  LastUpdated: Jun 12 2023
Product:
  Name: Cisco Meraki
Normalization:
  Schema: AuditEvent
  Version: '0.1'
References:
- Title: ASIM Audit Event Schema
  Link: https://aka.ms/ASimAuditEventDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing Cisco Meraki to the ASIM Audit Event schema.
ParserName: vimAuditEventCiscoMeraki
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: operation_has_any
    Type: dynamic
    Default: dynamic([])
ParserQuery: |
  let lookUpTable = datatable(Operation: string, EventResult: string, EventType: string)
      [
      "vpn_connectivity_change", "Success", "Set",
      "purging ISAKMP-SA", "Partial", "Delete",
      "purged ISAKMP-SA", "Success", "Delete",
      "ISAKMP-SA deleted", "Success", "Delete",
      "IPsec-SA request queued due to no phase 1 found", "Failure", "Execute",
      "failed to get sainfo", "Failure", "Execute",
      "failed to pre-process ph2 packet", "Failure", "Execute",
      "phase2 negotiation failed due to time up waiting for phase1", "Failure", "Execute",
      "initiate new phase 1 negotiation", "Success", "Execute",
      "ISAKMP-SA established", "Success", "Execute",
      "initiate new phase 2 negotiation", "Partial", "Execute",
      "IPsec-SA established", "Success", "Execute",
      "spanning-tree interface role change", "Success", "Set",
      "VRRP transition", "Success", "Set",
  ];
  let parser=(disabled: bool = false, starttime: datetime=datetime(null), endtime: datetime=datetime(null), eventresult: string='*', operation_has_any: dynamic=dynamic([])) {
      union isfuzzy=true
          (
          meraki_CL
          | project-rename LogMessage =  Message
          ),
          (
          Syslog
          | project-rename LogMessage =  SyslogMessage
          )
      | where not(disabled)
          and (isnull(starttime) or TimeGenerated >= starttime)
          and (isnull(endtime) or TimeGenerated <= endtime)
      | where LogMessage has "events" and (LogMessage has_any ("vpn_connectivity_change", "status changed", "VRRP active", "VRRP passive") or LogMessage has_cs "Site-to-site" or LogMessage has_cs "Port")
      | extend Parser = extract_all(@"(\d+.\d+)\s([\w\-\_]+)\s([\w\-\_]+)\s([\S\s]+)$", dynamic([1, 2, 3, 4]), LogMessage)[0]
      | extend
          Epoch = tostring(Parser[0]),
          Device = tostring(Parser[1]),
          Substring = tostring(Parser[3]),
          EventCount = int(1)
      | extend EpochTimestamp = split(Epoch, ".")
      | extend
          EventStartTime = unixtime_seconds_todatetime(tolong(EpochTimestamp[0])),
          EventEndTime=TimeGenerated 
      | invoke _ASIM_ResolveDvcFQDN('Device')
      | extend
          Dvc = DvcHostname,
          EventProduct = "Meraki",
          EventVendor = "Cisco",
          EventSchema = "AuditEvent",
          EventSchemaVersion = "0.1"
      | extend Operation = case ( 
                          Substring has "vpn_connectivity_change",
                          extract(@"type=(\S+)\s", 1, Substring),
                          Substring has "purging ISAKMP-SA",
                          "purging ISAKMP-SA",
                          Substring has "purged ISAKMP-SA",
                          "purged ISAKMP-SA",
                          Substring has "ISAKMP-SA deleted",
                          "ISAKMP-SA deleted",
                          Substring has "IPsec-SA request",
                          "IPsec-SA request queued due to no phase 1 found",
                          Substring has "failed to get sainfo",
                          "failed to get sainfo",
                          Substring has "failed to pre-process ph2 packet",
                          "failed to pre-process ph2 packet",
                          Substring has "phase2 negotiation failed due to time up waiting for phase1",
                          "phase2 negotiation failed due to time up waiting for phase1",
                          Substring has "initiate new phase 1 negotiation",
                          "initiate new phase 1 negotiation",
                          Substring has "ISAKMP-SA established",
                          "ISAKMP-SA established",
                          Substring has "initiate new phase 2 negotiation",
                          "initiate new phase 2 negotiation",
                          Substring has "IPsec-SA established",
                          "IPsec-SA established",
                          Substring has "status changed",
                          "port status change",
                          Substring has_cs "Port" and Substring has "STP BPDU",
                          "spanning-tree guard state change",
                          Substring has_cs "Port" and Substring has "STP role",
                          "spanning-tree interface role change",
                          Substring has_any("VRRP active", "VRRP_Passive"),
                          "VRRP transition",
                          ""    
                      )
      | extend SrcIpAddr = iff(Substring has 'peer_contact', extract(@"(peer_contact)[ ]{0,1}=[ ]{0,1}\'*((?:[0-9]{1,3}\.){3}[0-9]{1,3})", 2, Substring), "")
      | extend SrcIpAddr = iff(isempty(SrcIpAddr) and Substring has 'peer_contact', extract(@'(peer_contact)[ ]{0,1}=[ ]{0,1}\"((?:[0-9]{1,3}\.){3}[0-9]{1,3})', 2, Substring), SrcIpAddr)
      | extend SrcIpAddr = iff(isnotempty(SrcIpAddr), SrcIpAddr, extract(@"(peer_contact)[ ]{0,1}=[ ]{0,1}\'*\[{0,1}((?i)([0-9a-f]{0,4}:){2,7}[0-9a-f]{0,4})", 2, Substring))
      | extend SrcIpAddr = iff(isempty(SrcIpAddr), extract(@'(peer_contact)[ ]{0,1}=[ ]{0,1}\"*\[{0,1}((?i)([0-9a-f]{0,4}:){2,7}[0-9a-f]{0,4})', 2, Substring), SrcIpAddr)
      | extend SrcPortNumber = case(
                             Substring has "peer_contact",
                             toint(extract(@"(peer_contact)[ ]{0,1}=[ ]{0,1}\'*((?:[0-9]{1,3}\.){3}[0-9]{1,3}):(\d+)+", 3, Substring)),
                             Substring has_cs "Port",
                             toint(extract(@"Port (\d+)\s", 1, Substring)),
                             Operation has "port status change",
                             toint(extract(@"port (\d+)\s", 1, Substring)),
                             int(null)
                         )
      | extend SrcPortNumber = iff(isempty(SrcPortNumber), toint(extract(@'(peer_contact)[ ]{0,1}=[ ]{0,1}\"((?:[0-9]{1,3}\.){3}[0-9]{1,3}):(\d+)+', 3, Substring)), SrcPortNumber)
      | extend SrcPortNumber = iff(isempty(SrcPortNumber), toint(extract(@"\s(peer_contact)[ ]{0,1}=[ ]{0,1}[\']*(((\[{0,1})((((([0-9A-Fa-f]{0,4})))(:{1,1})([0-9A-Fa-f]{0,4})){1,8})(\]{0,1})(:([0-9]{0,5})){0,1}))", 14, Substring)), SrcPortNumber)
      | extend SrcPortNumber = iff(isempty(SrcPortNumber), toint(extract(@'\s(peer_contact)[ ]{0,1}=[ ]{0,1}[\"]*(((\[{0,1})((((([0-9A-Fa-f]{0,4})))(:{1,1})([0-9A-Fa-f]{0,4})){1,8})(\]{0,1})(:([0-9]{0,5})){0,1}))', 14, Substring)), SrcPortNumber)
      | extend IpAddr = SrcIpAddr
      | lookup lookUpTable on Operation
      | extend EventResult = case(
                            Substring has "from Down",
                            "Success",
                            Substring has "to Down",
                            "Failure",
                            Operation has_cs "spanning-tree guard state change" and Substring has_any ("connected", "forwarding"),
                            "Success",
                            Operation has_cs "spanning-tree guard state change" and Substring has_any ("disconnected", "error disabled", "blocked", "disabled", "not configured"),
                            "Failure",
                            Operation has_cs "spanning-tree guard state change" and Substring has "learning",
                            "Partial",
                            EventResult
                        )
      | where (eventresult == "*" or EventResult =~ eventresult)
      | extend EventType = case(
                          Operation == "port status change" and EventResult == "Success",
                          "Enable",
                          Operation == "port status change" and EventResult == "Failure",
                          "Disable",
                          Operation == "spanning-tree guard state change" and EventResult == "Success",
                          "Enable",
                          Operation == "spanning-tree guard state change",
                          "Disable",
                          EventType
                      )
      | extend
          Operation = case(
                          Operation == "spanning-tree interface role change",
                          extract(@"Port .*", 0, Substring),
                          Operation == "VRRP transition",
                          Substring,
                          Operation
                      ),
          EventResultDetails = extract(@"connectivity='(\S+)'", 0, Substring),
          EventMessage = case(
                            Substring has "Site-to-site",split(Substring,'Site-to-site ')[1],
                            Substring has "Port", Substring,
                            Operation == "port status change", Substring,
                            Operation == "VRRP transition", Substring,
                            ""
                        )
      | where (array_length(operation_has_any) == 0 or Operation has_any (operation_has_any))
      | project-away
          LogMessage,
          Parser,
          Epoch,
          EpochTimestamp,
          Device,
          Substring,
          TenantId,
          SourceSystem,
          Computer,
          _ResourceId,
          MG,
          ManagementGroupName,
          RawData,
          EventTime,
          Facility,
          HostName,
          SeverityLevel,
          ProcessID,
          HostIP,
          ProcessName
  };
  parser(disabled=disabled, starttime=starttime, endtime=endtime, eventresult=eventresult, operation_has_any=operation_has_any)

