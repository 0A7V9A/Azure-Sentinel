// KQL RemoteDesktopServices-RdpCoreTS Event Parser
// Last Updated Date: May 23, 2020
//
// Purpose : 
// This parser aims to help collecting data from Windows VM through the Microsoft-Windows-RemoteDesktopServices-RdpCoreTS/Operational events channel.
// This might be usefull to detect success bruteforce attacks on RDP.
// Note that this parser was initially created to monitor EventID 140 (RDP failed auth.). Thus, at the moment, not all EventID are supported.
// Don't hesitate to update it or to ask for an update.
//
// Usage Instruction : 
// Paste below query in log analytics, click on Save button and select as Function from drop down by specifying function name and alias (e.g. RDPCoreTS).
// Function usually takes 10-15 minutes to activate. You can then use function alias from any other queries (e.g. RDPCoreTS | where EventID == 140).
//
// References : 
// Using functions in Azure monitor log queries : https://docs.microsoft.com/en-us/azure/azure-monitor/log-query/functions
// Tech Community Blog on KQL Functions : https://techcommunity.microsoft.com/t5/Azure-Sentinel/Using-KQL-functions-to-speed-up-analysis-in-Azure-Sentinel/ba-p/712381
//
let RemoteDesktopServices = Event
| where EventLog == "Microsoft-Windows-RemoteDesktopServices-RdpCoreTS/Operational"
| project TimeGenerated, Source, EventID, Computer, UserName, EventData, RenderedDescription
| extend EvData = parse_xml(EventData)
| extend EventDetail = EvData.DataItem.EventData.Data
| project-away EvData, EventData;
let RemoteDesktopServices65=()
{
    let Event65 = RemoteDesktopServices
    | where EventID == 65
    | extend ConnectionName = EventDetail["#text"]
    | project-away EventDetail;
    Event65;
};
let RemoteDesktopServices72=()
{
    let Event72 = RemoteDesktopServices
    | where EventID == 72
    | extend MethodName = tostring(EventDetail["#text"])
    | project-away EventDetail;
    Event72;
};
let RemoteDesktopServices102=()
{
    let Event102 = RemoteDesktopServices
    | where EventID == 102;
    Event102;
};
let RemoteDesktopServices103=()
{
    let Event103 = RemoteDesktopServices
    | where EventID == 103
    | extend ReasonCode = tostring(EventDetail["#text"])
    | project-away EventDetail;
    Event103;
};
let RemoteDesktopServices131=()
{
    let Event131 = RemoteDesktopServices
    | where EventID == 131
    | extend Protocol = tostring(EventDetail.[0]["#text"])
    | extend RemoteIP = tostring(split(EventDetail.[1]["#text"],":")[0])
    | extend RemotePort = tostring(split(EventDetail.[1]["#text"],":")[1])
    | project-away EventDetail;
    Event131;
};
let RemoteDesktopServices140=()
{
    let Event140 = RemoteDesktopServices
    | where EventID == 140
    | extend RemoteIP = tostring(EventDetail.["#text"])
    | project-away EventDetail;
    Event140;
};
let RemoteDesktopServices141=()
{
    let Event141 = RemoteDesktopServices
    | where EventID == 141
    | extend InstanceID = EventDetail.["#text"]
    | project-away EventDetail;
    Event141;
};
let RemoteDesktopServices142=()
{
    let Event142 = RemoteDesktopServices
    | where EventID == 142
    | extend Error = tostring(EventDetail["#text"])
    | project-away EventDetail;
    Event142;
};
let RemoteDesktopServices143=()
{
    let Event143 = RemoteDesktopServices
    | where EventID == 143
    | extend Error = tostring(EventDetail["#text"])
    | project-away EventDetail;
    Event143;
};
let RemoteDesktopServices145=()
{
    let Event145 = RemoteDesktopServices
    | where EventID == 145
    | extend IdleSeconds = tostring(EventDetail.[0]["#text"])
    | extend IdleSeconds1 = tostring(EventDetail.[1]["#text"])
    | extend IdleSeconds2 = tostring(EventDetail.[2]["#text"])
    | project-away EventDetail;
    Event145;
};
let RemoteDesktopServices148=()
{
    let Event148 = RemoteDesktopServices
    | where EventID == 148
    | extend ChannelName = tostring(EventDetail.[0]["#text"])
    | extend TunnelID = tostring(EventDetail.[1]["#text"])
    | project-away EventDetail;
    Event148;
};
let RemoteDesktopServices227=()
{
    let Event227 = RemoteDesktopServices
    | where EventID == 227
    | extend Name = tostring(EventDetail.[0]["#text"])
    | extend Value = tostring(EventDetail.[1]["#text"])
    | project-away EventDetail;
    Event227;
};
let RemoteDesktopServices226=()
{
    let Event226 = RemoteDesktopServices
    | where EventID == 226
    | extend StateTransition = tostring(EventDetail[0]["#text"])
    | extend PreviousState = tostring(EventDetail[1]["#text"])
    | extend PreviousStateName = tostring(EventDetail[2]["#text"])
    | extend NewState = tostring(EventDetail[3]["#text"])
    | extend NewStateName = tostring(EventDetail[4]["#text"])
    | extend Event = tostring(EventDetail[5]["#text"])
    | extend EventName = tostring(EventDetail[6]["#text"])
    | extend ErrorCode = tostring(EventDetail[7]["#text"])
    | project-away EventDetail;
    Event226;
};
(union isfuzzy=true
RemoteDesktopServices65, RemoteDesktopServices72, RemoteDesktopServices102, RemoteDesktopServices103, RemoteDesktopServices131, RemoteDesktopServices140, RemoteDesktopServices141, RemoteDesktopServices142, RemoteDesktopServices143, RemoteDesktopServices145, RemoteDesktopServices148, RemoteDesktopServices226, RemoteDesktopServices227
| project TimeGenerated, Computer, Source, EventID, RenderedDescription, ConnectionName, MethodName, ReasonCode, Protocol, RemotePort, RemoteIP, InstanceID, Error, IdleSeconds, IdleSeconds1, IdleSeconds2, ChannelName, TunnelID, Name, Value, StateTransition, PreviousState, PreviousStateName, NewState, NewStateName, Event, EventName, ErrorCode
| order by TimeGenerated asc)
