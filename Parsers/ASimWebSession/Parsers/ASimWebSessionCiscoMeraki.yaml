Parser:
  Title: Web Session ASIM parser for Cisco Meraki
  Version: '0.1'
  LastUpdated: Jun 12 2023
Product:
  Name: Cisco Meraki
Normalization:
  Schema: WebSession
  Version: '0.2.6'
References:
- Title: ASIM Web Session Schema
  Link: https://aka.ms/ASimWebSessionDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing Cisco Meraki logs to the ASIM Web Session normalized schema.
ParserName: ASimWebSessionCiscoMeraki
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let ActionLookup = datatable (Action: string, DvcAction: string)  [
    'allow', 'Allow',
    'log', 'Allow',
    'accept', 'Allow',
    'block', 'Deny',
    'deny', 'Deny',
    'quarantine', 'Deny'
  ];
  let parser=(disabled: bool=false) {
    union isfuzzy=true
        (
        meraki_CL
        | project-rename LogMessage =  Message
        ),
        (
        Syslog
        | project-rename LogMessage =  SyslogMessage
        )
    | where not(disabled) and (LogMessage has "urls" or (LogMessage has "security_event" and LogMessage has "security_filtering_file_scanned"))
    | extend Parser = extract_all(@"(\d+.\d+)\s([\w\-\_]+)\s([\w\-\_]+)\s([\S\s]+)$", dynamic([1, 2, 3, 4]), LogMessage)[0]
    | extend
        Epoch = tostring(Parser[0]),
        Device =tostring(Parser[1]),
        Substring = tostring(Parser[3]),
        EventCount=int(1),
        EventProduct="Meraki",
        EventVendor="Cisco",
        EventSchema="WebSession",
        EventSchemaVersion="0.2.6"
    | extend EpochTimestamp = split(Epoch, ".")
    | extend
        EventStartTime = unixtime_seconds_todatetime(tolong(EpochTimestamp[0])),
        EventEndTime=TimeGenerated,
        Disposition=tostring(extract(@"disposition=(\S+)\s", 1, Substring)),
        Action=case(LogMessage has "security_event", tostring(extract(@"action=(\S+)", 1, Substring)), ""),
        Url = case(
          LogMessage has "urls",
          extract(@"request: (\w+)\s(\S+)", 2, Substring),
          LogMessage has "security_event",
          tostring(extract(@"url=(\S+)\s", 1, Substring)),
          ""
      )
    | extend
        EventResult=case(
                LogMessage has "urls",
                "Success",
                LogMessage has "security_event" and Action in~("allow", "log", "accept"),
                "Success",
                LogMessage has "security_event" and Action in~("block", "deny", "qurantine"),
                "Failure",
                ""
            ),
        EventSeverity=case(
                  LogMessage has "urls",
                  "Informational",
                  LogMessage has "security_event" and Action in~("allow", "log", "accept"),
                  "Informational",
                  LogMessage has "security_event" and Action in~("block", "deny", "qurantine"),
                  "High",
                  ""
              ),
        Ip=extract("(([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.(([0-9]{1,3})))", 1, Url)
    | extend SrcIpAddr = iff(Substring has 'src', extract(@"(src)[ ]{0,1}=[ ]{0,1}\'*((?:[0-9]{1,3}\.){3}[0-9]{1,3})", 2, Substring), "")
    | extend SrcIpAddr = iff(isempty(SrcIpAddr) and Substring has 'src', extract(@'(src)[ ]{0,1}=[ ]{0,1}\"((?:[0-9]{1,3}\.){3}[0-9]{1,3})', 2, Substring), SrcIpAddr)
    | extend SrcIpAddr = iff(isnotempty(SrcIpAddr), SrcIpAddr, extract(@"(src)[ ]{0,1}=[ ]{0,1}\'*\[{0,1}((?i)([0-9a-f]{0,4}:){2,7}[0-9a-f]{0,4})", 2, Substring))
    | extend SrcIpAddr = iff(isempty(SrcIpAddr), extract(@'(src)[ ]{0,1}=[ ]{0,1}\"*\[{0,1}((?i)([0-9a-f]{0,4}:){2,7}[0-9a-f]{0,4})', 2, Substring), SrcIpAddr)
    | extend SrcPortNumber = toint(extract(@"(src)[ ]{0,1}=[ ]{0,1}\'*((?:[0-9]{1,3}\.){3}[0-9]{1,3}):(\d+)+", 3, Substring))
    | extend SrcPortNumber = iff(isempty(SrcPortNumber), toint(extract(@'(src)[ ]{0,1}=[ ]{0,1}\"((?:[0-9]{1,3}\.){3}[0-9]{1,3}):(\d+)+', 3, Substring)), SrcPortNumber)
    | extend SrcPortNumber = iff(isempty(SrcPortNumber), toint(extract(@"(src)[ ]{0,1}=[ ]{0,1}[\']*(((\[{0,1})((((([0-9A-Fa-f]{0,4})))(:{1,1})([0-9A-Fa-f]{0,4})){1,8})(\]{0,1})(:([0-9]{0,5})){0,1}))", 14, Substring)), SrcPortNumber)
    | extend SrcPortNumber = iff(isempty(SrcPortNumber), toint(extract(@'(src)[ ]{0,1}=[ ]{0,1}[\"]*(((\[{0,1})((((([0-9A-Fa-f]{0,4})))(:{1,1})([0-9A-Fa-f]{0,4})){1,8})(\]{0,1})(:([0-9]{0,5})){0,1}))', 14, Substring)), SrcPortNumber)
    | extend DstIpAddr = iff(Substring has 'dst', extract(@"(dst)[ ]{0,1}=[ ]{0,1}\'*((?:[0-9]{1,3}\.){3}[0-9]{1,3})", 2, Substring), "")
    | extend DstIpAddr = iff(isempty(DstIpAddr) and Substring has 'dst', extract(@'(dst)[ ]{0,1}=[ ]{0,1}\"((?:[0-9]{1,3}\.){3}[0-9]{1,3})', 2, Substring), DstIpAddr)
    | extend DstIpAddr = iff(isnotempty(DstIpAddr), DstIpAddr, extract(@"(dst)[ ]{0,1}=[ ]{0,1}\'*\[{0,1}((?i)([0-9a-f]{0,4}:){2,7}[0-9a-f]{0,4})", 2, Substring))
    | extend DstIpAddr = iff(isempty(DstIpAddr), extract(@'(dst)[ ]{0,1}=[ ]{0,1}\"*\[{0,1}((?i)([0-9a-f]{0,4}:){2,7}[0-9a-f]{0,4})', 2, Substring), DstIpAddr)
    | extend DstPortNumber = toint(extract(@"(dst)[ ]{0,1}=[ ]{0,1}\'*((?:[0-9]{1,3}\.){3}[0-9]{1,3}):(\d+)+", 3, Substring))
    | extend DstPortNumber = iff(isempty(DstPortNumber), toint(extract(@'(dst)[ ]{0,1}=[ ]{0,1}\"((?:[0-9]{1,3}\.){3}[0-9]{1,3}):(\d+)+', 3, Substring)), DstPortNumber)
    | extend DstPortNumber = iff(isempty(DstPortNumber), toint(extract(@"(dst)[ ]{0,1}=[ ]{0,1}[\']*(((\[{0,1})((((([0-9A-Fa-f]{0,4})))(:{1,1})([0-9A-Fa-f]{0,4})){1,8})(\]{0,1})(:([0-9]{0,5})){0,1}))", 14, Substring)), DstPortNumber)
    | extend DstPortNumber = iff(isempty(DstPortNumber), toint(extract(@'(dst)[ ]{0,1}=[ ]{0,1}[\"]*(((\[{0,1})((((([0-9A-Fa-f]{0,4})))(:{1,1})([0-9A-Fa-f]{0,4})){1,8})(\]{0,1})(:([0-9]{0,5})){0,1}))', 14, Substring)), DstPortNumber)
    | extend
        EventType=case(
              LogMessage has "urls" and Ip != "",
              "HTTPsession",
              "WebServerSession"
          ),
        HttpUserAgent = iff(
                    LogMessage has "urls",
                    extract(@"agent='([\S\.\s\S]+)'", 1, Substring),
                    ""
                ),
        HttpRequestMethod = iff(LogMessage has "urls", extract(@"request: (\w+)\s", 1, Substring), dynamic("")),
        FileSHA256 = iff(LogMessage has "security_event", tostring(extract(@"sha256([=]*)(\S+)?", 2, Substring)), ""),
        FileName = iff (
               LogMessage has "security_event",
               tostring(extract(@"name='(\S+)'\s", 1, Substring)),
               ""
           ),
        EventReportUrl=case (
                   LogMessage has "security_event",
                   tostring(extract(@"url=(\S+)\s", 1, Substring)),
                   LogMessage has "urls",
                   tostring(extract(@"request: (\w+)\s(\S+)", 2, Substring)),
                   ""
               ),
        DvcMacAddr=tostring(extract(@"mac=(\S+)\s", 1, Substring))
    | invoke _ASIM_ResolveDvcFQDN('Device')
    | extend 
        Dst=DstIpAddr,
        Src=SrcIpAddr,
        Dvc=DvcHostname,
        IpAddr=SrcIpAddr,
        UserAgent=HttpUserAgent
    | lookup ActionLookup on Action
    | project-away
        LogMessage,
        Parser,
        Epoch,
        EpochTimestamp,
        Device,
        Disposition,
        Action,
        Ip,
        Substring,
        TenantId,
        SourceSystem,
        Computer,
        _ResourceId,
        MG,
        ManagementGroupName,
        RawData,
        EventTime,
        Facility,
        HostName,
        SeverityLevel,
        ProcessID,
        HostIP,
        ProcessName
  };
  parser (disabled=false)