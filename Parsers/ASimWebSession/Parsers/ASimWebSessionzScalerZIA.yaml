Parser:
  Title: Web Session ASIM parser for zScaler ZIA
  Version: '0.1'
  LastUpdated: Dec 7, 2021
Product:
  Name: zScaler ZIA
Normalization:
  Schema: WebSession
  Version: '0.1.0'
References:
- Title: ASIM Web Session Schema
  Link: https://aka.ms/ASimWebSessionDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
- Title: zScaler Connector
  Link: https://docs.microsoft.com/azure/sentinel/data-connectors-reference#zscaler
- Title: zScaler Sentinel deployment guide
  Link: https://help.zscaler.com/zia/zscaler-microsoft-azure-sentinel-deployment-guide
Description: |
  This ASIM parser supports normalizing zScaler ZIA proxy logs produced by the Azure Sentinel zScaler connector to the ASIM Web Session normalized schema. The parser supports squid native log format.
ParserName: ASimWebSessionzScalerZIA
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let parser=(disabled:bool=false){
  CommonSecurityLog | where not(disabled)
  | where DeviceVendor == "Zscaler"
  | where DeviceProduct == "NSSWeblog"
  // Event fields
  | extend 
    EventCount=int(1), 
    EventStartTime=TimeGenerated,  
    EventVendor = "zScaler", 
    EventProduct = "ZIA", 
    EventSchema = "WebSession", 
    EventSchemaVersion="0.1.0", 
    EventType = 'HTTPsession',
    EventEndTime=TimeGenerated
  | project-rename
    DvcAction = DeviceAction,
    DvcHostname = Computer,
    EventProductVersion = DeviceVersion,
    NetworkApplicationProtocol = ApplicationProtocol,
    HttpContentType = FileType,
    HttpUserAgent = RequestClientApplication,
    HttpRequestMethod = RequestMethod,
    DstAppName = DestinationServiceName,
    DstIpAddr = DestinationIP,
    DstFQDN = DestinationHostName,
    DstBytes = ReceivedBytes,
    SrcIpAddr = SourceIP,
    SrcUsername = SourceUserName,
    SrcNatIpAddr= SourceTranslatedAddress,
    SrcUserDepartment = SourceUserPrivileges, // Not part of the standard schema
    SrcBytes = SentBytes,
    ThreatRiskLevel = DeviceCustomNumber1,
    UrlCategory = DeviceCustomString2,
    ThreatName = DeviceCustomString5,
    FileMD5 = DeviceCustomString6
  // -- Parse
  | parse AdditionalExtensions with 
      "reason=" EventResultOriginalDetails:string ";"
      "outcome=" EventResultDetails:int ";"
      "cat=" * ";"
      "rulelabel=" RuleName:string ";"
      "ruletype=" ruletype:string ";"
      "urlclass=" urlclass:string ";"
      "devicemodel=" * 
  // -- Calculated fields
  | extend
    Url = iff (RequestURL == "", "", strcat (tolower(NetworkApplicationProtocol), "://", url_decode(RequestURL))),
    UrlCategory = strcat (urlclass, "/", UrlCategory),
    ThreatCategory = iff(DeviceCustomString4 == "None", "", strcat (DeviceCustomString3, "/", DeviceCustomString4)),
    RuleName = iff (RuleName == "None", "", strcat (ruletype, "/", RuleName)),
    FileMD5 = iff (FileMD5 == "None", "", FileMD5),
    HttpReferrer = iff (RequestContext == "None", "", url_decode(RequestContext)),
    DstAppName = iff (DstAppName == "General Browsing", "", DstAppName),
    DstFQDNparts = split (DstFQDN, ".")
  | extend
    DstHostname = DstFQDNparts[0],
    DstDomain = strcat_array(array_slice(DstFQDNparts,1,-1),".")
  // -- Enrichment
  | extend
    EventResult = iff (EventResultDetails == "NA" or toint(EventResultDetails) >= 400, "Failure", "Success"),
    DstAppType = "SaaS application",
    DstFQDN = "FQDN",
    SrcUsernameType = "UPN"
  // -- Aliases
  | extend
    Dvc = DvcHostname,
    UserAgent = HttpUserAgent,
    User = SrcUsername,
    HttpStatusCode = EventResultDetails,
    IpAddr = SrcNatIpAddr,
    Hash = FileMD5,
    FileHashType = iff(FileMD5 == "", "", "MD5")
  | project-away 
    DstFQDNparts, AdditionalExtensions, DeviceCustom*
  };
  parser (disabled)