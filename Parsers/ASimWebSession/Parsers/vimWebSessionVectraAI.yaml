Parser:
  Title: Web Session ASIM filtering parser for Vectra AI streams
  Version: '0.1'
  LastUpdated: Mar 30, 2022
Product:
  Name: Vectra AI Streams
Normalization:
  Schema: WebSession
  Version: '0.1.0'
References:
- Title: ASIM Web Session Schema
  Link: https://aka.ms/ASimWebSessionDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
- Title: Zscaler Connector
  Link: https://docs.microsoft.com/azure/sentinel/data-connectors-reference#zscaler
- Title: Zscaler Sentinel deployment guide
  Link: https://help.zscaler.com/zia/zscaler-microsoft-azure-sentinel-deployment-guide
Description: |
  This ASIM parser supports filtering and normalizing Vectra AI Streams logs produced to the ASIM Web Session normalized schema.
ParserName: vimWebSessionVectraAI
EquivalentBuiltInParser: _Im_WebSession_VectraAI

ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: ipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: url_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: httpuseragent_has_any
    Type: dynamic 
    Default: dynamic([])
  - Name: eventresultdetails_in
    Type: dynamic 
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false

ParserQuery: |
  let parser = (starttime: datetime = datetime(null),
                endtime: datetime = datetime(null),
                srcipaddr_has_any_prefix: dynamic = dynamic([]),
                url_has_any: dynamic = dynamic([]),
                httpuseragent_has_any: dynamic = dynamic([]),
                eventresultdetails_in: dynamic = dynamic([]),
                eventresult: string = '*',
                disabled: bool = false)
  {
    let NetworkDirectionLookup = datatable(local_orig_b:bool, local_resp_b:bool, NetworkDirection:string)
    [
        false, true, 'Inbound',
        true, false, 'Outbound',
        true, true, 'Local',
        false, false, 'Local'
    ];
    let NetworkProtocolVersionLookup = datatable(id_ip_ver_s:string, NetworkApplicationProtocol:string)
    [
        'ipv4', 'IPv4',
        'ipv6', 'IPv6'
    ];
    let remove_protocol_from_list = (list:dynamic) 
    {
        print list 
        | mv-apply l = print_0 to typeof(string) on
        ( 
          extend l = extract_all(@'^(?i:.*?://)?([^/])(.*)$', l)[0]
        ) 
        | project l
    };
    VectraStream_CL
    | where not(disabled)
    | where (isnull(starttime) or TimeGenerated >= starttime)
        and (isnull(endtime) or TimeGenerated <= endtime)
    | where metadata_type_s == 'metadata_httpsessioninfo'
    | where (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(id_orig_h_s, srcipaddr_has_any_prefix))
    | where (array_length(url_has_any) == 0 or strcat(host_s, uri_s) has_any(url_has_any))
    | where (array_length(httpuseragent_has_any) == 0 or user_agent_s has_any(httpuseragent_has_any))
    | where (array_length(eventresultdetails_in) == 0 or tostring(status_code_d) has_any(eventresultdetails_in))
    | extend EventResult = iff(tolong(status_code_d) >= 400, "Failure", "Success"),
    | where (eventresult == '*' or EventResult =~ eventresult)
    | project-rename
        DvcDescription = hostname_s,
        DstDescription = resp_hostname_s,
        SrcDescription = orig_hostname_s,
        DstIpAddr = id_resp_h_s,
        EventOriginalUid = uid_s,
        HttpContentType = resp_mime_types_s,
        HttpReferrer = referrer_s,
        HttpRequestMethod = method_s,
        HttpUserAgent = user_agent_s,
        NetworkSessionId = community_id_s,
        SrcIpAddr = id_orig_h_s,
        DvcId = sensor_uid_s,
        SrcSessionId = orig_sluid_s,
        DstSessionId = resp_sluid_s,
        HttpResponseCacheControl = response_cache_control_s,
        HttpRequestCacheControl = request_cache_control_s,
        HttpCookie = cookie_s
        HttpResponseExpires = response_expires_s,
        HttpIsProxied = is_proxied_b,
        HttpContentType = resp_mime_types_s,
        HttpRequestContentType = orig_mime_type_s,
        EventOriginalStatusDetails = status_msg_s
    | extend
        DstHostname = iff (DstDescription startswith "IP-" or not(DstDescription matches regex HostnameRegex), "", DstDescription),
        SrcHostname = iff (SrcDescription startswith "IP-" or not(SrcDescription matches regex HostnameRegex), "", SrcDescription),
        DvcHostname = iff (DvcDescription startswith "IP-" or not(DvcDescription matches regex HostnameRegex), "", DvcDescription),
        DstBytes = tolong(resp_ip_bytes_d),
        DstPackets = tolong(resp_pkts_d),
        DstPortNumber = toint(id_resp_p_d),
        EventCount = toint(1),
        EventStartTime = unixtime_milliseconds_todatetime(ts_d),
        EventOriginalSubType = split(metadata_type_s, '_')[1],
        EventProduct = 'Vectra Stream',
        EventResultDetails = tostring(toint(status_code_d)),
        HttpRequestBodyBytes = tolong(request_body_len_d),
        HttpRequestBodyBytes = tolong(response_body_len_d),
        HttpRequestHeaderCount = toint(request_header_count_d),
        HttpResponseHeaderCount = toint(response_header_count_d),
        EventSchema = 'WebSession',
        EventSchemaVersion='0.1.0',
        SrcDvcIdType = 'VectraId',
        DstDvcIdType = 'VectraId',
        DvcIdType = 'VectraId',
        EventSeverity = iff (EventResult == 'Success', 'Informational', 'Warning'),
        EventType = 'HTTPsession',
        EventVendor = 'Vectra AI',
        SrcBytes = tolong(orig_ip_bytes_d),
        SrcPackets = tolong(orig_pkts_d),
        SrcPortNumber = toint(id_orig_p_d),
        Url = strcat('http://', host_s, uri_s), // ?? What's the protocol?
        resp_mime_types_s -> [ "text/xml; charset=utf-8" ]
    | lookup NetworkDirectionLookup on local_orig_b, local_resp_b
    | lookup NetworkProtocolVersionLookup on id_ip_ver_s
    | project-away
        *_d, *_s, *_b, *_g
    | extend
        Dst = DstIpAddr,
        EventEndTime = EventStartTime,
        Hostname = DstHostname,
        HttpStatusCode = EventResultDetails,
        IpAddr = SrcIpAddr,
        NetworkBytes = SrcBytes + DstBytes,
        NetworkPackets = SrcPackets + DstPackets,
        SessionId = NetworkSessionId,
        Src = SrcIpAddr,
        UserAgent = HttpUserAgent 
  };
  parser(starttime, endtime, srcipaddr_has_any_prefix, url_has_any, httpuseragent_has_any, eventresultdetails_in, eventresult, disabled)