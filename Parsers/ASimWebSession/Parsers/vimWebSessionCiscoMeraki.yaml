Parser:
  Title: Web Session ASIM parser for Cisco Meraki
  Version: '0.1'
  LastUpdated: Jun 20 2023
Product:
  Name: Cisco Meraki
Normalization:
  Schema: WebSession
  Version: '0.2.6'
References:
- Title: ASIM Web Session Schema
  Link: https://aka.ms/ASimWebSessionDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
- Title: Cisco Meraki Documentation
  Link: https://documentation.meraki.com/
Description: |
  This ASIM parser supports normalizing Cisco Meraki logs to the ASIM Web Session normalized schema.
ParserName: vimWebSessionCiscoMeraki
EquivalentBuiltInParser: _Im_WebSession_CiscoMeraki
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: ipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: url_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: httpuseragent_has_any
    Type: dynamic 
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let ActionLookup = datatable (action: string, DvcAction: string)  [
    'allow', 'Allow',
    'log', 'Allow',
    'accept', 'Allow',
    'block', 'Deny',
    'deny', 'Deny',
    'quarantine', 'Deny'
  ];
  let parser=(
      starttime: datetime=datetime(null), 
      endtime: datetime=datetime(null),
      srcipaddr_has_any_prefix: dynamic=dynamic([]),
      dstipaddr_has_any_prefix: dynamic=dynamic([]),
      ipaddr_has_any_prefix: dynamic=dynamic([]), 
      url_has_any: dynamic=dynamic([]),
      httpuseragent_has_any: dynamic=dynamic([]),
      eventresult: string='*',
      disabled: bool=false
      ) {
      let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); 
      let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);
      union isfuzzy=true
          (
          meraki_CL
          | project-rename LogMessage =  Message
          ),
          (
          Syslog
          | project-rename LogMessage =  SyslogMessage
          )
      | where not(disabled) and (LogMessage has "urls" or LogMessage has_all("security_event", "security_filtering_file_scanned"))
      | extend Parser = extract_all(@"(\d+.\d+)\s([\w\-\_]+)\s([\w\-\_]+)\s([\S\s]+)$", dynamic([1, 2, 3, 4]), LogMessage)[0]
      | extend
          LogType = tostring(Parser[2]),
          Substring = tostring(Parser[3])
      | extend LogSubType = iff(LogType == "security_event", tostring(extract(@"^(\S+)\s", 1, Substring)), "")
      | where (LogType == "urls" or (LogType == "security_event" and LogSubType == "security_filtering_file_scanned"))
      | extend Epoch = tostring(Parser[0])
      | extend
          EpochTimestamp = split(Epoch, ".")
      | extend
          EventStartTime = unixtime_seconds_todatetime(tolong(EpochTimestamp[0]))
      | extend EventEndTime=EventStartTime
      | where (isnull(starttime) or EventStartTime >= starttime) and (isnull(endtime) or EventEndTime <= endtime)
      | parse-kv Substring as (src: string, dst: string, url: string, disposition: string, action: string, sha256: string, name: string, mac: string) with (pair_delimiter=" ", kv_delimiter="=")
      | parse kind=regex Substring with * "request:[ ]{0,1}" request " "urls
      | extend 
          url= iff(
          url has '"',
          replace_string(tostring(url), '"', ''),
          replace_string(tostring(url), "'", "")
      ),
          urls= iff(
            urls has '"',
            replace_string(tostring(urls), '"', ''),
            replace_string(tostring(urls), "'", "")
        )
      | extend Url = coalesce(url, urls)
      | where array_length(url_has_any) == 0 or Url has_any (url_has_any) 
      | extend
          EventResult=case(
                  action in~("allow", "log", "accept") or LogType == "urls",
                  "Success",
                  action in~("block", "deny", "quarantine"),
                  "Failure",
                  ""
              )
      | where (eventresult == '*' or EventResult =~ eventresult)
      | parse Substring with * " agent=" agent " request:" restmessage
      | where (array_length(httpuseragent_has_any) == 0 or agent has_any(httpuseragent_has_any))
      | parse Substring with * " sha256" fsha256 " "restmessage
      | extend src= iff(
          src has '"',
          replace_string(tostring(src), '"', ''),
          replace_string(tostring(src), "'", "")
      ),
          dst= iff(
          dst has '"',
          replace_string(tostring(dst), '"', ''),
          replace_string(tostring(dst), "'", "")
      )
      | parse src with *  "[" temp_srcip "]:" temp_srcport
      | parse dst with *  "[" temp_dstip "]:" temp_dstport
      | extend
          disposition= iff(
                  disposition has '"',
                  replace_string(tostring(disposition), '"', ''),
                  replace_string(tostring(disposition), "'", "")
              ),
          action= iff(
              action has '"',
              replace_string(tostring(action), '"', ''),
              replace_string(tostring(action), "'", "")
          ),
          agent= iff(
            agent has '"',
            replace_string(tostring(agent), '"', ''),
            replace_string(tostring(agent), "'", "")
        ),
          sha256= iff(
              sha256 has '"',
              replace_string(tostring(sha256), '"', ''),
              replace_string(tostring(sha256), "'", "")
          ),
          fsha256= iff(
              sha256 has '"',
              replace_string(tostring(fsha256), '"', ''),
              replace_string(tostring(fsha256), "'", "")
          ),
          name= iff(
            name has '"',
            replace_string(tostring(name), '"', ''),
            replace_string(tostring(name), "'", "")
        ),
          mac= iff(
          mac has '"',
          replace_string(tostring(mac), '"', ''),
          replace_string(tostring(mac), "'", "")
      )
      | lookup ActionLookup on action
      | extend
          EventSeverity=case(
                    action in~("block", "deny", "quarantine") and disposition == "malicious",
                    "Medium",
                    action in~("allow", "log", "accept") and disposition == "malicious",
                    "High",
                    action in~("block", "deny", "quarantine") and disposition != "malicious",
                    "Low",
                    "Informational"
                ),
          Ip=extract("(([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.(([0-9]{1,3})))", 1, url)
      | extend SrcIpAddr = iff(src has ".", split(src, ":")[0], coalesce(temp_srcip, src))
      | extend SrcPortNumber = toint(iff (src has ".", split(src, ":")[1], column_ifexists("temp_srcport", " ")))
      | extend DstIpAddr = iff(dst has ".", split(dst, ":")[0], coalesce(temp_dstip, dst))
      | extend DstPortNumber = toint(iff (dst has ".", split(dst, ":")[1], column_ifexists("temp_dstport", " ")))
      | extend
          EventType=case(
                LogType == "urls" and Ip != "",
                "HTTPsession",
                "WebServerSession"
            ),
          HttpUserAgent = column_ifexists("agent", ""),
          HttpRequestMethod = column_ifexists("request", ""),
          FileSHA256 = coalesce(sha256, fsha256),
          FileName = column_ifexists("name", ""),
          DvcMacAddr=column_ifexists("mac", "")
      | extend
          temp_SrcMatch=has_any_ipv4_prefix(SrcIpAddr, src_or_any)
          ,
          temp_DstMatch=has_any_ipv4_prefix(DstIpAddr, ipaddr_has_any_prefix)
      | extend ASimMatchingIpAddr=case(
                                  array_length(src_or_any) == 0,
                                  "-",
                                  temp_SrcMatch and temp_DstMatch,
                                  "Both",
                                  temp_SrcMatch,
                                  "SrcIpAddr",
                                  temp_DstMatch,
                                  "DstIpAddr",
                                  "No match"
                              )
      | where ASimMatchingIpAddr != "No match"
      | extend Device = tostring(Parser[1])
      | invoke _ASIM_ResolveDvcFQDN('Device')
      | extend 
          Dst=DstIpAddr,
          Src=SrcIpAddr,
          Dvc=DvcHostname,
          IpAddr=SrcIpAddr,
          UserAgent=HttpUserAgent
      | extend
          EventCount=int(1), 
          EventProduct="Meraki",
          EventVendor="Cisco",
          EventSchema="WebSession",
          EventSchemaVersion="0.2.6"
      | project-away
          LogMessage,
          Parser,
          LogType,
          LogSubType,
          Epoch,
          EpochTimestamp,
          Device,
          Ip,
          src,
          dst,
          mac,
          url,
          urls,
          disposition,
          action,
          request,
          name,
          sha256,
          fsha256,
          agent,
          temp*,
          restmessage,
          Substring,
          TenantId,
          SourceSystem,
          Computer,
          _ResourceId,
          MG,
          ManagementGroupName,
          RawData,
          EventTime,
          Facility,
          HostName,
          SeverityLevel,
          ProcessID,
          HostIP,
          ProcessName
    };
    parser(
        starttime=starttime, 
        endtime=endtime,
        srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
        dstipaddr_has_any_prefix=dstipaddr_has_any_prefix,
        ipaddr_has_any_prefix=ipaddr_has_any_prefix, 
        url_has_any=url_has_any,
        httpuseragent_has_any=httpuseragent_has_any,
        eventresult=eventresult,
        disabled=disabled
    )