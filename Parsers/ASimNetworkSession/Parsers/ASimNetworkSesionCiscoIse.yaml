Parser:
  Title: Network Session ASIM parser for Cisco ISE
  Version: '1.0'
  LastUpdated: June 16, 2023
Product:
  Name: Cisco ISE
Normalization:
  Schema: NetworkSession
  Version: '0.2.6'
References:
  - Title: ASIM Network Session Schema
    Link: https://aka.ms/ASimNetworkSessionDoc
  - Title: ASIM
    Link: https://aka.ms/AboutASIM
  - Title: Organization Application Security Events 
    Link: https://www.cisco.com/c/en/us/td/docs/security/ise/3-2/admin_guide/b_ise_admin_3_2/b_ISE_admin_32_maintain_monitor.html#ID58
Description: |
  This ASIM parser supports normalizing Cisco ISE Events produced by the Microsoft Sentinel Cisco ISE connector to the ASIM Network Session normalized schema.
ParserName: ASimNetworkSessionCiscoIse
EquivalentBuiltInParser: _ASim_NetworkSession_CiscoIse
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
    let fail_token = dynamic(["dropped", "fail", "failure", "failed", "error", "lost connection"]);
    let EventName=datatable(EventOriginalType:string, EventMessage:string)["25023","LDAP connect to domain controller succeeded","25024","LDAP connect to domain controller failed","25025","LDAP connect to global catalog succeeded","25026","LDAP connect to global catalog failed","25027","RPC connect to domain controller succeeded","25028","RPC connect to domain controller failed","25029","KDC connect to domain controller succeeded","25030","KDC connect to domain controller failed","25100","Connecting to external REST ID store server","25101","Successfully connected to external REST ID store server","25102","Connection to external REST database failed","60188","An attempted SSH connection has failed","60234","The SXP connection has been disconnected","60235","SXP connection succeeded","60236","SXP connection failed","61010","ISE has established connection to APIC","61011","ISE was disconnected from APIC""61025","Open secure connection with TLS peer","61026","Shutdown secure connection with TLS peer""60509","ERS request was denied as maximum possible connection was exceeded","61231","Kafka connection to ACI error while receiving message","61232","Kafka connection to ACI error while sending message","89003","Failed to connect to MDM server","24000","Connection established with LDAP server","24001","Cannot establish connection with LDAP server","24019","LDAP connection error was encountered","24030","SSL connection error was encountered","24400","Connection to ISE Active Directory agent established successfully","24401","Could not establish connection with ISE Active Directory agent","24428","Connection related error has occurred in either LRPC, LDAP or KERBEROS","24429","Could not establish connection with Active Directory","24849","Connecting to external ODBC database","24850","Successfully connected to external ODBC database","24851","Connection to external ODBC database failed","33208","Result for testing connection against AD","33209","Result for testing connection against LDAP","33210","LDAP traffic info","34120","Profiler failed to get the connection to NAC Manager","34147","JGroups TLS Handshake Failed","34148","JGroups TLS Handshake Succeeded","34149","HTTPS TLS Handshake Failed","34150","HTTPS TLS Handshake Succeeded","34159","LDAPS connection established successfully","34161","LDAPS connection terminated successfully","34161","LDAPS connection establishment failed with SSL error","34162","LDAPS connection terminated with SSL error","34163","LDAPS connection establishment failed with non-SSL error","34164","LDAPS connection terminated with non-SSL error","90062","Cannot connect to Domain Controller","90063","Successfully establish connection to Domain Controller","90066","Lost connection with Domain Controller","90078","Closed connection to Domain Controller","91082","RADIUS DTLS: Connection to OCSP server failed","11317","TrustSec SSH connection failed","5405","RADIUS Request dropped","5406","TACACS+ Request dropped"];
    let CiscoISENSParser=(disabled:bool=false){
      Syslog
      | where not(disabled)
      | where ProcessName has_any ("CISE", "CSCO")
      | extend EventOriginalType = extract(@".*\d{10}\s(\d{4,5})\s.*", 1, SyslogMessage)
      | where EventOriginalType in ("25023","25024","25025","25026","25027","25028","25029","25030","25100","25101","25102","60188","60234","60235","60236","61010","61011","61025","61026","60509","61231","61232","89003","24000","24001","24019","24030","24400","24401","24428","24429","24849","24850","24851","33208","33209","33210","34120","34147","34148","34149","34150","34159","34161","34161","34162","34163","34164","90062","90063","90066","90078","91082","11317","5405", "5406")
      | extend 
          EventVendor = "Cisco"
          , EventProduct = "ISE"
          , EventProductVersion = "3.2"
          , EventCount = int(1)
          , EventSchema = "NetworkSession"
          , EventSchemaVersion = "0.2.6"
          , EventStartTime = coalesce(EventTime, TimeGenerated)
          , EventEndTime = coalesce(EventTime, TimeGenerated)
          , EventOriginalSeverity = extract(@".*(NOTICE|INFO|WARN|WARNING|ERROR|FATAL|DEBUG).*", 1, SyslogMessage)
          , EventType = "NetworkSession"
      | extend 
          EventOriginalResultDetails = extract(@"FailureReason=\d+\s(.*?)", 1, SyslogMessage)
      | extend
          EventSeverity = case(EventOriginalSeverity in ("ERROR", "FATAL", "DEBUG") or EventOriginalResultDetails has_any (fail_token), "Low", "Informational")
      | lookup EventName on EventOriginalType
      | extend EventResult = case(EventSeverity == "Low" or EventOriginalResultDetails has "dropped", "Failure", "Success")
    //Dvc specific fields
    | extend 
          DvcIpAddr = extract(@"(d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3})", 1, Computer)
        , DvcHostname = coalesce(tostring(extract(@"NetworkDeviceName=(.*?),", 1, SyslogMessage)), Computer, HostName)
    //Dst specific fields
        , DstIpAddr = extract(@"DestinationIPAddress=(.*?),", 1, SyslogMessage)
        , DstPortNumber = toint(extract(@"DestinationPort=(.*?),", 1, SyslogMessage))
        , DstMacAddr = tostring(extract(@"Called-Station-ID=([a-fA-F0-9\-:]{17}),", 1, SyslogMessage))
        , DstUsername = coalesce(tostring(extract(@"User-Name=(.*?),", 1, SyslogMessage)), tostring(extract(@"UserName=(.*?),", 1, SyslogMessage)), tostring(extract(@"User=(.*?),", 1, SyslogMessage)))
        , DstUsernameType = 'Simple'
    //Src specific fields
    | extend 
        SrcIpAddr = case(SyslogMessage has "Remote-Address", extract(@"Remote-Address=(.*?),", 1, SyslogMessage),
                          SyslogMessage matches regex @"Caller-Station-ID=\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}", extract(@"Caller-Station-ID=(\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3})", 1, SyslogMessage), extract(@"Device IP Address=(.*?),", 1, SyslogMessage))
        , SrcPortNumber = toint(extract(@"Device Port=(\d{1,5})", 1, SyslogMessage))
        , SrcMacAddr = coalesce(replace_string(tostring(extract(@"Caller-Station-ID=([a-fA-F0-9\-:]{17})", 1, SyslogMessage)), "-", ":"), tostring(extract(@"device-mac=(.*?),", 1, SyslogMessage)))
    | extend 
        SrcHostname = case(SyslogMessage matches regex @"Caller-Station-ID=\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}", "",
                        isnotempty(SrcMacAddr), "",
                        tostring(extract(@"Caller-Station-ID=([a-fA-F0-9\-]{17})", 1, SyslogMessage)))
    //Network specific fields
        , NetworkApplicationProtocol = extract(@"Protocol=(.*?),", 1, SyslogMessage)
    //Aliaces
    | extend 
        Dvc = DvcIpAddr
        , IpAddr = SrcIpAddr
        , Dst = DstIpAddr
        , Src = SrcIpAddr
        , User = DstUsername
    | project-away TenantId, SourceSystem, MG, Computer, EventTime, Facility, HostName, SeverityLevel, SyslogMessage, HostIP, ProcessName, ProcessID, _ResourceId
    };
    CiscoISENSParser (disabled)