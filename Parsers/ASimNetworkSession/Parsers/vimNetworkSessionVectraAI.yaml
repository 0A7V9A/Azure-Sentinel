Parser:
  Title: Network Session ASIM filtering parser for Vectra AI Streams
  Version: '0.1'
  LastUpdated: Mar 8, 2021
Product:
  Name: Vectra AI Streams
Normalization:
  Schema: NetworkSession
  Version: '0.2.2'
References:
  - Title: ASIM Network Session Schema
    Link: https://aka.ms/ASimNetworkSessionDoc
  - Title: ASIM
    Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports filtering and normalizing Vectra AI Streams logs to the ASIM Network Session normalized schema.
ParserName: vimNetworkSessionVectraAI
EquivalentBuiltInParser: _Im_NetworkSession_VectraAI
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstportnumber
    Type: int
    Default: int(null)
  - Name: hostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: dvcaction
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let parser = (starttime: datetime = datetime(null),
                endtime: datetime = datetime(null),
                srcipaddr_has_any_prefix: dynamic = dynamic([]),
                dstipaddr_has_any_prefix: dynamic = dynamic([]),
                dstportnumber: int = int(null),
                hostname_has_any: dynamic = dynamic([]),
                dvcaction: dynamic = dynamic([]),
                eventresult: string = '*',
                disabled: bool = false)
  {
      let NetworkDirectionLookup = datatable(local_orig_b: bool,
                                            local_resp_b: bool,
                                            NetworkDirection: string)
    [
        false, true, 'Inbound',
        true, false, 'Outbound',
        true, true, 'Local',
        false, false, 'Local'
    ];
    VectraStream_CL
    | where not(disabled)
    | where (isnull(starttime) or TimeGenerated >= starttime)
        and (isnull(endtime) or TimeGenerated <= endtime)
    | where metadata_type_s == 'metadata_isession'
    | where (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(id_orig_h_s, srcipaddr_has_any_prefix))
    | where (array_length(dstipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(id_resp_h_s, dstipaddr_has_any_prefix))
    | where (isnull(dstportnumber) or dstportnumber == toint(id_resp_p_d))
    | where (array_length(hostname_has_any) == 0 or resp_hostname_s has_any(hostname_has_any))
    | where array_length(dvcaction) == 0
    | where (eventresult == '*' or 'Success' =~ eventresult)
    | project-rename
        DstHostname = resp_hostname_s,
        DstIpAddr = id_resp_h_s,
        Dvc = hostname_s,
        EventOriginalUid = uid_s,
        NetworkApplicationProtocol = service_s,
        NetworkProtocol = protoName_s,
        NetworkProtocolVersion = id_ip_ver_s,
        NetworkSessionId = community_id_s,
        SrcHostname = orig_hostname_s,
        SrcIpAddr = id_orig_h_s
    | extend
        DstBytes = tolong(resp_ip_bytes_d),
        DstPackets = tolong(resp_pkts_d),
        DstPortNumber = toint(id_resp_p_d),
        DstVlanId = tostring(toint(resp_vlan_id_d)),
        EventCount = toint(1),
        EventStartTime = unixtime_milliseconds_todatetime(ts_d),
        EventProduct = 'Vectra Stream',
        EventResult = 'Success',
        EventResultDetails = '',
        EventSchema = 'NetworkSession',
        EventSchemaVersion='0.2.2',
        EventSeverity = 'Informational',
        EventType = 'NetworkSession',
        EventVendor = 'Vectra AI',
        NetworkDuration = toint(duration_d),
        SrcBytes = tolong(orig_ip_bytes_d),
        SrcPackets = tolong(orig_pkts_d),
        SrcPortNumber = toint(id_orig_p_d),
        SrcVlanId = tostring(toint(orig_vlan_id_d))
    | extend
        EventEndTime = case(isnotempty(NetworkDuration),
        EventStartTime + (NetworkDuration * 1s),
        EventStartTime)
    | lookup NetworkDirectionLookup on local_orig_b, local_resp_b
    | project-away
        *_d, *_s, *_b, *_g
    | extend
        Duration = NetworkDuration,
        Dst = DstIpAddr,
        Hostname = DstHostname,
        InnerVlanId = SrcVlanId,
        IpAddr = SrcIpAddr,
        NetworkBytes = SrcBytes + DstBytes,
        NetworkPackets = SrcPackets + DstPackets,
        OuterVlanId = DstVlanId,
        SessionId = NetworkSessionId,
        Src = SrcIpAddr
    | project-reorder * asc
  };
  parser(starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)