Parser:
    Title:  Network Session ASIM parser for Generic CEF
    Version: '0.1'
    LastUpdated: Feb 17, 2022
Product:
    Name: Common Event Format
Normalization:
    Schema: NetworkSession
    Version: '0.2.2'
References:
    - Title: ASIM Network Session Schema
      Link: https://aka.ms/AzSentinelNetworkSessionDoc
    - Title: ASIM
      Link: https://aka.ms/AzSentinelNormalization
    - Title: Micro Focus Security ArcSight Common Event Format [pdf]
      Link: https://www.microfocus.com/documentation/arcsight/arcsight-smartconnectors/pdfdoc/common-event-format-v25/common-event-format-v25.pdf
    - Title: CEF and CommonSecurityLog field mapping
      Link: https://docs.microsoft.com/azure/sentinel/cef-name-mapping
Description: |
    This ASIM parser supports normalizing Common Event Format to the ASIM Network Session schema.
ParserName: ASimNetworkSessionGenericCEF
EquivalentBuiltInParser: _ASim_NetworkSession_GenericCEF
ParserParams:
    - Name: disabled
      Type: bool
      Default: false
ParserQuery: |
    let ASimNwCSLParsers = datatable(DeviceVendor:string, DeviceProduct:string)[
      "Palo Alto Networks", "PAN-OS"
      , "Zscaler" , "NSSFWlog"];
       let DeviceActions=datatable(DvcAction:string, OriginalDeviceAction:string )[
       'Allow','allow' 
      ,'Allow','allowed'
      ,'Allow','permit'
      ,'Allow','accept'
      ,'Allow','start'
          ,'Deny', 'deny'
          ,'Deny', 'denied'
      ,'Drop', 'drop'
      ,'Drop', 'block'
      ,'Drop', 'blocked'
      ,'Drop', 'close'
      ,'Drop', 'closed'
          ,'Drop ICMP', 'drop icmp'
      ,'Reset', 'reset'
      ,'Reset', 'rst'
          ,'Reset Source', 'reset source'
          ,'Reset Source', 'client-rst'
          ,'Reset Source', 'reset client'
       ,'Reset Destination', 'reset destination'
       ,'Reset Destination', 'server-rst'
       ,'Reset Destination', 'reset server'
          ,'Encrypt', 'encrypt'
       ,'Decrypt', 'decrypt'
          ,'VPNroute', 'vpnroute'
          ,'VPNRoute','IPsec'
    ];
    let CustomCEFExclusions=materialize(
        _GetWatchlist("ASimGenericCEFexclusion")  
        // [ASimSchema (SearchKey),  DeviceVendor, DeviceProduct]
        | where SearchKey == "NetworkSession" 
        | project-away SearchKey); // ==> [DeviceVendor, DeviceProduct]
    let FULLEXCLUSIONLIST=union ASimNwCSLParsers, CustomCEFExclusions;
    let ProtocolLookup = datatable(Protocol:int, NetworkProtocol:string) [
      0,"HOPOPT",
      1,"ICMP",
      2,"IGMP",
      3,"GGP",
      4,"IPv4",
      5,"ST",
      6,"TCP",
      7,"CBT",
      8,"EGP",
      9,"IGP",
      10,"BBN-RCC-MON",
      11,"NVP-II",
      12,"PUP",
      13,"ARGUS (deprecated)",
      14,"EMCON",
      15,"XNET",
      16,"CHAOS",
      17,"UDP",
      18,"MUX",
      19,"DCN-MEAS",
      20,"HMP",
      21,"PRM",
      22,"XNS-IDP",
      23,"TRUNK-1",
      24,"TRUNK-2",
      25,"LEAF-1",
      26,"LEAF-2",
      27,"RDP",
      28,"IRTP",
      29,"ISO-TP4",
      30,"NETBLT",
      31,"MFE-NSP",
      32,"MERIT-INP",
      33,"DCCP",
      34,"3PC",
      35,"IDPR",
      36,"XTP",
      37,"DDP",
      38,"IDPR-CMTP",
      39,"TP++",
      40,"IL",
      41,"IPv6",
      42,"SDRP",
      43,"IPv6-Route",
      44,"IPv6-Frag",
      45,"IDRP",
      46,"RSVP",
      47,"GRE",
      48,"DSR",
      49,"BNA",
      50,"ESP",
      51,"AH",
      52,"I-NLSP",
      53,"SWIPE (deprecated)",
      54,"NARP",
      55,"MOBILE",
      56,"TLSP",
      57,"SKIP",
      58,"IPv6-ICMP",
      59,"IPv6-NoNxt",
      60,"IPv6-Opts",
      61,"",
      62,"CFTP",
      63,"",
      64,"SAT-EXPAK",
      65,"KRYPTOLAN",
      66,"RVD",
      67,"IPPC",
      68,"",
      69,"SAT-MON",
      70,"VISA",
      71,"IPCV",
      72,"CPNX",
      73,"CPHB",
      74,"WSN",
      75,"PVP",
      76,"BR-SAT-MON",
      77,"SUN-ND",
      78,"WB-MON",
      79,"WB-EXPAK",
      80,"ISO-IP",
      81,"VMTP",
      82,"SECURE-VMTP",
      83,"VINES",
      84,"TTP",
      84,"IPTM",
      85,"NSFNET-IGP",
      86,"DGP",
      87,"TCF",
      88,"EIGRP",
      89,"OSPFIGP",
      90,"Sprite-RPC",
      91,"LARP",
      92,"MTP",
      93,"AX.25",
      94,"IPIP",
      95,"MICP (deprecated)",
      96,"SCC-SP",
      97,"ETHERIP",
      98,"ENCAP",
      99,"",
      100,"GMTP",
      101,"IFMP",
      102,"PNNI",
      103,"PIM",
      104,"ARIS",
      105,"SCPS",
      106,"QNX",
      107,"A/N",
      108,"IPComp",
      109,"SNP",
      110,"Compaq-Peer",
      111,"IPX-in-IP",
      112,"VRRP",
      113,"PGM",
      114,"",
      115,"L2TP",
      116,"DDX",
      117,"IATP",
      118,"STP",
      119,"SRP",
      120,"UTI",
      121,"SMP",
      122,"SM (deprecated)",
      123,"PTP",
      124,"ISIS over IPv4",
      125,"FIRE",
      126,"CRTP",
      127,"CRUDP",
      128,"SSCOPMCE",
      129,"IPLT",
      130,"SPS",
      131,"PIPE",
      132,"SCTP",
      133,"FC",
      134,"RSVP-E2E-IGNORE",
      135,"Mobility Header",
      136,"UDPLite",
      137,"MPLS-in-IP",
      138,"manet",
      139,"HIP",
      140,"Shim6",
      141,"WESP",
      142,"ROHC",
      143,"Ethernet",
      253,"",
      254,"",
      255,"Reserved"
    ];
    FULLEXCLUSIONLIST 
    | join kind=rightanti
    (CommonSecurityLog
        /// Filtering for probable network session events
        | where isnotempty(SourceIP) and isnotempty(DestinationIP) 
    ) on DeviceVendor, DeviceProduct
    // Generic parser
    | extend EventSchemaVersion='2.2'
        , EventType='NetworkSession' 
        , EventCount=coalesce(EventCount,1)
        , EventSchema='NetworkSession'
        , NumericProtocol=toint(Protocol)
        , EventStartTime= coalesce(StartTime, TimeGenerated) 
    | lookup ProtocolLookup on $left.NumericProtocol==$right.Protocol
    | extend
        NetworkProtocol=coalesce(NetworkProtocol, toupper(Protocol))
    // //
        | extend hostelements=split(DeviceName,'.')
        | extend DvcHostname=tostring(hostelements[0])
               , DvcDomain=strcat_array( array_slice(hostelements,1,-1), '.')
        | extend DvcFQDN = iff(DeviceName contains ".",DeviceName,"" )
               , DvcDomainType=iff(DeviceName contains ".","FQDN","" )
        | project-away hostelements
    // //
        | extend hostelements=split(SourceHostName,'.')
        | extend SrcHostname=tostring(hostelements[0])
               , SrcDomain=strcat_array( array_slice(hostelements,1,-1), '.')
        | extend SrcFQDN = iff(SourceHostName contains ".",SourceHostName,"" )
               , SrcDomainType=iff(SourceHostName contains ".","FQDN","" )
        | project-away hostelements
    // //
        | extend hostelements=split(DestinationHostName,'.')
        | extend DstHostname=tostring(hostelements[0])
               , DstDomain=strcat_array( array_slice(hostelements,1,-1), '.')
        | extend DstFQDN = iff(DestinationHostName contains ".",DestinationHostName,"" )
               , DstDomainType=iff(DestinationHostName contains ".","FQDN","" )
        | project-away hostelements
    // //
    | extend  DvcOriginalAction = DeviceAction, DeviceAction=tolower(DeviceAction)
    | lookup  DeviceActions on $left.DeviceAction == $right.OriginalDeviceAction
    |extend EventResult=iff(DvcAction =='Allow', 'Success', 'Failure' ) 
          , NetworkDirection=case(CommunicationDirection=='0','Inbound',CommunicationDirection=='1','Outbound','')
    | project-rename 
         Dvc=DeviceName 
      ,  DvcMacAddr=DeviceMacAddress
      ,  DvcOutboundInterface=DeviceOutboundInterface
      ,  DvcInboundInterface=DeviceInboundInterface
      , DstBytes=ReceivedBytes
      , DstMacAddr=DestinationMACAddress
      , DstNatIpAddr=DestinationTranslatedAddress
      , DstUserSid=DestinationUserID
      , DstUsername=DestinationUserName
      , DstIpAddr=DestinationIP
      , DstPortNumber=DestinationPort
      , DstNatPortNumber=DestinationTranslatedPort
      ,  EventVendor=DeviceVendor
      ,  EventProduct=DeviceProduct
      ,  EventProductVersion=DeviceVersion 
      ,  EventMessage=Message
      ,  EventResourceId=_ResourceId
      , NetworkApplicationProtocol=ApplicationProtocol
      ,  SrcBytes=SentBytes
      ,  SrcMacAddr=SourceMACAddress
      ,  SrcNatIpAddr=SourceTranslatedAddress
      ,  SrcUserSid=SourceUserID
      ,  SrcIpAddr=SourceIP
      ,  SrcPortNumber=SourcePort
      ,  SrcNatPortNumber=SourceTranslatedPort
      ,  SrcUsername=SourceUserName
    | extend 
        Dst=DstIpAddr
        , EventEndTime=EventStartTime 
        , EventSeverity=iff(DvcAction == "Allow", "Informational", "Low")
        , IpAddr=SrcIpAddr
        , Src=SrcIpAddr
        , SrcUsernameType=case(SrcUsername contains "@", "UPN"
            , SrcUsername contains '\\', 'Windows'
            , SrcUsername contains 'OU=', 'DN'
            , SrcUsername !contains ' ', 'Simple'
            , SrcUsername contains ' ', 'GivenName'
            , '')
        , DstUsernameType=case(SrcUsername contains "@", "UPN"
            , DstUsername contains '\\', 'Windows'
            , DstUsername contains 'OU=', 'DN'
            , DstUsername !contains ' ', 'Simple'
            , DstUsername contains ' ', 'GivenName'
            , '') 
        , EventSubtype=case(OriginalDeviceAction=~'start', 'Start',OriginalDeviceAction=~'end', 'End','')