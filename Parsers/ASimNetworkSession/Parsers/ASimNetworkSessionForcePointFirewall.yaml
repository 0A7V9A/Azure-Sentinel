Parser:
  Title: Network Session ASIM parser for Force Point Firewall
  Version: '1.0'
  LastUpdated: March 17, 2022
Product:
  Name: ForcePointFirewall
Normalization:
  Schema: NetworkSession
  Version: '0.2.6'
References:
  - Title: ASIM Network Session Schema
    Link: https://aka.ms/ASimNetworkSessionDoc
  - Title: ASIM
    Link: https://aka.ms/AboutASIM
  - Title: Field Description in Force Point Logs 
    Link: https://help.stonesoft.com/onlinehelp/StoneGate/SMC/6.8.0/GUID-DA3B3807-18E1-482B-A5E8-A8BD468E5BB0.html
Description: |
  This ASIM parser supports normalizing Force Point Firewall logs coming from CEF Data Connector to the ASIM Network Session normalized schema.
ParserName: ASimNetworkSessionForcePointFirewall
EquivalentBuiltInParser: _ASim_NetworkSession_ForcePointFirewall
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
   let ApplicationProtocolLookup=datatable(ApplicationProtocol:string,NetworkApplicationProtocol:string)
      [
            "HTTPS","HTTPS", // Bare Minimum
            "HTTP-Over-QUIC","HTTP", // Bare Minimum
            "HTTP","HTTP", // Bare Minimum
            "DNS Over TLS","DNS", // Bare Minimum
            "HTTP proxy","HTTP", // Bare Minimum
            "IMAPS","IMAPS",
            "SMTP","SMTP", // Bare Minimum
            "IMAP","IMAP",
            "POP3S","POP3",
            "SMTP Submission Service","SMTP", // Bare Minimum
            "X11","X11",
            "RTSP","RTSP",
            "Telnet","TELNET", // Bare Minimum
            "NNTP","NNTP",
            "ISAKMP","ISAKMP","ISAKMP","ISAKMP",
            "POP3","POP3",
            "BGP","BGP",
            "FTP","FTP", // Bare Minimum
            "RIP","RIP",
            "Squid HTTP proxy","HTTP", // Bare Minimum
            "TFTP","TFTP", // Bare Minimum
            "QOTD","QOTD",
            "SCCP","SCCP",
            "Modbus","MODBUS",
            "SVN","SVN",
            "RADIUS (Accounting)","RADIUS",
            "Kerberos","KERBEROS",
            "GRE","GRE",
            "UUCP-rlogin","UUCP",
            "GTP User Data Tunneling","GTP",
            "NNTPS","NNTP",
            "GTP Control","GTP",
            "IRC-default","IRC",
            "FTPS (Control)","FTPS",
            "ICCP","ICCP",
            "IRCS","IRC",
            "Telnets","TELNET", // Bare Minimum
            "Finger","FINGER",
            "ESP","ESP",
            "Rlogin","RLP",
            "IMAP3","IMAP",
            "MGCP","MGCP",
            "RADIUS Accounting (Old)","RADIUS",
            "RADIUS (Old)","RADIUS",
            "CVS","CVS",
            "Ident","IDENT",
            "Gopher","GOPHER",
            "BGMP","BGMP",
            "FTPS (Data)","FTPS",
            "POP2","POP",
            "TLISRV","TLISRV",
            "INGRES-NET","INGRES-NET",
            "IPIP","IPIP",
            "XTP","XTP",
            "UUCP","UUCP",
            "IRC","IRC",
            "Photuris (ICMP)","ICMP",
            "TACACS-DS","TACACS-DS",
            "WESP","WESP",
            "EGP","EGP",
            "WSN","WSN",
            "XDMCP","XDMCP",
            "Kerberos IV","KERBEROS",
            "IRTP","IRTP",
            "TTP","TTP",
            "IRC-SERV","IRC",
            "I-NLSP","NLSP",
            "SNP","SNP",
            "XNS-IDP","XNS",
            "SECURE-VMTP","VMTP",
            "VMTP","VMTP",
            "IPLT","IPLT",
            "GGP","GGP",
            "MFE-NSP","NSP",
            "HIP","HIP",
            "MERIT-NSP","NSP",
            "NSFNET-IGP","IGP",
            "DCN-MEAS","DCN",
            "STP","STP",
            "SRP","SRP",
            "HMP","HMP",
            "XNET","XNET",
            "VRRP","VRRP",
            "ENCAP","ENCAP",
            "CPNX","CPNX",
            "PTP","PTP",
            "SKIP","SKIP",
            "SCPS","SCPS",
            "Sprite-RPC","RPC",
            "IPv6 ICMP","ICMP",
            "MUX","MUX",
            "CHAOS","CHAOS",
            "SSCOPMCE","SSCOPMCE",
            "CBT","CBT",
            "SPS","SPS",
            "ETHERIP","ETHERIP",
            "MTP","MTP",
            "ROHC","ROHC",
            "CRTP","CRTP",
            "PNNI","PNNI",
            "NETBLT","NETBLT",
            "TLSP","TLSP",
            "IDPR","IDPR",
            "DDX","DDX",
            "PUP","PUP",
            "DSR","DSR",
            "NARP","NARP",
            "CPHB","CPHB",
            "SMP","SMP",
            "L2TP","L2TP",
            "IPv6 ICMP/143/0","ICMP",
            "MICP","MICP",
            "GMTP","GMTP",
            "LARP","LARP",
            "IFMP","IFMP",
            "IGP","IGP",
            "CFTP","CFTP",
            "PGM","PGM",
            "DDP","DDP",
            "PIPE","PIPE",
            "IATP","IATP",
            "IGMP","IGMP",
            "3PC","3PC",
            "DGP","DGP",
            "TCF","TCF",
            "UTI","UTI",
            "DCCP","DCCP",
            "SWIPE","SWIPE",
            "EMCON","EMCON",
            "PIM","PIM",
            "RVD","RVD",
      ];
    let LogSeverityLookup=datatable(LogSeverity:string,CalculatedThreatSeverity:string)
    [
          "0","Informational",          
          "1","Informational", 
          "2","Low",          
          "3","Low",
          "4","Low",          
          "5","Medium",
          "6","Medium",          
          "7","Medium",
          "8","High",
          "9","High",          
          "10","High"
    ];
    let ActionLookup=datatable(DeviceAction:string,DvcAction_ActionLookup:string,EventResult_ActionLookup:string,EventSeverity_ActionLookup:string)
    [
              "Allow","Allow","Success","Informational",          
              "Discard","Drop","Failure","Low",
              "Permit","Allow","Success","Informational",          
              "Refuse","Deny","Failure","Low",
              "Terminate","Reset Source","Failure","Low",          
              "Terminate (failed)","","Failure","Low",
              "Terminate (passive)","Reset Destination","Failure","Low",          
              "Terminate (reset)","Reset","Failure","Low",
              "Wait for Authentication","","Success","Informational",
              "Wait for Further Actions","","Success","Informational",          
              "Wait for RPC Reply","","Success","Informational"
    ];
    let DeviceEventClassIDLookup=datatable(DeviceEventClassID:string,EventSubType:string,DvcAction_DeviceEventClassIDLookup:string,EventResult_DeviceEventClassIDLookup:string,EventSeverity_DeviceEventClassIDLookup:string) //Add more codes if needed
    [
              "70011","Start","Allow","Success","Informational", // VPN-KeepAlive-Established
              "70013","","Deny","Failure","Low", // VPN-KeepAlive-Cannot-Establish
              "70018","Start","Allow","Success","Informational", // Connection_Allowed
              "70019","End","Deny","Failure","Low", // Connection_Discarded
              "70021","End","Reset","Failure","Low", // Connection_Closed
              "70022","End","Reset","Failure","Low", // Connection_Closed-Abnormally
              "70026","","","Success","Informational", // Connection_Progress
    ];
    let MessageLookup = datatable (Message:string, DvcAction_MessageLookup:string, EventResult_MessageLookup:string, EventResultDetails:string, EventOriginalResultDetails:string)  
    [
            "Connection dropped", "Drop", "Failure","Terminated", "Connection dropped",
            "Connection removed because NGFW Engine is low on memory.","Drop", "Failure","Terminated","Connection removed because NGFW Engine is low on memory.",
            "Connection timeout in state TCP_CLOSE_WAIT", "", "Success", "Timeout",	"One end of the Connection waits for the FIN packet (passive close).",
            "Connection timeout in state TCP_CLOSE_WAIT_ACK", "", "Success", "Timeout", "One end of the Connection waits for the FIN packet (passive close)",
            "Connection timeout in state TCP_CLOSING", "", "Success", "Timeout", "Closing packet (FIN) sent by one end of the Connection (simultaneous).",
            "Connection timeout in state TCP_CLOSING_ACK", "", "Success", "Timeout", "Waiting for ACK for the FIN before going to closing status (active close).",
            "Connection timeout in state TCP_ESTABLISHED", "", "Failure", "Timeout", "Normal status of TCP Connections for data transfer.",
            "Connection timeout in state TCP_FIN_WAIT_1", "", "Success", "Timeout",	"One end of the Connection waits for sending the FIN packet (active close).",
            "Connection timeout in state TCP_FIN_WAIT_2", "", "Success", "Timeout", "One end of the Connection waits for receiving ACK packet.",
            "Connection timeout in state TCP_LAST_ACK", "",	"Success", "Timeout", "One end of the Connection sent a FIN packet (passive close).",
            "Connection timeout in state TCP_LAST_ACK_WAIT", "", "Failure",	"Timeout", "Waiting for the FIN packet to be acknowledged.",
            "Connection timeout in state TCP_SYN_ACK_SEEN", "", "Failure",	"Timeout", "Second phase of the TCP three-way handshake, the server has replied to client sent SYN with SYN+ACK, next status will be established.",
            "Connection timeout in state TCP_SYN_FIN_SEEN", "",	"Success", "Timeout", "T/TCP (Transactional TCP) Connection, RFC 1644.",
            "Connection timeout in state TCP_SYN_RETURN", "", "Failure", "Timeout", "Received simultaneous SYN from the other end (simultaneous open).",
            "Connection timeout in state TCP_SYN_SEEN", "", "Failure", "Timeout", "First packet sent by one end of the Connection.",
            "Connection timeout in state TCP_TIME_WAIT", "", "Success", "Timeout", "One end of the Connection acknowledged closing packet (FIN).",
            "Connection timeout in state TCP_TIME_WAIT_ACK", "", "Failure",	"Timeout", "Waiting for ACK for the FIN status before going to time wait status (active close).",
            "Connection timeout in state ICMP_ECHO", "", "Failure", "Timeout", "Ping reply is expected.",
            "Connection timeout in state ICMP_REPLY_WAIT", "", "Failure", "Timeout", "Other ICMP request or reply types.",
            "Connection was reset by client", "Reset Source", "Failure","Reset", "",
            "Connection was reset by server", "Reset Destination", "Failure","Reset", "",
            "invalid packet (CT)", "", "Failure", "Invalid TCP", "",
            "not a (valid) SYN packet [A] (CT)", "", "Failure", "Invalid TCP", "",
            "not a (valid) SYN packet [FA] (CT)", "", "Failure", "Invalid TCP", "",
            "not a (valid) SYN packet [FPA] (CT)", "", "Failure", "Invalid TCP", "",
            "not a (valid) SYN packet [PA] (CT)", "", "Failure", "Invalid TCP", "",
            "not a (valid) SYN packet [RA] (CT)", "", "Failure", "Invalid TCP", "",
            "not a (valid) SYN packet [SA] (CT)", "", "Failure", "Invalid TCP", "",
            "TCP state violation","Deny","Failure", "Invalid TCP", "",
            "TCP state violation: Connection end-point replied with ACK to SYN-packet. Connection refused.", "Deny", "Failure", "Invalid TCP", "",
            "TSC error: Query timed out", "", "Failure", "Timeout", ""
    ];
    let parser = (disabled:bool) 
    { 
      CommonSecurityLog
            | where not(disabled)
            | where DeviceVendor=="FORCEPOINT" and DeviceProduct=="Firewall"
            | where DeviceFacility in~ ("Inspection","Packet Filtering","File Filtering","IPsec VPN","Protocol Agent")
            | extend NetworkProtocol = _ASIM_LookupNetworkProtocol(Protocol)            
            | lookup ActionLookup on DeviceAction
            | lookup LogSeverityLookup on LogSeverity
            | lookup DeviceEventClassIDLookup on DeviceEventClassID
            | lookup MessageLookup on Message
            | extend DvcAction = coalesce(DvcAction_ActionLookup, DvcAction_DeviceEventClassIDLookup, DvcAction_MessageLookup), 
                     EventResult = coalesce(EventResult_ActionLookup, EventResult_DeviceEventClassIDLookup, EventResult_MessageLookup), 
                     EventSeverity = coalesce(EventSeverity_ActionLookup, EventSeverity_DeviceEventClassIDLookup)            
            | project-away DvcAction_*, EventSeverity_*, EventResult_*
            | lookup ApplicationProtocolLookup on ApplicationProtocol
            | extend MessageCode = toint(DeviceEventClassID)
            | extend ThreatName = case (MessageCode between (70035 .. 82000) and DeviceFacility == "Inspection", Activity,
                                        MessageCode == 76506 and DeviceFacility == "File Filtering", "",
                                        MessageCode == 76508 and DeviceFacility == "File Filtering", Activity,
                                        MessageCode == 76509 and DeviceFacility == "File Filtering", Activity,
                                        MessageCode >= 200000 and DeviceFacility == "Inspection", Activity,
                                        ""
                                        )
            | extend 
                    EventCount = toint(1),
                    EventType = "NetworkSession",
                    EventSchema = "NetworkSession",
                    EventSchemaVersion = "0.2.6",
                    EventVendor = "Forcepoint",
                    EventProduct = "Firewall"
            | parse AdditionalExtensions with * "requestURL=" requestURL            
            | project-rename
                    EventOriginalType = DeviceEventClassID,
                    DstPortNumber = DestinationPort,
                    DstIpAddr = DestinationIP,
                    SrcPortNumber = SourcePort,
                    SrcIpAddr = SourceIP,
                    DstNatIpAddr = DestinationTranslatedAddress,
                    DstNatPortNumber = DestinationTranslatedPort,
                    SrcNatIpAddr = SourceTranslatedAddress,
                    SrcNatPortNumber = SourceTranslatedPort,
                    EventProductVersion = DeviceVersion,
                    EventMessage = Message,
                    DvcOriginalAction = DeviceAction,
                    SrcBytes = SentBytes,
                    DstBytes = ReceivedBytes,
                    EventOriginalSubType = DeviceFacility,
                    DvcId = DeviceExternalID,
                    DvcInboundInterface = DeviceInboundInterface,
                    DvcOutboundInterface = DeviceOutboundInterface,
                    DvcIpAddr = DeviceAddress,
                    EventOriginalSeverity = LogSeverity,
                    ThreatId = DeviceCustomString3        
            | invoke _ASIM_ResolveDvcFQDN('Computer')            
            | extend
                    EventStartTime = todatetime(ReceiptTime),
                    EventEndTime = todatetime(ReceiptTime),
                    extractedIP = extract(@"^(\d+.\d+.\d+.\d+)",0,requestURL),
                    extractedPort = iff(requestURL has ':', toint(split(requestURL,':')[-1]), int(null)),
                    EventSeverity = case(isnotempty(ThreatName), CalculatedThreatSeverity, //If the MessageCode is above 70035, ThreatName gets populated. In that case, Severity is determined based on the Log Severity provided by the source.
                                        EventSeverity)
            | extend 
                     NetworkRuleName = case(isnotempty(DeviceCustomString2), strcat(DeviceCustomString1,',',DeviceCustomString2),
                                            DeviceCustomString1),
                     DstDomain = case(
                                    isempty(extractedIP) and isnotempty(extractedPort), tostring(split(requestURL,':',0)[0]),
                                    isempty(extractedIP) and isempty(extractedPort), requestURL,
                                    ""
                                ),
                     DstIpAddr = case(
                                    isnotempty(DstIpAddr), DstIpAddr,
                                    isnotempty(extractedIP), requestURL,
                                    ""
                                )
            | extend
                     DvcIdType = case(
                                    isnotempty(DvcId), "ForcepointId",
                                    ""
                                ),
                     DstDomainType = case(
                                    isnotempty(DstDomain), "FQDN",
                                    ""  
                                ),
                     DstPortNumber = case(
                                    isnotempty(DstPortNumber), DstPortNumber,
                                    ApplicationProtocol startswith "TCP", toint(split(ApplicationProtocol,'/')[1]),
                                    ApplicationProtocol startswith "UDP", toint(split(ApplicationProtocol,'/')[1]),
                                    isnotempty(extractedPort), extractedPort,
                                    int(null)
                            ),
                     AdditionalFields = pack("RequestMethod",iff(isnotempty(RequestMethod) and RequestMethod != "UNKNOWN", RequestMethod, ""),
                                             "Activity",Activity,
                                             "VirusId",DeviceCustomString4),
                     DstAppName = case(DestinationServiceName in~ ("Generic-Web-HTTP","Application-Unknown","Unknown-Encrypted-Application"), "",
                                        DestinationServiceName),
                     DvcIpAddr = coalesce(DvcIpAddr,DeviceName)
            | extend
                    EventSeverity = case(isnotempty(EventSeverity),EventSeverity,
                                         isnotempty(ThreatName), "High",
                                         "Informational"),
                    Dvc = DvcIpAddr,
                    IpAddr = SrcIpAddr,
                    Rule = NetworkRuleName,
                    Dst = DstIpAddr,
                    Src = SrcIpAddr,
                    DvcInterface = DvcInboundInterface
            | project-away AdditionalExtensions, CommunicationDirection, Device*, Destination*, EndTime, ExternalID, File*, Flex*, IndicatorThreatType, Malicious*, Old*, OriginalLogSeverity, Process*, Protocol, ReceiptTime, Remote*, ReportReferenceLink, Request*, SimplifiedDeviceAction, Source*, StartTime, TenantId, ThreatConfidence, ThreatDescription, ThreatSeverity, ExtID, EventOutcome, FieldDevice*, Reason, ApplicationProtocol, Activity, requestURL, extracted*, Computer, MessageCode, CalculatedThreatSeverity
        };
        parser(disabled=disabled)