Parser:
  Title: Network Session ASIM parser for Force Point Firewall
  Version: '1.0'
  LastUpdated: March 17, 2022
Product:
  Name: ForcePointFirewall
Normalization:
  Schema: NetworkSession
  Version: '0.2.6'
References:
  - Title: ASIM Network Session Schema
    Link: https://aka.ms/ASimNetworkSessionDoc
  - Title: ASIM
    Link: https://aka.ms/AboutASIM
  - Title: Field Description in Force Point Logs 
    Link: https://help.stonesoft.com/onlinehelp/StoneGate/SMC/6.8.0/GUID-DA3B3807-18E1-482B-A5E8-A8BD468E5BB0.html
Description: |
  This ASIM parser supports normalizing Force Point Firewall logs coming from CEF Data Connector to the ASIM Network Session normalized schema.
ParserName: ASimNetworkSessionForcePointFirewall
EquivalentBuiltInParser: _ASim_NetworkSession_ForcePointFirewall
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
    let ProtocolLookup=datatable(Protocol:string,NetworkProtocol:string)
      [
          "0","HOPOPT"
          , "1","ICMP"
          , "2","IGMP"
          , "3","GGP"
          , "4","IPv4"
          , "5","ST"
          , "6","TCP"
          , "7","CBT"
          , "8","EGP"
          , "9","IGP"
          , "10","BBN-RCC-MON"
          , "11","NVP-II"
          , "12","PUP"
          , "13","ARGUS (deprecated)"
          , "14","EMCON"
          , "15","XNET"
          , "16","CHAOS"
          , "17","UDP"
          , "18","MUX"
          , "19","DCN-MEAS"
          , "20","HMP"
          , "21","PRM"
          , "22","XNS-IDP"
          , "23","TRUNK-1"
          , "24","TRUNK-2"
          , "25","LEAF-1"
          , "26","LEAF-2"
          , "27","RDP"
          , "28","IRTP"
          , "29","ISO-TP4"
          , "30","NETBLT"
          , "31","MFE-NSP"
          , "32","MERIT-INP"
          , "33","DCCP"
          , "34","3PC"
          , "35","IDPR"
          , "36","XTP"
          , "37","DDP"
          , "38","IDPR-CMTP"
          , "39","TP++"
          , "40","IL"
          , "41","IPv6"
          , "42","SDRP"
          , "43","IPv6-Route"
          , "44","IPv6-Frag"
          , "45","IDRP"
          , "46","RSVP"
          , "47","GRE"
          , "48","DSR"
          , "49","BNA"
          , "50","ESP"
          , "51","AH"
          , "52","I-NLSP"
          , "53","SWIPE (deprecated)"
          , "54","NARP"
          , "55","MOBILE"
          , "56","TLSP"
          , "57","SKIP"
          , "58","IPv6-ICMP"
          , "59","IPv6-NoNxt"
          , "60","IPv6-Opts"
          , "61",""
          , "62","CFTP"
          , "63",""
          , "64","SAT-EXPAK"
          , "65","KRYPTOLAN"
          , "66","RVD"
          , "67","IPPC"
          , "68",""
          , "69","SAT-MON"
          , "70","VISA"
          , "71","IPCV"
          , "72","CPNX"
          , "73","CPHB"
          , "74","WSN"
          , "75","PVP"
          , "76","BR-SAT-MON"
          , "77","SUN-ND"
          , "78","WB-MON"
          , "79","WB-EXPAK"
          , "80","ISO-IP"
          , "81","VMTP"
          , "82","SECURE-VMTP"
          , "83","VINES"
          , "84","TTP"
          , "84","IPTM"
          , "85","NSFNET-IGP"
          , "86","DGP"
          , "87","TCF"
          , "88","EIGRP"
          , "89","OSPFIGP"
          , "90","Sprite-RPC"
          , "91","LARP"
          , "92","MTP"
          , "93","AX.25"
          , "94","IPIP"
          , "95","MICP (deprecated)"
          , "96","SCC-SP"
          , "97","ETHERIP"
          , "98","ENCAP"
          , "99",""
          , "100","GMTP"
          , "101","IFMP"
          , "102","PNNI"
          , "103","PIM"
          , "104","ARIS"
          , "105","SCPS"
          , "106","QNX"
          , "107","A/N"
          , "108","IPComp"
          , "109","SNP"
          , "110","Compaq-Peer"
          , "111","IPX-in-IP"
          , "112","VRRP"
          , "113","PGM"
          , "114",""
          , "115","L2TP"
          , "116","DDX"
          , "117","IATP"
          , "118","STP"
          , "119","SRP"
          , "120","UTI"
          , "121","SMP"
          , "122","SM (deprecated)"
          , "123","PTP"
          , "124","ISIS over IPv4"
          , "125","FIRE"
          , "126","CRTP"
          , "127","CRUDP"
          , "128","SSCOPMCE"
          , "129","IPLT"
          , "130","SPS"
          , "131","PIPE"
          , "132","SCTP"
          , "133","FC"
          , "134","RSVP-E2E-IGNORE"
          , "135","Mobility Header"
          , "136","UDPLite"
          , "137","MPLS-in-IP"
          , "138","manet"
          , "139","HIP"
          , "140","Shim6"
          , "141","WESP"
          , "142","ROHC"
          , "143","Ethernet"
          , "253",""
          , "254",""
          , "255","Reserved"
    ];
    let ApplicationProtocolLookup=datatable(ApplicationProtocol:string,NetworkApplicationProtocol:string)
      [
            "HTTPS","HTTPS", // Bare Minimum
            "HTTP-Over-QUIC","HTTP", // Bare Minimum
            "HTTP","HTTP", // Bare Minimum
            "DNS Over TLS","DNS", // Bare Minimum
            "HTTP proxy","HTTP", // Bare Minimum
            "IMAPS","IMAPS",
            "SMTP","SMTP", // Bare Minimum
            "IMAP","IMAP",
            "POP3S","POP3",
            "SMTP Submission Service","SMTP", // Bare Minimum
            "X11","X11",
            "RTSP","RTSP",
            "Telnet","TELNET", // Bare Minimum
            "NNTP","NNTP",
            "ISAKMP","ISAKMP","ISAKMP","ISAKMP",
            "POP3","POP3",
            "BGP","BGP",
            "FTP","FTP", // Bare Minimum
            "RIP","RIP",
            "Squid HTTP proxy","HTTP", // Bare Minimum
            "TFTP","TFTP", // Bare Minimum
            "QOTD","QOTD",
            "SCCP","SCCP",
            "Modbus","MODBUS",
            "SVN","SVN",
            "RADIUS (Accounting)","RADIUS",
            "Kerberos","KERBEROS",
            "GRE","GRE",
            "UUCP-rlogin","UUCP",
            "GTP User Data Tunneling","GTP",
            "NNTPS","NNTP",
            "GTP Control","GTP",
            "IRC-default","IRC",
            "FTPS (Control)","FTPS",
            "ICCP","ICCP",
            "IRCS","IRC",
            "Telnets","TELNET", // Bare Minimum
            "Finger","FINGER",
            "ESP","ESP",
            "Rlogin","RLP",
            "IMAP3","IMAP",
            "MGCP","MGCP",
            "RADIUS Accounting (Old)","RADIUS",
            "RADIUS (Old)","RADIUS",
            "CVS","CVS",
            "Ident","IDENT",
            "Gopher","GOPHER",
            "BGMP","BGMP",
            "FTPS (Data)","FTPS",
            "POP2","POP",
            "TLISRV","TLISRV",
            "INGRES-NET","INGRES-NET",
            "IPIP","IPIP",
            "XTP","XTP",
            "UUCP","UUCP",
            "IRC","IRC",
            "Photuris (ICMP)","ICMP",
            "TACACS-DS","TACACS-DS",
            "WESP","WESP",
            "EGP","EGP",
            "WSN","WSN",
            "XDMCP","XDMCP",
            "Kerberos IV","KERBEROS",
            "IRTP","IRTP",
            "TTP","TTP",
            "IRC-SERV","IRC",
            "I-NLSP","NLSP",
            "SNP","SNP",
            "XNS-IDP","XNS",
            "SECURE-VMTP","VMTP",
            "VMTP","VMTP",
            "IPLT","IPLT",
            "GGP","GGP",
            "MFE-NSP","NSP",
            "HIP","HIP",
            "MERIT-NSP","NSP",
            "NSFNET-IGP","IGP",
            "DCN-MEAS","DCN",
            "STP","STP",
            "SRP","SRP",
            "HMP","HMP",
            "XNET","XNET",
            "VRRP","VRRP",
            "ENCAP","ENCAP",
            "CPNX","CPNX",
            "PTP","PTP",
            "SKIP","SKIP",
            "SCPS","SCPS",
            "Sprite-RPC","RPC",
            "IPv6 ICMP","ICMP",
            "MUX","MUX",
            "CHAOS","CHAOS",
            "SSCOPMCE","SSCOPMCE",
            "CBT","CBT",
            "SPS","SPS",
            "ETHERIP","ETHERIP",
            "MTP","MTP",
            "ROHC","ROHC",
            "CRTP","CRTP",
            "PNNI","PNNI",
            "NETBLT","NETBLT",
            "TLSP","TLSP",
            "IDPR","IDPR",
            "DDX","DDX",
            "PUP","PUP",
            "DSR","DSR",
            "NARP","NARP",
            "CPHB","CPHB",
            "SMP","SMP",
            "L2TP","L2TP",
            "IPv6 ICMP/143/0","ICMP",
            "MICP","MICP",
            "GMTP","GMTP",
            "LARP","LARP",
            "IFMP","IFMP",
            "IGP","IGP",
            "CFTP","CFTP",
            "PGM","PGM",
            "DDP","DDP",
            "PIPE","PIPE",
            "IATP","IATP",
            "IGMP","IGMP",
            "3PC","3PC",
            "DGP","DGP",
            "TCF","TCF",
            "UTI","UTI",
            "DCCP","DCCP",
            "SWIPE","SWIPE",
            "EMCON","EMCON",
            "PIM","PIM",
            "RVD","RVD",
      ];
    let ActionLookup=datatable(DeviceAction:string,DvcAction:string,EventResult:string,EventSeverity:string)
    [
              "Allow","Allow","Success","Informational",          
              "Discard","Drop","Failure","Low",
              "Permit","Allow","Success","Informational",          
              "Refuse","Deny","Failure","Low",
              "Terminate","Reset Source","Failure","Low",          
              "Terminate (failed)","","Failure","Low",
              "Terminate (passive)","Reset Destination","Failure","Low",          
              "Terminate (reset)","Reset","Failure","Low",
              "Wait for Authentication","","Success","Informational",
              "Wait for Further Actions","","Success","Informational",          
              "Wait for RPC Reply","","Success","Informational"
    ];
    let SubTypeLookup=datatable(DeviceEventClassID:string,EventSubType:string,DvcAction:string,EventResult:string,EventSeverity:string) //Add more codes if needed
    [
              "70018","Start","Allow","Success","Informational",          
              "70019","End","Deny","Failure","Low", 
              "70021","End","Reset","Failure","Low",          
              "70022","End","Reset","Failure","Low"
    ];
    let EventResultMapping = datatable (Message:string, DvcAction:string, EventResult:string, EventResultDetails:string, EventOriginalResultDetails:string)  
    [
            "Connection dropped", "Drop", "Failure","Terminated", "Connection dropped",
            "Connection removed because NGFW Engine is low on memory.","Drop", "Failure","Terminated","Connection removed because NGFW Engine is low on memory.",
            "Connection timeout in state TCP_CLOSE_WAIT", "", "Success", "Timeout",	"One end of the Connection waits for the FIN packet (passive close).",
            "Connection timeout in state TCP_CLOSE_WAIT_ACK", "", "Success", "Timeout", "One end of the Connection waits for the FIN packet (passive close)",
            "Connection timeout in state TCP_CLOSING", "", "Success", "Timeout", "Closing packet (FIN) sent by one end of the Connection (simultaneous).",
            "Connection timeout in state TCP_CLOSING_ACK", "", "Success", "Timeout", "Waiting for ACK for the FIN before going to closing status (active close).",
            "Connection timeout in state TCP_ESTABLISHED", "", "Failure", "Timeout", "Normal status of TCP Connections for data transfer.",
            "Connection timeout in state TCP_FIN_WAIT_1", "", "Success", "Timeout",	"One end of the Connection waits for sending the FIN packet (active close).",
            "Connection timeout in state TCP_FIN_WAIT_2", "", "Success", "Timeout", "One end of the Connection waits for receiving ACK packet.",
            "Connection timeout in state TCP_LAST_ACK", "",	"Success", "Timeout", "One end of the Connection sent a FIN packet (passive close).",
            "Connection timeout in state TCP_LAST_ACK_WAIT", "", "Failure",	"Timeout", "Waiting for the FIN packet to be acknowledged.",
            "Connection timeout in state TCP_SYN_ACK_SEEN", "", "Failure",	"Timeout", "Second phase of the TCP three-way handshake, the server has replied to client sent SYN with SYN+ACK, next status will be established.",
            "Connection timeout in state TCP_SYN_FIN_SEEN", "",	"Success", "Timeout", "T/TCP (Transactional TCP) Connection, RFC 1644.",
            "Connection timeout in state TCP_SYN_RETURN", "", "Failure", "Timeout", "Received simultaneous SYN from the other end (simultaneous open).",
            "Connection timeout in state TCP_SYN_SEEN", "", "Failure", "Timeout", "First packet sent by one end of the Connection.",
            "Connection timeout in state TCP_TIME_WAIT", "", "Success", "Timeout", "One end of the Connection acknowledged closing packet (FIN).",
            "Connection timeout in state TCP_TIME_WAIT_ACK", "", "Failure",	"Timeout", "Waiting for ACK for the FIN status before going to time wait status (active close).",
            "Connection timeout in state ICMP_ECHO", "", "Failure", "Timeout", "Ping reply is expected.",
            "Connection timeout in state ICMP_REPLY_WAIT", "", "Failure", "Timeout", "Other ICMP request or reply types.",
            "Connection was reset by client", "Reset Source", "Failure","Reset", "",
            "Connection was reset by server", "Reset Destination", "Failure","Reset", "",
            "invalid packet (CT)", "", "Failure", "Invalid TCP", "",
            "not a (valid) SYN packet [A] (CT)", "", "Failure", "Invalid TCP", "",
            "not a (valid) SYN packet [FA] (CT)", "", "Failure", "Invalid TCP", "",
            "not a (valid) SYN packet [FPA] (CT)", "", "Failure", "Invalid TCP", "",
            "not a (valid) SYN packet [PA] (CT)", "", "Failure", "Invalid TCP", "",
            "not a (valid) SYN packet [RA] (CT)", "", "Failure", "Invalid TCP", "",
            "not a (valid) SYN packet [SA] (CT)", "", "Failure", "Invalid TCP", "",
            "TCP state violation","Deny","Failure", "Invalid TCP", "",
            "TCP state violation: Connection end-point replied with ACK to SYN-packet. Connection refused.", "Deny", "Failure", "Invalid TCP", "",
            "TSC error: Query timed out", "", "Failure", "Timeout", ""
    ];
    let parser = (disabled:bool) 
    { 
      CommonSecurityLog
            | where not(disabled)
            | where DeviceFacility !in ("Management","Authentication") // Add Filters here for Network Session data. Right now removing the known Audit events only
            | where DeviceVendor=="FORCEPOINT" and DeviceProduct=="Firewall"
            | where isnotempty(Message)
            | lookup ActionLookup on DeviceAction
            | lookup ProtocolLookup on Protocol
            | lookup SubTypeLookup on DeviceEventClassID
            | lookup EventResultMapping on Message
            | extend DvcAction = coalesce(DvcAction,DvcAction1, DvcAction2), 
                     EventResult = coalesce(EventResult, EventResult1, EventResult2), 
                     EventSeverity = coalesce(EventSeverity, EventSeverity1)
            | project-away DvcAction1, EventSeverity1, EventResult1, DvcAction2, EventResult2
            | lookup ApplicationProtocolLookup on ApplicationProtocol
            | extend 
                    EventCount = toint(1),
                    EventType = "NetworkSession",
                    EventSchema = "NetworkSession",
                    EventSchemaVersion = "0.2.6"
            | parse-kv AdditionalExtensions as (
                        requestURL:string
                    ) with (pair_delimiter=';', kv_delimiter='=')
            | project-rename
                    EventVendor = DeviceVendor,
                    EventProduct = DeviceProduct,
                    EventOriginalType = DeviceEventClassID,
                    DstPortNumber = DestinationPort,
                    DstIpAddr = DestinationIP,
                    SrcPortNumber = SourcePort,
                    SrcIpAddr = SourceIP,
                    DstNatIpAddr = DestinationTranslatedAddress,
                    DstNatPortNumber = DestinationTranslatedPort,
                    SrcNatIpAddr = SourceTranslatedAddress,
                    SrcNatPortNumber = SourceTranslatedPort,
                    EventProductVersion = DeviceVersion,
                    EventMessage = Message,
                    DvcOriginalAction = DeviceAction,
                    SrcBytes = SentBytes,
                    DstBytes = ReceivedBytes,
                    EventOriginalSubType = DeviceFacility,
                    DvcId = DeviceExternalID,
                    DvcInboundInterface = DeviceInboundInterface,
                    DvcOutboundInterface = DeviceOutboundInterface,
                    DvcIpAddr = DeviceAddress,
                    EventOriginalSeverity = LogSeverity,
                    DvcDomain = Computer        
            | extend
                    EventStartTime = todatetime(ReceiptTime),
                    EventEndTime = todatetime(ReceiptTime),
                    boolHasIP = iif(indexof_regex(requestURL,@"(\d+.\d+.\d+.\d+)") == -1, false, true),
                    boolHasPort = iif(requestURL has ':', true, false)
            | extend 
                     NetworkRuleName = coalesce(DeviceCustomString1, //RuleId
                                                DeviceCustomString2), //NatRuleId
                     ThreatId = coalesce(DeviceCustomString3, //VulnerabilityReferences
                                        DeviceCustomString4), //VirusId
                     DstDomain = case(
                                    boolHasPort and not(boolHasIP), tostring(split(requestURL,':',0)[0]),
                                    not(boolHasIP), requestURL,
                                    ""
                                ),
                     DstIpAddr = case(
                                    isnotempty(DstIpAddr), DstIpAddr,
                                    not(boolHasIP), requestURL,
                                    ""
                                )
            | extend
                     DvcIdType = case(
                                    isnotempty(DvcId), "Other",
                                    ""
                                ),
                     DvcDomainType = case (
                                    isnotempty(DvcDomain), "FQDN",
                                    ""
                                ),
                     DstDomainType = case(
                                    isnotempty(DstDomain), "FQDN",
                                    ""  
                                ),
                     DstPortNumber = case(
                                    isnotempty(DstPortNumber), DstPortNumber,
                                    ApplicationProtocol startswith "TCP", toint(split(ApplicationProtocol,'/')[1]),
                                    ApplicationProtocol startswith "UDP", toint(split(ApplicationProtocol,'/')[1]),
                                    boolHasPort, toint(split(requestURL,':',0)[1]),
                                    int(null)
                            ),
                     AdditionalFields = pack("RequestMethod",iff(isnotempty(RequestMethod) and RequestMethod != "UNKNOWN", RequestMethod, ""),
                                             "Activity",Activity),
                     ThreatName = case(isnotempty(ThreatId),DeviceEventCategory,
                                      ""),
                     DstAppName = case(DestinationServiceName in~ ("Generic-Web-HTTP","Application-Unknown","Unknown-Encrypted-Application"), "",
                                        DestinationServiceName),
                     DvcIpAddr = coalesce(DvcIpAddr,DeviceName)
            | extend
                    EventSeverity = case(isnotempty(EventSeverity),EventSeverity,
                                         isnotempty(ThreatName), "High",
                                         "Informational"),
                    Dvc = DvcIpAddr,
                    IpAddr = SrcIpAddr,
                    Rule = NetworkRuleName,
                    Dst = DstIpAddr,
                    Src = SrcIpAddr,
                    DvcInterface = DvcInboundInterface
            | project-away AdditionalExtensions, CommunicationDirection, Device*, Destination*, EndTime, ExternalID, File*, Flex*, IndicatorThreatType, Malicious*, Old*, OriginalLogSeverity, Process*, Protocol, ReceiptTime, Remote*, ReportReferenceLink, Request*, SimplifiedDeviceAction, Source*, StartTime, TenantId, ThreatConfidence, ThreatDescription, ThreatSeverity, ExtID, EventOutcome, FieldDevice*, Reason, ApplicationProtocol, Activity, requestURL, boolHas*
        };
        parser(disabled=disabled)