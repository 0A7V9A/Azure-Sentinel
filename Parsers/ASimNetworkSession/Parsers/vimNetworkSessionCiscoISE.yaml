Parser:
  Title: Network Session ASIM parser for Cisco ISE
  Version: '1.0'
  LastUpdated: June 20, 2023
Product:
  Name: Cisco ISE
Normalization:
  Schema: NetworkSession
  Version: '0.2.6'
References:
  - Title: ASIM Network Session Schema
    Link: https://aka.ms/ASimNetworkSessionDoc
  - Title: ASIM
    Link: https://aka.ms/AboutASIM
  - Title: Organization Application Security Events 
    Link: https://www.cisco.com/c/en/us/td/docs/security/ise/3-2/admin_guide/b_ise_admin_3_2/b_ISE_admin_32_maintain_monitor.html#ID58
Description: |
  This ASIM parser supports normalizing Cisco ISE Events produced by the Microsoft Sentinel Cisco ISE connector to the ASIM Network Session normalized schema.
ParserName: vimNetworkSessionCiscoISE                                 
EquivalentBuiltInParser: _Im_NetworkSession_CiscoISE                                 
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: ipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstportnumber
    Type: int
    Default: int(null)
  - Name: hostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: dvcaction
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
    let fail_token = dynamic(["dropped", "fail", "failure", "failed", "error", "lost connection"]);
    let EventName=datatable(EventOriginalType:string, EventMessage:string, EventOriginalResultDetails:string)["25023","LDAP connect to domain controller succeeded","LDAP connect to domain controller succeeded","25024","LDAP connect to domain controller failed","LDAP connect to domain controller failed","25025","LDAP connect to global catalog succeeded","LDAP connect to domain controller succeeded","25026","LDAP connect to global catalog failed","LDAP connect to domain controller failed","25027","RPC connect to domain controller succeeded Message Description: RPC connect to domain controller succeeded","RPC connect to domain controller succeeded","25028","RPC connect to domain controller failed","RPC connect to domain controller failed","25029","KDC connect to domain controller succeeded","KDC connect to domain controller succeeded","25030","KDC connect to domain controller failed","KDC connect to domain controller failed","25100","Connecting to external REST ID store server","ISE is going to establish a new connection to external REST ID store server","25101","Successfully connected to external REST ID store server","ISE successfully connect to external REST ID store server","25102","Connection to external REST database failed","ISE failed to establish a new connection to external REST database","60188","An attempted SSH connection has failed","An attempted SSH connection has failed","60234","The SXP connection has been disconnected","The SXP connection has been disconnected","60235","SXP connection succeeded","SXP connection succeeded","60236","SXP connection failed","SXP connection failed","61010","ISE has established connection to APIC","ISE has established connection to APIC","61011","ISE was disconnected from APIC","ISE was disconnected from APIC","61025","Open secure connection with TLS peer","Secure connection established with TLS peer","61026","Shutdown secure connection with TLS peer","Secure connection with TLS peer shutdown","60509","ERS request was denied as maximum possible connection was exceeded","ERS request was denied as maximum possible connection was exceeded","61231","Kafka connection to ACI error while receiving message","Kafka connection to ACI error while receiving message","61232","Kafka connection to ACI error while sending message","Kafka connection to ACI error while sending message","89003","Failed to connect to MDM server","Failed to connect to MDM server","24000","Connection established with LDAP server","Connection established with LDAP server","24001","Cannot establish connection with LDAP server","Cannot establish connection with LDAP server","24019","LDAP connection error was encountered","ISE cannot connect to LDAP external ID store","24030","SSL connection error was encountered","SSL connection error was encountered","24400","Connection to ISE Active Directory agent established successfully","Connection to ISE Active Directory agent established successfully","24401","Could not establish connection with ISE Active Directory agent","Could not establish connection with ISE Active Directory agent","24428","Connection related error has occurred in either LRPC, LDAP or KERBEROS","This RPC connection problem may be because the stub received incorrect data","24429","Could not establish connection with Active Directory","Could not establish connection with Active Directory","24849","Connecting to external ODBC database","ISE is going to establish a new connection to external ODBC database","24850","Successfully connected to external ODBC database","ISE successfully established a new connection to external ODBC database","24851","Connection to external ODBC database failed","ISE failed to establish a new connection to external ODBC database","33208","Result for testing connection against AD","ISE reports on test connection against active directory server.","33209","Result for testing connection against LDAP","ISE reports on test connection against LDAP server.","33210","LDAP traffic info","LDAP traffic info against LDAP server.","34120","Profiler failed to get the connection to NAC Manager","Profiler sends a notification event to NAC Manager, but the notification fails because could not connect to NAC Manager","34147","JGroups TLS Handshake Failed","JGroups TLS Handshake Failed","34148","JGroups TLS Handshake Succeeded","JGroups TLS Handshake Succeeded","34149","HTTPS TLS Handshake Failed","HTTPS TLS Handshake Failed","34150","HTTPS TLS Handshake Succeeded","HTTPS TLS Handshake Succeeded","34159","LDAPS connection established successfully","LDAPS connection established successfully","34160","LDAPS connection terminated successfully","LDAPS connection terminated successfully","34161","LDAPS connection establishment failed with SSL error","LDAPS connection establishment failed with SSL error","34162","LDAPS connection terminated with SSL error","LDAPS connection terminated with SSL error","34163","LDAPS connection establishment failed with non-SSL error","LDAPS connection establishment failed with non-SSL error","34164","LDAPS connection terminated with non-SSL error","LDAPS connection terminated with non-SSL error","90062","Cannot connect to Domain Controller","Cannot connect to Domain Controller","90063","Successfully establish connection to Domain Controller","Successfully establish connection to Domain Controller","90066","Lost connection with Domain Controller","Lost connection with Domain Controller","90078","Closed connection to Domain Controller","Closed connection to Domain Controller","91082","RADIUS DTLS: Connection to OCSP server failed","RADIUS DTLS: Connection attempt to OCSP server failed.","11317","TrustSec SSH connection failed","ISE failed to establish SSH connection to a network device. Verify network device SSH credentials in the Network Device page are similar to the credentials configured on the network device. Check network device enabled ssh connections from ISE (ip address)","5405","RADIUS Request dropped","RADIUS request dropped","5406","TACACS+ Request dropped","TACACS+ request dropped"];
    let CiscoISENSParser = (
        starttime:datetime=datetime(null), 
        endtime:datetime=datetime(null),
        srcipaddr_has_any_prefix:dynamic=dynamic([]), 
        dstipaddr_has_any_prefix:dynamic=dynamic([]), 
        ipaddr_has_any_prefix:dynamic=dynamic([]),
        dstportnumber:int=int(null), 
        hostname_has_any:dynamic=dynamic([]), 
        dvcaction:dynamic=dynamic([]), 
        eventresult:string='*', 
        disabled:bool=false){
        let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); 
        let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);
        let ip_any = set_union(srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix); 
        Syslog
        | where not(disabled)
        | where ProcessName has_any ("CISE", "CSCO")
        | extend EventOriginalType = extract(@".*\d{10}\s(\d{4,5})\s.*", 1, SyslogMessage)
        //***************************** <Prefiltering> **************************
        | where (isnull(starttime) or TimeGenerated>=starttime) 
            and (isnull(endtime) or TimeGenerated<=endtime) 
            and not(disabled)
            and (array_length(hostname_has_any) == 0)
            and (array_length(dvcaction) == 0)
            and (EventOriginalType in ("25023","25024","25025","25026","25027","25028","25029","25030","25100","25101","25102","60188","60234","60235","60236","61010","61011","61025","61026","60509","61231","61232","89003","24000","24001","24019","24030","24400","24401","24428","24429","24849","24850","24851","33208","33209","33210","34120","34147","34148","34149","34150","34159","34161","34161","34162","34163","34164","90062","90063","90066","90078","91082","11317","5405", "5406"))
            and (array_length(ip_any)==0 or has_any_ipv4_prefix(SyslogMessage,ip_any)) 
            and (isnull(dstportnumber) or SyslogMessage has (strcat('DestinationPort=', tostring(dstportnumber))))
        | lookup EventName on EventOriginalType
        | extend EventOriginalSeverity = extract(@".*(NOTICE|INFO|WARN|WARNING|ERROR|FATAL|DEBUG).*", 1, SyslogMessage)
        | extend EventSeverity = case(EventOriginalSeverity in ("ERROR", "FATAL", "DEBUG") or EventOriginalResultDetails has_any (fail_token), "Low", "Informational")
        | extend EventResult = case(EventSeverity == "Low" or EventOriginalResultDetails has "dropped", "Failure", "Success")
        | where (eventresult == "*" or eventresult == EventResult)
        //**************************** </Prefilterring> **************************
        | extend 
                EventVendor = "Cisco"
                , EventProduct = "ISE"
                , EventProductVersion = "3.2"
                , EventCount = int(1)
                , EventSchema = "NetworkSession"
                , EventSchemaVersion = "0.2.6"
                , EventStartTime = coalesce(EventTime, TimeGenerated)
                , EventEndTime = coalesce(EventTime, TimeGenerated)
                , EventType = "NetworkSession"
        | parse-kv SyslogMessage as (FailureReason: string, NetworkDeviceName: string, DestinationIPAddress: string, DestinationPort: int, ['Remote-Address']: string, ['Device IP Address']:string, ['User-Name']: string, UserName: string, User: string, ['Device Port']: int, Protocol: string) with (pair_delimiter=',', kv_delimiter='=')
        | project-rename DstIpAddr=DestinationIPAddress
                , DstPortNumber=DestinationPort
                , SrcPortNumber=['Device Port']
                , NetworkApplicationProtocol=Protocol
        | extend DstUsername = coalesce(UserName, ['User-Name'], User)
        , DvcHostname = coalesce(NetworkDeviceName, Computer, HostName)
        , EventOriginalResultDetails = case(isnotempty(FailureReason), FailureReason, EventOriginalResultDetails)
        , SrcIpAddr = case(isnotempty(['Device IP Address']), ['Device IP Address'],
                            SyslogMessage matches regex @"Caller-Station-ID=\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}", extract(@"Caller-Station-ID=(\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3})", 1, SyslogMessage),
                            ['Remote-Address'])
        | project-away FailureReason, NetworkDeviceName, ['User-Name'], UserName, User, ['Device IP Address'], ['Remote-Address']
        | extend 
            DvcIpAddr = extract(@"(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})", 1, Computer)
            , DstMacAddr = tostring(extract(@"Called-Station-ID=([a-fA-F0-9\-:]{17}),", 1, SyslogMessage))
            , DstUsernameType = 'Simple'
            , SrcMacAddr = coalesce(replace_string(tostring(extract(@"Caller-Station-ID=([a-fA-F0-9\-:]{17})", 1, SyslogMessage)), "-", ":"), tostring(extract(@"device-mac=(.*?),", 1, SyslogMessage)))
        //********************** <Aliaces>* ***********************
        | extend 
                Dvc = coalesce(DvcHostname, DvcIpAddr)
                , IpAddr = SrcIpAddr
                , Dst = DstIpAddr
                , Src = SrcIpAddr
                , User = DstUsername
        //********************** </Aliases> ***********************
        | project-away TenantId, SourceSystem, MG, Computer, EventTime, Facility, HostName, SeverityLevel, SyslogMessage, HostIP, ProcessName, ProcessID, _ResourceId
        };
    CiscoISENSParser(starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, dstipaddr_has_any_prefix=dstipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, dstportnumber=dstportnumber, hostname_has_any=hostname_has_any, dvcaction=dvcaction, eventresult=eventresult, disabled=disabled)