Parser:
  Title: Network Session ASIM filtering parser for Barracuda WAF
  Version: '0.1'
  LastUpdated: Jun 13 2023
Product:
  Name: Barracuda WAF
Normalization:
  Schema: NetworkSession
  Version: '0.2.6'
References:
- Title: ASIM Network Session Schema
  Link: https://aka.ms/ASimNetworkSessionDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
- Title: Logs type Description in Barracuda WAF
  Link: https://campus.barracuda.com/product/webapplicationfirewall/doc/78810008/types-of-logs/
Description: |
  This ASIM parser supports filtering and normalizing Barracuda WAF logs to the ASIM Web Session normalized schema.
ParserName: vimNetworkSessionBarracudaWAF
EquivalentBuiltInParser: _Im_NetworkSession_BarracudaWAF
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: ipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstportnumber
    Type: int
    Default: int(null)
  - Name: hostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: dvcaction
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let protocollookup = datatable(
      Protocol_s: string,
      NetworkProtocol: string,
      NetworkProtocolVersion: string
  )[
      "TCP", "TCP", "",
      "TCP/ip", "TCP", "",
      "UDP", "UDP", "",
      "UDP/ip", "UDP", "",
      "ICMP", "ICMP", "IPV4",
      "ICMPv6", "ICMP", "IPV6",
  ];
  let SeverityLookup = datatable (severity: int, EventSeverity: string)
      [
      0, "High", 
      1, "High", 
      2, "High", 
      3, "Medium",
      4, "Low",
      5, "Low", 
      6, "Informational",
      7, "Informational" 
  ];
  let EventResultLookup = datatable (ActionID_s: string, EventResult: string)
      [
      "ALLOW", "Success",
      "DENY", "Failure"
  ];
  let parser=(
      starttime: datetime=datetime(null), 
      endtime: datetime=datetime(null),
      srcipaddr_has_any_prefix: dynamic=dynamic([]), 
      dstipaddr_has_any_prefix: dynamic=dynamic([]),
      ipaddr_has_any_prefix: dynamic=dynamic([]),
      dstportnumber: int=int(null), 
      hostname_has_any: dynamic=dynamic([]),
      dvcaction: dynamic=dynamic([]), 
      eventresult: string='*', 
      disabled: bool=false) {
      let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); 
      let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);  
      barracuda_CL
      | where not(disabled)
          and LogType_s == "NF"
      | extend EventStartTime = unixtime_milliseconds_todatetime(tolong(DeviceReceiptTime_s))
      | extend EventEndTime = EventStartTime
      | where (isnull(starttime) or EventStartTime >= starttime)
          and (isnull(endtime) or EventEndTime <= endtime)
      | extend
          temp_SrcMatch=has_any_ipv4_prefix(SourceIP, src_or_any),
          temp_DstMatch=has_any_ipv4_prefix(DestinationIP_s, dst_or_any)
      | extend ASimMatchingIpAddr=case(
                                  array_length(src_or_any) == 0 and array_length(dst_or_any) == 0,
                                  "-",
                                  temp_SrcMatch and temp_DstMatch,
                                  "Both",
                                  temp_SrcMatch,
                                  "SrcIpAddr",
                                  temp_DstMatch,
                                  "DstIpAddr",
                                  "No match"
                              )
      | where ASimMatchingIpAddr != "No match"
          and (array_length(hostname_has_any) == 0 or host_s has_any (hostname_has_any))
      | where (isnull(dstportnumber) or (DestinationPort_d == dstportnumber))
          and (array_length(dvcaction) == 0 or ActionID_s has_any(dvcaction))
      | extend 
          severity = toint(Severity_s)
      | lookup EventResultLookup on ActionID_s
      | lookup SeverityLookup on severity
      | lookup protocollookup on Protocol_s
      | extend
          EventCount = toint(1),
          EventProduct = "WAF",
          EventSchema = "NetworkSession",
          EventSchemaVersion = "0.2.6",
          EventType = "NetworkSession",
          EventVendor = "Barracuda"
      | extend
          Dvc = column_ifexists("UnitName_s", ""),
          DvcAction = column_ifexists("ActionID_s", ""),
          DstIpAddr = column_ifexists("DestinationIP_s", ""),
          SrcIpAddr = column_ifexists("SourceIP", ""),
          DvcHostname = column_ifexists("host_s", ""),
          DvcIpAddr = column_ifexists("HostIP_s", ""),                            
          DstPortNumber = toint(column_ifexists("DestinationPort_d", "")),
          SrcPortNumber = toint(column_ifexists("SourcePort_d", "")),
          EventOriginalType = "Network Firewall"
      | extend
          IpAddr = SrcIpAddr,
          SrcHostname = SrcIpAddr,
          Src = SrcIpAddr,
          Dst=DstIpAddr,
          DstHostname = DstIpAddr
      | extend Hostname = DstHostname
      | project-away
          *_d,
          *_s,
          _ResourceId,
          severity,
          RawData,
          Message,
          Computer,
          MG,
          ManagementGroupName,
          TenantId,
          SourceSystem,
          temp_SrcMatch,
          temp_DstMatch,
          SourceIP
  };
  parser(
      starttime=starttime, 
      endtime=endtime, 
      srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, 
      dstipaddr_has_any_prefix=dstipaddr_has_any_prefix, 
      ipaddr_has_any_prefix=ipaddr_has_any_prefix,
      dstportnumber=dstportnumber,
      hostname_has_any=hostname_has_any, 
      dvcaction=dvcaction,
      eventresult=eventresult, 
      disabled=disabled
  )