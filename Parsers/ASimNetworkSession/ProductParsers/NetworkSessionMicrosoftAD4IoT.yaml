Parser:
  Title: ASIM Azure Defender for IoT Network Sessions Parser
  Version: '0.0'
  LastUpdated: Aug 4, 2021
Product:
  Name: Azure Defender for IoT
Normalization:
  Schema: NetworkSessions
  Version: '0.2.0'
References:
- Title: ASIM Network Session Schema
  Link: https://aka.ms/AzSentinelNetworkSessionDoc
- Title: ASIM
  Link: https:/aka.ms/AzSentinelNormalization
Description: |
  ASIM Azure Defender for IoT Network Sessions Parser.
ParserName: vimNetworkSessionAD4IoT
ParserQuery: |
  let DirectionNetworkEvents =
    SecurityIoTRawEvent 
    | where RawEventName == "NetworkActivity"
    | parse EventDetails with * ',"LocalPort":' LocalPort:int ',"RemotePort":' RemotePort:int ',' *
    | extend outbound = LocalPort > RemotePort
  ;
  let parser = (T: (EventDetails: string)) {
    T 
     | parse EventDetails with 
      '{"LocalAddress":"' LocalAddress:string '",'
      '"RemoteAddress":"' RemoteAddress:string '",'
      *
      '"BytesIn":' BytesIn:int ','
      '"BytesOut":' BytesOut:int ','
      '"Protocol":"' Protocol:string '",'
      '"ProcessId":' ProcessId:int ','
      '"UserId":' UserId:int ','
      '"ApplicationProtocol":"' ApplicationProtocol:string '",'
      * // '"AzureResourceId":"' AzureResourceId:string '",'
      '"DeviceId":"' DeviceId:string '",'
      '"MessageSource":"' MessageSource:string '",'
      '"OriginalEventId":"' OriginalEventId:string '",'
      '"TimestampUTC":"' TimestampUTC:datetime '",'
      *
  }
  ; 
  let OutboundNetworkEvents = 
    DirectionNetworkEvents
    | where outbound
    | invoke parser ()
    | project-rename
       SrcBytes = BytesOut,
       DstBytes = BytesIn,
       SrcIpAddr = LocalAddress,
       SrcPortNumber = LocalPort,
       DstIpAddr = RemoteAddress,
       DstPortNumber = RemotePort,
       SrcProcessId = ProcessId
    | extend
       SrcDvcIdType = "AD4IoTid",
       SrcDvcId = DeviceId,
       Process = SrcProcessId, // alias
       SrcDvcOs = iif (MessageSource == "Linux", "Linux", "Windows")
  ;
  let InboundNetworkEvents = 
    DirectionNetworkEvents
    | where not(outbound)
    | invoke parser ()
    | project-rename
       DstBytes = BytesOut,
       SrcBytes = BytesIn,
       DstIpAddr = LocalAddress,
       DstPortNumber = LocalPort,
       SrcIpAddr = RemoteAddress,
       SrcPortNumber = RemotePort,
       DstProcessId = ProcessId
     | extend
       DstDvcIdType = "AD4IoTid",
       DstDvcId = DeviceId,
       Process = DstProcessId, // alias
       DstDvcOs = iif (MessageSource == "Linux", "Linux", "Windows")
  ;
  let NetworkSessionAD4IoT = 
    union InboundNetworkEvents, OutboundNetworkEvents
     | extend
      EventCount = int(1),
      EventProduct = 'Azure Defender for IoT', 
      EventVendor = 'Microsoft',
      EventSchemaVersion = '0.2.0',
      EventSchena = "NetworkSession", 
      EventType = 'NetworkSession',
      EventStartTime = TimeGenerated, // Open question about timestamps
      EventEndTime = TimeGenerated,  // Open question about timestamps
      EventResult = 'Success'
    | project-rename
       EventProductVersion = AgentVersion, // Not available in Windows
       _ResourceId = AssociatedResourceId, 
       _SubscriptionId = AzureSubscriptionId, 
      EventOriginalUid = OriginalEventId,  // OK pending question
      DvcOs = MessageSource,
      NetworkProtocol = Protocol,
      NetworkApplicationProtocol = ApplicationProtocol,
      DvcId = DeviceId
    | extend
      Dvc = DvcId,
      DvcIdType = "AD4IoTid"
  ;
  NetworkSessionAD4IoT
