{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspaceName": {
      "type": "string"
    },
    "location": {
      "type": "string"
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('workspaceName')]",
      "location": "[parameters('location')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "vimNetworkSessionMicrosoftWindowsFirewall",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('workspaceName'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "Microsoft Windows Firewall Network Sessions",
            "category": "Security",
            "FunctionAlias": "vimNetworkSessionMicrosoftWindowsFirewall",
            "query": "// Data tables for mapping raw values into string\n  let LayerCodeTable = datatable (LayerCode:string,LayerName:string)[\n                '%%14596', 'IP Packet',\n                '%%14597', 'Transport',\n                '%%14598', 'Forward',\n                '%%14599', 'Stream',\n                '%%14600', 'Datagram Data',\n                '%%14601', 'ICMP Error',\n                '%%14602', 'MAC 802.3',\n                '%%14603', 'MAC Native',\n                '%%14604', 'vSwitch',\n                '%%14608', 'Resource Assignment',\n                '%%14609', 'Listen',\n                '%%14610', 'Receive/Accept',\n                '%%14611', 'Connect',\n                '%%14612', 'Flow Established',\n                '%%14614', 'Resource Release',\n                '%%14615', 'Endpoint Closure',\n                '%%14616', 'Connect Redirect',\n                '%%14617', 'Bind Redirect',\n                '%%14624', 'Stream Packet'];\n  let ProtocolTable = datatable (Protocol:int, NetworkProtocol: string)[\n                1, 'ICMP',\n                3, 'GGP',\n                6, 'TCP',\n                8, 'EGP',\n                12, 'PUP',\n                17, 'UDP',\n                20, 'HMP',\n                27, 'RDP',\n                46, 'RSVP',\n                47, 'PPTP data over GRE',\n                50, 'ESP',\n                51, 'AH',\n                66, 'RVD',\n                88, 'IGMP',\n                89, 'OSPF'];\n  let Directions = datatable (DirectionCode:string,NetworkDirection:string, isOutBound:bool)[\n              '%%14592', 'Inbound', false,\n              '%%14593', 'Outbound', true,\n              '%%14594', 'Forward',false,\n              '%%14595', 'Bidirectional', false];\n  ///////////////////////////////////////////////////////\n  // this query extract data fields from EventData column from SecurityEvent table\n  ///////////////////////////////////////////////////////\n  let WindowsFirewall_SecurityEvent=(){ // Event IDs between (5151 .. 5159)\n  // will be extracting Event specific fields from 'EventData' field\n  let SecurityEvent_5154 =\n  SecurityEvent\n  | where EventID == 5154\n  | parse EventData with * '<Data Name=\"ProcessId\">'ProcessId'</Data>' *\n                          '<Data Name=\"Application\">'Application'</Data>'*\n                          '<Data Name=\"SourceAddress\">'SourceAddress'</Data>'*\n                          '<Data Name=\"SourcePort\">'SourcePort'</Data>'*\n                          '<Data Name=\"Protocol\">'Protocol'</Data>'*\n                          '<Data Name=\"FilterRTID\">'NetworkRuleNumber'</Data>'*\n                          '<Data Name=\"LayerName\">'LayerCode'</Data>'*\n                          '<Data Name=\"LayerRTID\">'LayerRTID'</Data>'*;\n  let SecurityEvent_5156 =\n  SecurityEvent\n  | where EventID == 5156\n  | parse EventData with * '<Data Name=\"ProcessID\">'ProcessID'</Data>' *\n                          '<Data Name=\"Application\">'Application'</Data>'*\n                          '<Data Name=\"Direction\">'DirectionCode'</Data>'*\n                          '<Data Name=\"SourceAddress\">'SourceAddress'</Data>'*\n                          '<Data Name=\"SourcePort\">'SourcePort'</Data>'*\n                          '<Data Name=\"DestAddress\">'DestAddress'</Data>'*\n                          '<Data Name=\"DestPort\">'DestPort'</Data>'*\n                          '<Data Name=\"Protocol\">'Protocol'</Data>'*\n                          '<Data Name=\"FilterRTID\">'NetworkRuleNumber'</Data>'*\n                          '<Data Name=\"LayerName\">'LayerCode'</Data>'*\n                          '<Data Name=\"LayerRTID\">'LayerRTID'</Data>'*\n                          '<Data Name=\"RemoteUserID\">'RemoteUserID'</Data>'*;\n  let SecurityEvent_5157 =\n  SecurityEvent\n  | where EventID == 5157\n  | parse EventData with * '<Data Name=\"ProcessID\">'ProcessID'</Data>' *\n                          '<Data Name=\"Application\">'Application'</Data>'*\n                          '<Data Name=\"Direction\">'DirectionCode'</Data>'*\n                          '<Data Name=\"SourceAddress\">'SourceAddress'</Data>'*\n                          '<Data Name=\"SourcePort\">'SourcePort'</Data>'*\n                          '<Data Name=\"DestAddress\">'DestAddress'</Data>'*\n                          '<Data Name=\"DestPort\">'DestPort'</Data>'*\n                          '<Data Name=\"Protocol\">'Protocol'</Data>'*\n                          '<Data Name=\"FilterRTID\">'NetworkRuleNumber'</Data>'*\n                          '<Data Name=\"LayerName\">'LayerCode'</Data>'*\n                          '<Data Name=\"LayerRTID\">'LayerRTID'</Data>'*\n                          '<Data Name=\"RemoteUserID\">'RemoteUserID'</Data>'*\n                          '<Data Name=\"RemoteMachineID\">'RemoteMachineID'</Data>'*;\n  let SecurityEvent_5158 =\n  SecurityEvent\n  | where EventID == 5158\n  | parse EventData with * '<Data Name=\"ProcessId\">'ProcessId'</Data>' *\n                          '<Data Name=\"Application\">'Application'</Data>'*\n                          '<Data Name=\"SourceAddress\">'SourceAddress'</Data>'*\n                          '<Data Name=\"SourcePort\">'SourcePort'</Data>'*\n                          '<Data Name=\"Protocol\">'Protocol'</Data>'*\n                          '<Data Name=\"FilterRTID\">'NetworkRuleNumber'</Data>'*\n                          '<Data Name=\"LayerName\">'LayerCode'</Data>'*\n                          '<Data Name=\"LayerRTID\">'LayerRTID'</Data>'*;\n  let processSecurityEvent = union isfuzzy=true SecurityEvent_5154, SecurityEvent_5156, SecurityEvent_5157, SecurityEvent_5158\n  | extend \n                toint(Protocol);\n  let OutboundEvents = \n            processSecurityEvent\n            | lookup Directions on DirectionCode\n            | where isOutBound\n            | project-rename \n                    SrcAppName = Application,\n                    SrcIpAddr = SourceAddress,\n                    SrcHostId = RemoteMachineID,\n                    SrcPortNumber = SourcePort,\n                    SrcProcessId = ProcessId,\n                    DstPortNumber = DestPort,\n                    DstIpAddr = DestAddress,\n                    DstUserId = RemoteUserID\n          |  extend\n                    DstUserIdType = \"SID\";\n        let InboundEvents = \n            processSecurityEvent\n            | lookup Directions on DirectionCode\n            | where not(isOutBound)\n            | extend \n                    DstAppName = Application,\n                    DstIpAddr\t = SourceAddress,\n                    DstHostId = RemoteMachineID,\n                    DstPortNumber = SourcePort,\n                    DstProcessId = ProcessId,\n                    SrcPortNumber = DestPort,\n                    SrcIpAddr = DestAddress,\n                    SrcUserId = RemoteUserID\n            |  extend\n                    DstUserIdType = \"SID\";\n        union isfuzzy=true InboundEvents, OutboundEvents\n  };\n  //////////////////////////////////////////////////////\n  // this query extract the data from WindowsEvent table\n  //////////////////////////////////////////////////////\n  let WindowsFirewall_WindowsEvent=(){   \n      let RawFireWallEvents = \n            union isfuzzy=true WindowsEvent\n            | where EventID between (5150 .. 5159)\n            | extend \n                EventSeverity=tostring(EventData.Severity),\n                LayerCode = tostring(EventData.LayerName),\n                DirectionCode = tostring(EventData.Direction),\n                NetworkRuleNumber = tostring(EventData.FilterRTID),\n                Protocol = toint(EventData.Protocol);\n        let OutboundEvents = \n            RawFireWallEvents\n            | lookup Directions on DirectionCode\n            | where isOutBound\n            | extend \n                    SrcAppName = tostring(EventData.Application),\n                    SrcIpAddr = tostring(EventData.SourceAddress),\n                    SrcHostId = tostring(EventData.RemoteMachineID),\n                    SrcPortNumber = toint(EventData.SourcePort),\n                    SrcProcessId = tostring(EventData.ProcessId),\n                    DstPortNumber = toint(EventData.DestPort),\n                    DstIpAddr = tostring(EventData.DestAddress),\n                    DstUserId = tostring(EventData.RemoteUseID),\n                    DstUserIdType = \"SID\";\n        let InboundEvents = \n            RawFireWallEvents\n            | lookup Directions on DirectionCode\n            | where not(isOutBound)\n            | extend \n                    DstAppName = tostring(EventData.Application),\n                    DstIpAddr\t = tostring(EventData.SourceAddress),\n                    DstHostId = tostring(EventData.RemoteMachineID),\n                    DstPortNumber = toint(EventData.SourcePort),\n                    DstProcessId = tostring(EventData.ProcessID),\n                    SrcPortNumber = toint(EventData.DestPort),\n                    SrcIpAddr = tostring(EventData.DestAddress),\n                    SrcUserId = tostring(EventData.RemoteUseID),\n                    SrcUserIdType = \"SID\";\n        union isfuzzy=true InboundEvents, OutboundEvents\n        };\n  // Main query -> outputs both schemas as one normalized table\n  union isfuzzy=true WindowsFirewall_SecurityEvent, WindowsFirewall_WindowsEvent\n      | extend \n              DvcAction = iff(EventID in (5154, 5156, 5158), \"Allow\", \"Deny\"),\n              DvcHostname = Computer,\n              DvcOs = 'Windows',\n              EventType = \"NetworkSession\",\n              EventSchema = \"NetworkSession\",\n              EventSchemaVersion=\"0.2.0\",\n              EventCount=toint(1),\n              EventVendor = \"Microsoft\",\n              EventProduct = \"WindowsFirewall\",\n              EventResult = \"Success\",\n              EventStartTime = TimeGenerated,\n              EventEndTime = TimeGenerated,\n              EventOriginalUid = EventOriginId,\n              EventSeverity = \"Informational\"\n      | lookup LayerCodeTable on LayerCode\n      | lookup ProtocolTable on Protocol\n      | project-away LayerCode, DirectionCode, Protocol\n      | extend\n          Dvc = DvcHostname\n",
            "version": 1
          }
        }
      ]
    }
  ]
}