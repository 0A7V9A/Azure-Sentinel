{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('Workspace')]",
      "location": "[parameters('WorkspaceRegion')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "ASimNetworkSessionWatchGuardFirewareOS",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('Workspace'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "Network Session ASIM parser for WatchGuard Fireware OS",
            "category": "ASIM",
            "FunctionAlias": "ASimNetworkSessionWatchGuardFirewareOS",
            "query": "let Parser=(disabled:bool=false){\n  let EventLookup=datatable(DvcAction:string,EventResult:string,EventSeverity:string)\n  [\n      \"Allow\",\"Success\",\"Informational\"\n      , \"Deny\",\"Failure\",\"Low\"\n  ];\n  let SyslogParser = (Syslog:(SyslogMessage:string)) {\n      Syslog\n      | parse-kv SyslogMessage as (geo_src:string\n      , geo_dst:string\n      , src_user:string\n      , dst_user:string\n      , duration:int\n      , sent_bytes:long\n      , rcvd_bytes:long) with (pair_delimiter=' ', kv_delimiter='=', quote='\"')\n      | project-rename SrcGeoCountry = geo_src\n      , DstGeoCountry = geo_dst\n      , SrcUsername = src_user\n      , DstUsername = dst_user\n      , NetworkDuration = duration\n      , SrcBytes = sent_bytes\n      , DstBytes = rcvd_bytes\n      | extend SrcUsernameType = iif(SrcUsername has \"@\",\"UPN\",\"\")\n      | extend DstUsernameType = iif(DstUsername has \"@\",\"UPN\",\"\")\n      | parse SyslogMessage with * \"repeated \" EventCount:int \" times\" *\n      | extend EventCount = iif(isnotempty(EventCount), EventCount, toint(1))\n      | project-away SyslogMessage\n  };\n  let AllSyslog = \n  Syslog\n  | where not(disabled)\n  | where SyslogMessage has_any('msg_id=\"3000-0148\"' \n      , 'msg_id=\"3000-0149\"' \n      , 'msg_id=\"3000-0150\"'\n      , 'msg_id=\"3000-0151\"'\n      , 'msg_id=\"3000-0173\"'\n  )\n  | extend DvcAction = extract(@'\" (Allow|Deny) ', 1, SyslogMessage)\n  | lookup EventLookup on DvcAction\n  | extend NetworkProtocol = extract(@\" (tcp|udp|icmp|igmp) \", 1, SyslogMessage)\n  | parse-kv SyslogMessage as (fqdn_src_match:string, fqdn_dst_match:string) with (pair_delimiter=' ', kv_delimiter='=', quote='\"')\n  | project-rename DstDomain = fqdn_dst_match, SrcDomain = fqdn_src_match\n  | extend DstDomainType = iif(isnotempty(DstDomain),\"FQDN\",\"\")\n  | extend SrcDomainType = iif(isnotempty(SrcDomain),\"FQDN\",\"\")\n  ;\n  let Parse1 = \n  AllSyslog\n  | where NetworkProtocol !in(\"icmp\",\"igmp\") and SyslogMessage !has \"3000-0151\"\n  | parse kind=regex flags=U SyslogMessage with * @'\" (Allow|Deny) ' RuleName @\" \\d{2,5} (tcp|udp) \\d{2,5} \\d{2,5} \" SrcIpAddr \" \" DstIpAddr \" \" SrcPortNumber:int @\" \" DstPortNumber:int @\" \" *\n  | invoke SyslogParser()\n  ;\n  let Parse2 = \n  AllSyslog\n  | where NetworkProtocol !in(\"icmp\",\"igmp\") and SyslogMessage has \"3000-0151\"\n  | parse kind=regex flags=U SyslogMessage with * @'\" (Allow|Deny) ' RuleName @\" (tcp|udp) \" SrcIpAddr \" \" DstIpAddr \" \" SrcPortNumber:int @\" \" DstPortNumber:int @\" \" *\n  | invoke SyslogParser()\n  ;\n  let Parse3 = \n  AllSyslog\n  | where NetworkProtocol == \"icmp\" and SyslogMessage !has \"3000-0151\"\n  | parse kind=regex flags=U SyslogMessage with * @'\" (Allow|Deny) ' RuleName @\" \\d{2,5} icmp \\d{2,5} \\d{1,5} \" SrcIpAddr \" \" DstIpAddr \" \" * \n  | invoke SyslogParser()\n  ;\n  let Parse4 = \n  AllSyslog\n  | where NetworkProtocol == \"icmp\" and SyslogMessage has \"3000-0151\"\n  | parse kind=regex flags=U SyslogMessage with * @'\" (Allow|Deny) ' RuleName @\" icmp \" SrcIpAddr \" \" DstIpAddr \" \" * \n  | invoke SyslogParser()\n  ;\n  let Parse5 = \n  AllSyslog\n  | where NetworkProtocol == \"igmp\" and SyslogMessage !has \"3000-0151\"\n  | parse kind=regex flags=U SyslogMessage with * @'\" (Allow|Deny) ' RuleName @\" \\d{2,5} igmp \\d{2,5} \\d{1,5} \" SrcIpAddr \" \" DstIpAddr \" \" * \n  | invoke SyslogParser()\n  ;\n  union Parse1, Parse2, Parse3, Parse4, Parse5\n  | extend EventSchema = \"NetworkSession\"\n      , EventSchemaVersion = \"0.2.4\"\n      , EventVendor = \"WatchGuard\"\n      , EventProduct = \"Fireware\"\n      , EventType = \"NetworkSession\"\n      , DvcHostname = HostName\n      , NetworkProtocolVersion = case(DstIpAddr contains \".\", \"IPv4\"\n          , DstIpAddr contains \":\", \"IPv6\"\n          , \"\")\n      , NetworkProtocol = toupper(NetworkProtocol)\n      , NetworkDuration = toint(NetworkDuration * toint(1000))\n      , NetworkBytes = SrcBytes + DstBytes\n      , EventEndTime = TimeGenerated\n      , EventStartTime = TimeGenerated\n      , Src = SrcIpAddr\n      , Dst = DstIpAddr\n      , Duration = NetworkDuration\n      , User = DstUsername\n      , IpAddr = SrcIpAddr\n  | project-rename Dvc = HostName\n};\nParser (disabled)",
            "version": 1,
            "functionParameters": "disabled:bool=False"
          }
        }
      ]
    }
  ]
}