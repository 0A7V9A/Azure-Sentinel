{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "Workspace Region": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('Workspace')]",
      "location": "[parameters('Workspace Region')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "vimNetworkSessionPaloAltoCEF",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('Workspace'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "Network Session ASIM filtering parser for Palo Alto PanOS",
            "category": "ASIM",
            "FunctionAlias": "vimNetworkSessionPaloAltoCEF",
            "query": "let Actions=datatable(DeviceAction:string,DvcAction:string)\n[ \"reset client\",\"Reset Source\"\n, \"reset server\",\"Reset Destination\"\n, \"reset both\", \"Reset\"\n, \"allow\",\"Allow\"\n, \"deny\",\"Deny\"\n, \"drop\", \"Drop\"\n, \"drop ICMP\", \"Drop ICMP\"];\nlet NWParser=(starttime:datetime=datetime(null), endtime:datetime=datetime(null), srcipaddr_has_any_prefix:dynamic=dynamic([]), dstipaddr_has_any_prefix:dynamic=dynamic([]), dstportnumber:int=int(null), hostname_has_any:dynamic=dynamic([]), dvcaction:dynamic=dynamic([]), eventresult:string='*', disabled:bool=false){\nCommonSecurityLog | where not(disabled)\n| where DeviceVendor == \"Palo Alto Networks\" and DeviceProduct == \"PAN-OS\" and Activity == \"TRAFFIC\"\n  /// Prefilterring:\n  | where (isnull(starttime) or TimeGenerated>=starttime)\n  and     (isnull(endtime) or TimeGenerated<=endtime)\n  and (array_length(srcipaddr_has_any_prefix)==0 \n            or has_any_ipv4_prefix(SourceIP,srcipaddr_has_any_prefix)\n            )\n  and (array_length(dstipaddr_has_any_prefix)==0 \n            or has_any_ipv4_prefix(DestinationIP,dstipaddr_has_any_prefix)\n            )\n  and (isnull(dstportnumber) or DestinationPort==dstportnumber)\n  and (array_length(hostname_has_any)==0)\n    // dvcaction - post filterring\n    and (eventresult==\"*\" or (DeviceAction==\"allow\" and eventresult==\"Success\") or (eventresult==\"Failure\"))\n| parse AdditionalExtensions with \"PanOSPacketsReceived=\" DstPackets:long \",PanOSPacketsSent=\" SrcPackets:long \",start=\"EventStartTime \",reason=\"*\n| project-rename \n      EventProductVersion=DeviceVersion // Not Documented\n    , Dvc=DeviceName   \n    , NetworkApplicationProtocol=ApplicationProtocol\n    , SrcZone=DeviceCustomString4 \n    , DstZone=DeviceCustomString5\n    , NetworkRuleName=DeviceCustomString1\n    , SrcUsername=SourceUserName \n    , DstUsername=DestinationUserName \n    , EventOriginalSeverity=LogSeverity // not documented\n    , SrcNatIpAddr=SourceTranslatedAddress\n    , DstNatIpAddr=DestinationTranslatedAddress\n    , PaloAltoFlags=FlexString1 // Flags\n| extend\n  EventVendor=\"Palo Alto\"\n    ,EventProduct=\"PanOS\"\n    , DstBytes=tolong(ReceivedBytes) \n    , SrcBytes=tolong(SentBytes)      \n    , NetworkPackets=tolong(DeviceCustomNumber2) \n    , NetworkProtocol=toupper(Protocol)\n    , NetworkBytes=tolong(FlexNumber1)\n    , SrcUsernameType=case(isempty(SrcUsername), \"\", SrcUsername contains \"@\", \"UPN\", \"Simple\")\n    , DstUsernameType=case(isempty(DstUsername), \"\", DstUsername contains \"@\", \"UPN\", \"Simple\")\n    , EventType=\"NetworkSession\"\n    , EventCount=toint(1)\n    , EventResult=case(DeviceAction==\"allow\",\"Success\",\"Failure\")\n    , NetworkSessionId=tostring(DeviceCustomNumber1)\n    , NetworkDuration=toint(1000*DeviceCustomNumber3)\n    , EventSchemaVersion=\"0.2.1\"\n    , EventSchema=\"NetworkSession\"\n    , EventSeverity = \"Informational\"\n    , EventStartTime=coalesce(todatetime(EventStartTime), TimeGenerated)\n  | extend hostelements=split(Dvc,'.')\n  | extend DvcHostname=tostring(hostelements[0])\n        , DvcDomain=strcat_array( array_slice(hostelements,1,-1), '.')\n  | extend DvcFQDN = iff(Dvc contains \".\",Dvc,\"\" )\n        , DvcDomainType=iff(Dvc contains \".\",\"FQDN\",\"\" )\n| project-away hostelements\n| lookup Actions on DeviceAction\n// Action post filtering\n| where (array_length(dvcaction)==0 or DvcAction has_any (dvcaction))\n| project-rename\n    DstMacAddr=DestinationMACAddress\n    , SrcMacAddr=SourceMACAddress\n    , DstIpAddr=DestinationIP\n    , DstPortNumber=DestinationPort\n    , DstNatPortNumber=DestinationTranslatedPort\n  , SrcPortNumber=SourcePort\n    , SrcIpAddr=SourceIP\n  , SrcNatPortNumber=SourceTranslatedPort\n  , DvcOutboundInterface=DeviceOutboundInterface\n  , DvcInboundInterface=DeviceInboundInterface\n  , EventMessage=Message\n  , DvcOriginalAction=DeviceAction\n// -- Aliases\n| extend\n  IpAddr = SrcIpAddr,\n  Rule=NetworkRuleName,\n  Dst=DstIpAddr,\n  // Host=DstHostname,\n  User=DstUsername,\n  Duration=NetworkDuration,\n  SessionId=NetworkSessionId,\n  EventEndTime =EventStartTime,\n  Src=SrcIpAddr\n};\nNWParser(starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)\n",
            "version": 1,
            "functionParameters": "starttime:datetime=datetime(null), endtime:datetime=datetime(null), srcipaddr_has_any_prefix:dynamic=dynamic([]), dstipaddr_has_any_prefix:dynamic=dynamic([]), dstportnumber:int=int(null), hostname_has_any:dynamic=dynamic([]), dvcaction:dynamic=dynamic([]), eventresult:string='*', disabled:bool=False"
          }
        }
      ]
    }
  ]
}

/*

  let Actions=datatable(DeviceAction:string,DvcAction:string)
[ "reset client","Reset Source"
, "reset server","Reset Destination"
, "reset both", "Reset"
, "allow","Allow"
, "deny","Deny"
, "drop", "Drop"
, "drop ICMP", "Drop ICMP"];
let NWParser=(starttime:datetime=datetime(null), endtime:datetime=datetime(null), srcipaddr_has_any_prefix:dynamic=dynamic([]), dstipaddr_has_any_prefix:dynamic=dynamic([]), dstportnumber:int=int(null), hostname_has_any:dynamic=dynamic([]), dvcaction:dynamic=dynamic([]), eventresult:string='*', disabled:bool=false){
CommonSecurityLog | where not(disabled)
| where DeviceVendor == "Palo Alto Networks" and DeviceProduct == "PAN-OS" and Activity == "TRAFFIC"
  /// Prefilterring:
    | where (isnull(starttime) or TimeGenerated>=starttime)
      and     (isnull(endtime) or TimeGenerated<=endtime)
        and (array_length(srcipaddr_has_any_prefix)==0 or has_any_ipv4_prefix(SourceIP,srcipaddr_has_any_prefix))
          and (array_length(dstipaddr_has_any_prefix)==0 or has_any_ipv4_prefix(DestinationIP,dstipaddr_has_any_prefix))
            and (isnull(dstportnumber) or DestinationPort==dstportnumber)
              and (array_length(hostname_has_any)==0)
                  // dvcaction - post filterring
                      and (eventresult=="*" or (DeviceAction=="allow" and eventresult=="Success") or (eventresult=="Failure"))
                      | parse AdditionalExtensions with "PanOSPacketsReceived=" DstPackets:long ",PanOSPacketsSent=" SrcPackets:long ",start="EventStartTime ",reason="*
                      | project-rename 
                        EventProductVersion=DeviceVersion, Dvc=DeviceName, NetworkApplicationProtocol=ApplicationProtocol, SrcZone=DeviceCustomString4, DstZone=DeviceCustomString5, NetworkRuleName=DeviceCustomString1, SrcUsername=SourceUserName, DstUsername=DestinationUserName,EventOriginalSeverity=LogSeverity, SrcNatIpAddr=SourceTranslatedAddress, DstNatIpAddr=DestinationTranslatedAddress, PaloAltoFlags=FlexString1
                        | extend
                        EventVendor="Palo Alto", EventProduct="PanOS", DstBytes=tolong(ReceivedBytes), SrcBytes=tolong(SentBytes), NetworkPackets=tolong(DeviceCustomNumber2), NetworkProtocol=toupper(Protocol), NetworkBytes=tolong(FlexNumber1), SrcUsernameType=case(isempty(SrcUsername), "", SrcUsername contains "@", "UPN", "Simple"), DstUsernameType=case(isempty(DstUsername), "", DstUsername contains "@", "UPN", "Simple"), EventType="NetworkSession", EventCount=toint(1), EventResult=case(DeviceAction=="allow","Success","Failure"), NetworkSessionId=coalesce(tostring(DeviceCustomNumber1),tostring(FieldDeviceCustomNumber1)), NetworkDuration=toint(1000*coalesce(DeviceCustomNumber3,FieldDeviceCustomNumber3)), EventSchemaVersion="0.2.1", EventSchema="NetworkSession", EventSeverity = "Informational", EventStartTime=coalesce(todatetime(EventStartTime), StartTime, TimeGenerated)
                        | extend hostelements=split(Dvc,'.')
                        | extend DvcHostname=tostring(hostelements[0]), DvcDomain=strcat_array( array_slice(hostelements,1,-1), '.')
                        | extend DvcFQDN = iff(Dvc contains ".",Dvc,"" ), DvcDomainType=iff(Dvc contains ".","FQDN","" )
                        | project-away hostelements
                        | lookup Actions on DeviceAction
                        // Action post filtering\n
                        | where (array_length(dvcaction)==0 or DvcAction has_any (dvcaction))
                        | project-rename DstMacAddr=DestinationMACAddress, SrcMacAddr=SourceMACAddress, DstIpAddr=DestinationIP, DstPortNumber=DestinationPort, DstNatPortNumber=DestinationTranslatedPort, SrcPortNumber=SourcePort, SrcIpAddr=SourceIP, SrcNatPortNumber=SourceTranslatedPort, DvcOutboundInterface=DeviceOutboundInterface, DvcInboundInterface=DeviceInboundInterface, EventMessage=Message, DvcOriginalAction=DeviceAction
                        | extend  IpAddr = SrcIpAddr,  Rule=NetworkRuleName,  Dst=DstIpAddr, User=DstUsername,  Duration=NetworkDuration,  SessionId=NetworkSessionId,  EventEndTime =EventStartTime, Src=SrcIpAddr
                        };
                        NWParser(starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)

*/
