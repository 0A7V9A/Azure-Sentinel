{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('Workspace')]",
      "location": "[parameters('WorkspaceRegion')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "vimNetworkSessionCheckpointFirewall",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('Workspace'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "Network Session ASIM parser for Checkpoint Firewall",
            "category": "ASIM",
            "FunctionAlias": "vimNetworkSessionCheckpointFirewall",
            "query": "let ProtocolLookup = datatable(Protocol:int, NetworkProtocol:string) [\n    let NWParser = (\n        starttime:datetime=datetime(null), \n        endtime:datetime=datetime(null),\n        srcipaddr_has_any_prefix:dynamic=dynamic([]), \n        dstipaddr_has_any_prefix:dynamic=dynamic([]), \n        ipaddr_has_any_prefix:dynamic=dynamic([]),\n        dstportnumber:int=int(null), \n        hostname_has_any:dynamic=dynamic([]), \n        dvcaction:dynamic=dynamic([]), \n        eventresult:string='*', \n        disabled:bool=false)\n    {\n        let src_or_any = set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \n        let dst_or_any = set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);\n        CommonSecurityLog\n        | where not(disabled)\n        | where\n            (isnull(starttime) or TimeGenerated >= starttime) \n            and (isnull(endtime) or TimeGenerated <= endtime)\n        | where DeviceVendor==\"Check Point\" and DeviceProduct==\"VPN-1 & FireWall-1\"\n        | where (isnull(dstportnumber) or (DestinationPort == dstportnumber))\n        | extend temp_isSrcMatch=has_any_ipv4_prefix(SourceIP,src_or_any), \n              temp_isDstMatch=has_any_ipv4_prefix(DestinationIP,dst_or_any)\n        | extend ASimMatchingIpAddr = case(\n                            array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\", // match not requested\n                            (temp_isSrcMatch and temp_isDstMatch), \"Both\", // has to be checked before the individual \n                            temp_isSrcMatch, \"SrcIpAddr\",\n                            temp_isDstMatch, \"DstIpAddr\",\n                            \"No match\"\n                        )\n        | where ASimMatchingIpAddr != \"No match\"\n        | extend \n                EventVendor = DeviceVendor,\n                EventProduct = \"VPN & Firewall\",\n                EventCount = toint(1),\n                EventType = \"NetworkSession\",\n                EventOriginalType = \"TRAFFIC\",\n                EventSchema = \"NetworkSession\",\n                EventSchemaVersion = \"0.2.3\",\n                DeviceAction = coalesce(DeviceAction, extract(@'rule_action=(\\w+)',1,AdditionalExtensions, typeof(string))),        \n                NetworkRuleName = extract(@'rule_uid=([\\w+\\-]*)',1,AdditionalExtensions, typeof(string)),\n                EventOriginalUid = extract(@'loguid=(\\{[^\\}]+\\})',1,AdditionalExtensions, typeof(string)),\n                Dvc = coalesce(extract(@'origin=([\\d+\\.]*)',1,AdditionalExtensions, typeof(string)), Computer),\n                DvcHostname = extract(@'originsicname=CN\\\\=(.+)\\,O',1,AdditionalExtensions, typeof(string)),\n                SrcZone = extract(@'inzone=([^;]+)',1,AdditionalExtensions, typeof(string)),\n                DstZone = extract(@'outzone=([^;]+)',1,AdditionalExtensions, typeof(string)),\n                CommunicationDirection = extract(@'conn_direction=(\\w+)',1,AdditionalExtensions, typeof(string)),                  \n                DstAppName = coalesce(Activity, extract(@'service_id=(\\w+)',1,AdditionalExtensions, typeof(string))),\n                ThreatCategory = case (\n                                  AdditionalExtensions has \"alert=\", extract(@'alert=([\\w+\\-]*)',1,AdditionalExtensions, typeof(string)),\n                                  AdditionalExtensions has \"inspection_category=\", extract(@'inspection_category=([\\w+\\-]*)',1,AdditionalExtensions, typeof(string)),\n                                  \"\"),\n                ThreatName = extract(@'inspection_item=([\\w+\\-]*)',1,AdditionalExtensions, typeof(string))\n        | extend\n                EventResult = case(\n                                    isempty(DeviceAction), \"\", \n                                    DeviceAction == \"Accept\", \"Success\",\n                                    \"Failure\"\n                                ), \n                NetworkRuleName = coalesce(DeviceCustomString2, NetworkRuleName),\n                Protocol = toint(Protocol),\n                EventStartTime = unixtime_milliseconds_todatetime(tolong(ReceiptTime))\n        | where ((eventresult == \"*\") or (EventResult == eventresult))\n        | extend NetworkProtocol = case(\n                                  Protocol == 1, \"ICMP\",\n                                  Protocol == 2, \"IGMP\",\n                                  Protocol == 4, \"IPv4\",\n                                  Protocol == 6, \"TCP\",\n                                  Protocol == 17, \"UDP\",\n                                  Protocol == 41, \"IPv6\",\n                                  Protocol == 253, \"\",\n                                  tostring(Protocol)),\n                  NetworkDirection = case(\n                                  CommunicationDirection == 'Incoming', 'Inbound',\n                                  CommunicationDirection == 'Outgoing', 'Outbound',\n                                  CommunicationDirection == 'Internal', 'Local',\n                                  \"\"),\n                  DvcAction = case(\n                                  DeviceAction == 'Accept', 'Allow',\n                                  DeviceAction == 'Drop', 'Drop',\n                                  \"\"\n                              ) \n        | where ((array_length(dvcaction) == 0) or DvcAction has_any (dvcaction))\n        | extend         \n                DstPortNumber = DestinationPort,\n                DstIpAddr = DestinationIP,\n                SrcPortNumber = SourcePort,\n                SrcIpAddr = SourceIP,\n                DstNatIpAddr = DestinationTranslatedAddress,\n                DstNatPortNumber = DestinationTranslatedPort,\n                SrcNatIpAddr = SourceTranslatedAddress,\n                SrcNatPortNumber = SourceTranslatedPort,\n                EventProductVersion = DeviceVersion,\n                EventOriginalSeverity = LogSeverity,\n                Rule = NetworkRuleName,\n                EventEndTime = EventStartTime,\n                DvcOriginalAction = DeviceAction\n        | extend\n                IpAddr = SrcIpAddr,\n                Dst = DstIpAddr,\n                Src = SrcIpAddr,\n                EventSeverity = case(\n                                    DvcAction == \"Drop\", \"Low\",\n                                    DvcAction == \"Allow\", \"Informational\",\n                                    EventOriginalSeverity\n                                ),\n                NetworkDirection = case(\n                                        isnotempty(NetworkDirection), NetworkDirection,\n                                        SrcZone == \"Internal\" and (DstZone == \"Internal\" or DstZone == \"Local\"), \"Local\",\n                                        (SrcZone == \"Internal\" or SrcZone == \"Local\") and DstZone == \"External\", \"Outbound\",\n                                        SrcZone == \"External\" and (DstZone == \"Internal\" or DstZone == \"Local\"), \"Inbound\",\n                                        \"\"\n                                    ),\n                EventMessage = Message\n          | project-away Activity, AdditionalExtensions, ApplicationProtocol, CommunicationDirection, Computer, Device*, Destination*, EndTime, ExternalID, File*, Flex*, IndicatorThreatType, LogSeverity, Malicious*, Message, Old*, OriginalLogSeverity, Process*, Protocol, ReceiptTime, ReceivedBytes, Remote*, ReportReferenceLink, Request*, Sent*, SimplifiedDeviceAction, Source*, StartTime, TenantId, ThreatConfidence, ThreatDescription, ThreatSeverity \n      };\n    NWParser (starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix, dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)",
            "version": 1,
            "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),dstipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null),hostname_has_any:dynamic=dynamic([]),dvcaction:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
          }
        }
      ]
    }
  ]
}