{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "Workspace Region": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('Workspace')]",
      "location": "[parameters('Workspace Region')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "ASimNetworkSessionPaloAltoCEF",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('Workspace'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "Network Session ASIM parser for Palo Alto PanOS",
            "category": "ASIM",
            "FunctionAlias": "ASimNetworkSessionPaloAltoCEF",
            "query": "let Actions=datatable(DeviceAction:string,DvcAction:string)\n[ \"reset client\",\"Reset Source\"\n, \"reset server\",\"Reset Destination\"\n, \"reset both\", \"Reset\"\n, \"allow\",\"Allow\"\n, \"deny\",\"Deny\"\n, \"drop\", \"Drop\"\n, \"drop ICMP\", \"Drop ICMP\"];\nlet NWParser=(disabled:bool=false){\nCommonSecurityLog | where not(disabled)\n| where DeviceVendor == \"Palo Alto Networks\" and DeviceProduct == \"PAN-OS\" and Activity == \"TRAFFIC\"\n| parse AdditionalExtensions with \"PanOSPacketsReceived=\" DstPackets:long \",PanOSPacketsSent=\" SrcPackets:long \",start=\"EventStartTime \",reason=\"*\n| project-rename \n    EventProductVersion=DeviceVersion // Not Documented\n  , Dvc=DeviceName   \n  , NetworkApplicationProtocol=ApplicationProtocol\n  , SrcZone=DeviceCustomString4 \n  , DstZone=DeviceCustomString5\n  , NetworkRuleName=DeviceCustomString1\n  , SrcUsername=SourceUserName \n  , DstUsername=DestinationUserName \n  , EventOriginalSeverity=LogSeverity // not documented\n  , SrcNatIpAddr=SourceTranslatedAddress\n  , DstNatIpAddr=DestinationTranslatedAddress\n  , PaloAltoFlags=FlexString1 // Flags\n| extend\nEventVendor=\"Palo Alto\"\n  ,EventProduct=\"PanOS\" // Not Documented\n  , SrcBytes=tolong(SentBytes)\n  , DstBytes=tolong(ReceivedBytes) \n  , NetworkPackets=tolong(DeviceCustomNumber2) \n  , NetworkProtocol=toupper(Protocol)\n  , NetworkBytes=tolong(FlexNumber1)\n  , SrcUsernameType=case(isempty(SrcUsername), \"\", SrcUsername contains \"@\", \"UPN\", \"Simple\")\n  , DstUsernameType=case(isempty(DstUsername), \"\", DstUsername contains \"@\", \"UPN\", \"Simple\")\n  , EventType=\"NetworkSession\"\n  , EventCount=toint(1)\n  , EventResult=case(DeviceAction==\"allow\",\"Success\",\"Failure\")\n  , NetworkSessionId=tostring(DeviceCustomNumber1)\n  , NetworkDuration=toint(1000*DeviceCustomNumber3)\n  , EventSchemaVersion=\"0.2.1\"\n  , EventSchema=\"NetworkSession\"\n  , EventSeverity = \"Informational\"\n  , EventStartTime=coalesce(todatetime(EventStartTime), TimeGenerated)\n| extend hostelements=split(Dvc,'.')\n| extend DvcHostname=tostring(hostelements[0])\n       , DvcDomain=strcat_array( array_slice(hostelements,1,-1), '.')\n| extend DvcFQDN = iff(Dvc contains \".\",Dvc,\"\" )\n      , DvcDomainType=iff(Dvc contains \".\",\"FQDN\",\"\" )\n| project-away hostelements\n| lookup Actions on DeviceAction\n| project-rename\n  DstMacAddr=DestinationMACAddress\n  , SrcMacAddr=SourceMACAddress\n  , DstIpAddr=DestinationIP\n  , DstPortNumber=DestinationPort\n  , DstNatPortNumber=DestinationTranslatedPort\n  , SrcPortNumber=SourcePort\n  , SrcIpAddr=SourceIP\n  , SrcNatPortNumber=SourceTranslatedPort\n  , DvcOutboundInterface=DeviceOutboundInterface\n  , DvcInboundInterface=DeviceInboundInterface\n  , EventMessage=Message\n  , DvcOriginalAction=DeviceAction\n// -- Aliases\n| extend\nIpAddr = SrcIpAddr,\nRule=NetworkRuleName,\nDst=DstIpAddr,\n// Host=DstHostname, \nUser=DstUsername,\nDuration=NetworkDuration,\nSessionId=NetworkSessionId,\nEventEndTime =EventStartTime,\nSrc=SrcIpAddr\n};\nNWParser(disabled)",
            "version": 1,
            "functionParameters": "disabled:bool=False"
          }
        }
      ]
    }
  ]
}

/*

  let Actions=datatable(DeviceAction:string,DvcAction:string)
[ "reset client","Reset Source"
, "reset server","Reset Destination"
, "reset both", "Reset"
, "allow","Allow"
, "deny","Deny"
, "drop", "Drop"
, "drop ICMP", "Drop ICMP"];
let NWParser=(disabled:bool=false){
CommonSecurityLog | where not(disabled)
| where DeviceVendor == "Palo Alto Networks" and DeviceProduct == "PAN-OS" and Activity == "TRAFFIC"
| parse AdditionalExtensions with "PanOSPacketsReceived=" DstPackets:long ",PanOSPacketsSent=" SrcPackets:long ",start="EventStartTime ",reason="*
| project-rename
    EventProductVersion=DeviceVersion // Not Documented
      , Dvc=DeviceName   
        , NetworkApplicationProtocol=ApplicationProtocol
          , SrcZone=DeviceCustomString4 
            , DstZone=DeviceCustomString5
              , NetworkRuleName=DeviceCustomString1
                , SrcUsername=SourceUserName 
                  , DstUsername=DestinationUserName 
                    , EventOriginalSeverity=LogSeverity // not documented
                      , SrcNatIpAddr=SourceTranslatedAddress
                        , DstNatIpAddr=DestinationTranslatedAddress
                          , PaloAltoFlags=FlexString1 // Flags
                          | extend
                          EventVendor="Palo Alto"
                            ,EventProduct="PanOS" // Not Documented
                              , SrcBytes=tolong(SentBytes)
                                , DstBytes=tolong(ReceivedBytes) 
                                  , NetworkPackets= coalesce(tolong(DeviceCustomNumber2),FieldDeviceCustomNumber2)
                                    , NetworkProtocol=toupper(Protocol)
                                      , NetworkBytes=tolong(FlexNumber1)
                                        , SrcUsernameType=case(isempty(SrcUsername), "", SrcUsername contains "@", "UPN", "Simple")
                                          , DstUsernameType=case(isempty(DstUsername), "", DstUsername contains "@", "UPN", "Simple")
                                            , EventType="NetworkSession"
                                              , EventCount=toint(1)
                                                , EventResult=case(DeviceAction=="allow","Success","Failure")
                                                  , NetworkSessionId=tostring(DeviceCustomNumber1)
                                                    , NetworkDuration=toint(1000*DeviceCustomNumber3)
                                                      , EventSchemaVersion="0.2.1"
                                                        , EventSchema="NetworkSession"
                                                          , EventSeverity = "Informational"
                                                            , EventStartTime=coalesce(todatetime(EventStartTime), TimeGenerated)
                                                            | extend hostelements=split(Dvc,'.')
                                                            | extend DvcHostname=tostring(hostelements[0])
                                                                   , DvcDomain=strcat_array( array_slice(hostelements,1,-1), '.')
                                                                   | extend DvcFQDN = iff(Dvc contains ".",Dvc,"" )
                                                                         , DvcDomainType=iff(Dvc contains ".","FQDN","" )
                                                                         | project-away hostelements
                                                                         | lookup Actions on DeviceAction
                                                                         | project-rename
                                                                           DstMacAddr=DestinationMACAddress
                                                                             , SrcMacAddr=SourceMACAddress
                                                                               , DstIpAddr=DestinationIP
                                                                                 , DstPortNumber=DestinationPort
                                                                                   , DstNatPortNumber=DestinationTranslatedPort
                                                                                     , SrcPortNumber=SourcePort
                                                                                       , SrcIpAddr=SourceIP
                                                                                         , SrcNatPortNumber=SourceTranslatedPort
                                                                                           , DvcOutboundInterface=DeviceOutboundInterface
                                                                                             , DvcInboundInterface=DeviceInboundInterface
                                                                                               , EventMessage=Message
                                                                                                 , DvcOriginalAction=DeviceAction
                                                                                                 // -- Aliases
                                                                                                 | extend
                                                                                                 IpAddr = SrcIpAddr,
                                                                                                 Rule=NetworkRuleName,
                                                                                                 Dst=DstIpAddr,
                                                                                                 // Host=DstHostname, 
                                                                                                 User=DstUsername,
                                                                                                 Duration=NetworkDuration,
                                                                                                 SessionId=NetworkSessionId,
                                                                                                 EventEndTime =EventStartTime,
                                                                                                 Src=SrcIpAddr
                                                                                                 };
                                                                                                 NWParser(false)

*/
