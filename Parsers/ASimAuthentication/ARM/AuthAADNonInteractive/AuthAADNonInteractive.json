{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspaceName": {
      "type": "string"
    },
    "location": {
      "type": "string"
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('workspaceName')]",
      "location": "[parameters('location')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "vimAuthAADNonInteractiveUserSignInLogs",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('workspaceName'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "Azure active directory non interactive authentication",
            "category": "Security",
            "FunctionAlias": "vimAuthAADNonInteractiveUserSignInLogs",
            "query": "let AADNIAuthentication=(){\n  AADNonInteractiveUserSignInLogs\n  | extend\n      EventVendor = 'Microsoft'\n      , EventProduct = 'AAD Non Interactive'\n      , EventSchemaVersion='0.1.0'\n      , EventCount=1\n      , EventResult = iff (ResultType ==0, 'Success', 'Failure')\n      //, EventResultDetails= ResultType\n      , EventOriginalResultDetails = coalesce(ResultDescription, ResultType)\n      , EventStartTime = TimeGenerated\n      , EventEndTime= TimeGenerated\n      , EventType= 'Logon'\n      , SrcHostId=tostring(todynamic(DeviceDetail).deviceId)\n      , SrcHostname=tostring(todynamic(DeviceDetail).displayName)\n      , SrcHostOs=tostring(todynamic(DeviceDetail).operatingSystem)\n      , HttpUserAgent=UserAgent\n      , SrcBrowser= tostring(todynamic(DeviceDetail).browser)\n      , Locatoin = todynamic(LocationDetails)\n      , TargetResourceId = ResourceIdentity // Overriding the tables ResourceId which is not an interesting value\n      , TargetUserType='NonInteractive'\n      , TargetUsernameType='Upn'\n      , TargetUserIdType='AADID'\n      , TargetResourceName=ResourceDisplayName\n  | extend\n      , SrcGeoCity=tostring(Location.city)\n      , SrcGeoCountry=tostring(Location.countryOrRegion)\n      , SrcGeoLocationLatitude=tostring(Location.geoCoordinates.latitude)\n      , SrcGeoLocationLongitude=tostring(Location.geoCoordinates.longitude)\n  | project-rename\n      EventOriginalUid =Id\n      , LogonMethod = AuthenticationRequirement\n      , TargetSessionId=CorrelationId\n      , SessionDuration= DurationMs\n      , TargetUserId = UserId\n      , TargetUsername=UserPrincipalName\n      , SrcIpAddr=IPAddress\n    , TargetAppName=AppDisplayName\n    , TargetAppId=AppId\n  | lookup (AADSTSErrorCodes | project-rename ResultType=Error, EventResultDetails=ErrorDescription ) on ResultType\n  | project-reorder\n      TimeGenerated\n      ,EventProduct\n      , EventOriginalUid\n      , EventResult\n      //, EventResultDetails\n      , EventOriginalResultDetails\n      , EventStartTime\n      , EventEndTime\n      , LogonMethod \n      , TargetSessionId\n      , SessionDuration\n      , TargetUserId\n      , TargetUsername\n      , SrcHostId\n      , SrcHostname\n      , SrcHostOs\n      , HttpUserAgent \n      , SrcBrowser\n      , SrcGeoCountry\n      , SrcGeoCity\n      , TargetAppId\n      , TargetAppName\n      // Aliases\n      | extend \n        Username=TargetUsername\n      , LogonTarget=ResourceIdentity\n      , Dvc=EventVendor};\nAADNIAuthentication",
            "version": 1
          }
        }
      ]
    }
  ]
}