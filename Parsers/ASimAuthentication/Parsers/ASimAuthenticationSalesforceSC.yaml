Parser:
  Title: Authentication ASIM parser for Salesforce Service Cloud
  Version: '0.1'
  LastUpdated: September 30, 2022
Product:
  Name: Salesforce Service Cloud
Normalization:
  Schema: Authentication
  Version: '0.1.3'
References:
- Title: ASIM Authentication Schema
  Link: https://aka.ms/ASimAuthenticationDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing Salesforce sign in logs, stored in the  SalesforceServiceCloud_CL table, to the ASIM Authentication schema.
ParserName: ASimAuthenticationSalesforceSC
EquivalentBuiltInParser: _ASim_Authentication_SalesforceSC
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
    let parser=(disabled:bool=false){
      let EventResultLookup = datatable (
        login_status_s: string,
        EventResultDetails: string,
        EventResult: string
    )[
        "LOGIN_CHALLENGE_ISSUED", "Other", "Failure",
        "LOGIN_CHALLENGE_PENDING", "Other", "Failure",
        "LOGIN_DATA_DOWNLOAD_ONLY", "Other", "Failure",
        "LOGIN_END_SESSION_TXN_SECURITY_POLICY", "Logon violates policy", "Failure",
        "LOGIN_ERROR_API_TOO_OLD", "Other", "Failure",
        "LOGIN_ERROR_APPEXCHANGE_DOWN", "Other", "Failure",
        "LOGIN_ERROR_ASYNC_USER_CREATE", "Other", "Failure",
        "LOGIN_ERROR_AVANTGO_DISABLED", "Other", "Failure",
        "LOGIN_ERROR_AVANTGO_TRIAL_EXP", "Other", "Failure",
        "LOGIN_ERROR_CLIENT_NO_ACCESS", "Other", "Failure",
        "LOGIN_ERROR_CLIENT_REQ_UPDATE", "Other", "Failure",
        "LOGIN_ERROR_CSS_FROZEN", "Other", "Failure",
        "LOGIN_ERROR_CSS_PW_LOCKOUT", "User locked", "Failure",
        "LOGIN_ERROR_DUPLICATE_USERNAME", "Other", "Failure",
        "LOGIN_ERROR_EXPORT_RESTRICTED", "Other", "Failure",
        "LOGIN_ERROR_GLOBAL_BLOCK_DOMAIN", "Other", "Failure",
        "LOGIN_ERROR_HT_DOWN", "Other", "Failure",
        "LOGIN_ERROR_HTP_METHD_INVALID", "Other", "Failure",
        "LOGIN_ERROR_INSECURE_LOGIN", "Other", "Failure",
        "LOGIN_ERROR_INVALID_GATEWAY", "Other", "Failure",
        "LOGIN_ERROR_INVALID_ID_FIELD", "Other", "Failure",
        "LOGIN_ERROR_INVALID_PASSWORD", "Incorrect password", "Failure",
        "LOGIN_ERROR_LOGINS_EXCEEDED", "Other", "Failure",
        "LOGIN_ERROR_MUST_USE_API_TOKEN", "Other", "Failure",
        "LOGIN_ERROR_MUTUAL_AUTHENTICATION", "Other", "Failure",
        "LOGIN_ERROR_NETWORK_INACTIVE", "Other", "Failure",
        "LOGIN_ERROR_NO_HT_ACCESS", "Other", "Failure",
        "LOGIN_ERROR_NO_NETWORK_ACCESS", "Other", "Failure",
        "LOGIN_ERROR_NO_NETWORK_INFO", "Other", "Failure",
        "LOGIN_ERROR_NO_PORTAL_ACCESS", "Other", "Failure",
        "LOGIN_ERROR_NO_SET_COOKIES", "Other", "Failure",
        "LOGIN_ERROR_OFFLINE_DISABLED", "Other", "Failure",
        "LOGIN_ERROR_OFFLINE_TRIAL_EXP", "Other", "Failure",
        "LOGIN_ERROR_ORG_CLOSED", "Other", "Failure",
        "LOGIN_ERROR_ORG_DOMAIN_ONLY", "Other", "Failure",
        "LOGIN_ERROR_ORG_IN_MAINTENANCE", "Other", "Failure",
        "LOGIN_ERROR_ORG_INACTIVE", "Other", "Failure",
        "LOGIN_ERROR_ORG_IS_DOT_ORG", "Other", "Failure",
        "LOGIN_ERROR_ORG_LOCKOUT", "Other", "Failure",
        "LOGIN_ERROR_ORG_SIGNING_UP", "Other", "Failure",
        "LOGIN_ERROR_ORG_SUSPENDED", "Other", "Failure",
        "LOGIN_ERROR_OUTLOOK_DISABLED", "Other", "Failure",
        "LOGIN_ERROR_PAGE_REQUIRES_LOGIN", "Session expired", "Failure",
        "LOGIN_ERROR_PASSWORD_EMPTY", "Other", "Failure",
        "LOGIN_ERROR_PASSWORD_LOCKOUT", "User locked", "Failure",
        "LOGIN_ERROR_PORTAL_INACTIVE", "Other", "Failure",
        "LOGIN_ERROR_RATE_EXCEEDED", "Other", "Failure",
        "LOGIN_ERROR_RESTRICTED_DOMAIN", "Other", "Failure",
        "LOGIN_ERROR_RESTRICTED_TIME", "Other", "Failure",
        "LOGIN_ERROR_SESSION_TIMEOUT", "Session expired", "Failure",
        "LOGIN_ERROR_SSO_PWD_INVALID", "Incorrect password", "Failure",
        "LOGIN_ERROR_SSO_SVC_DOWN", "Other", "Failure",
        "LOGIN_ERROR_SSO_URL_INVALID", "Other", "Failure",
        "LOGIN_ERROR_STORE", "Other", "Failure",
        "LOGIN_ERROR_STORE_DOWN", "Other", "Failure",
        "LOGIN_ERROR_SWITCH_SFDC_INSTANCE", "Other", "Failure",
        "LOGIN_ERROR_SWITCH_SFDC_LOGIN", "Other", "Failure",
        "LOGIN_ERROR_SYNCOFFLINE_DISBLD", "Other", "Failure",
        "LOGIN_ERROR_SYSTEM_DOWN", "Other", "Failure",
        "LOGIN_ERROR_UNKNOWN_ERROR", "Other", "Failure",
        "LOGIN_ERROR_USER_API_ONLY", "Other", "Failure",
        "LOGIN_ERROR_USER_FROZEN", "User locked", "Failure",
        "LOGIN_ERROR_USER_INACTIVE", "User disabled", "Failure",
        "LOGIN_ERROR_USER_NON_MOBILE", "Other", "Failure",
        "LOGIN_ERROR_USER_STORE_ACCESS", "Other", "Failure",
        "LOGIN_ERROR_USERNAME_EMPTY", "Other", "Failure",
        "LOGIN_ERROR_WIRELESS_DISABLED", "Other", "Failure",
        "LOGIN_ERROR_WIRELESS_TRIAL_EXP", "Other", "Failure",
        "LOGIN_LIGHTNING_LOGIN", "Other", "Failure",
        "LOGIN_NO_ERROR", "", "Success",
        "LOGIN_OAUTH_API_DISABLED", "Other", "Failure",
        "LOGIN_OAUTH_CONSUMER_DELETED", "Other", "Failure",
        "LOGIN_OAUTH_DS_NOT_EXPECTED", "Other", "Failure",
        "LOGIN_OAUTH_EXCEED_GET_AT_LMT", "Other", "Failure",
        "LOGIN_OAUTH_INVALID_CODE_CHALLENGE", "Other", "Failure",
        "LOGIN_OAUTH_INVALID_CODE_VERIFIER", "Other", "Failure",
        "LOGIN_OAUTH_INVALID_DEVICE", "Other", "Failure",
        "LOGIN_OAUTH_INVALID_DS", "Other", "Failure",
        "LOGIN_OAUTH_INVALID_DSIG", "Other", "Failure",
        "LOGIN_OAUTH_INVALID_IP", "Other", "Failure",
        "LOGIN_OAUTH_INVALID_NONCE", "Other", "Failure",
        "LOGIN_OAUTH_INVALID_SIG_METHOD", "Other", "Failure",
        "LOGIN_OAUTH_INVALID_TIMESTAMP", "Other", "Failure",
        "LOGIN_OAUTH_INVALID_TOKEN", "Other", "Failure",
        "LOGIN_OAUTH_INVALID_VERIFIER", "Other", "Failure",
        "LOGIN_OAUTH_INVALID_VERSION", "Other", "Failure",
        "LOGIN_OAUTH_MISSING_DS", "Other", "Failure",
        "LOGIN_OAUTH_NO_CALLBACK_URL", "Other", "Failure",
        "LOGIN_OAUTH_NO_CONSUMER", "Other", "Failure",
        "LOGIN_OAUTH_NO_TOKEN", "Other", "Failure",
        "LOGIN_OAUTH_NONCE_REPLAY", "Other", "Failure",
        "LOGIN_OAUTH_PACKAGE_MISSING", "Other", "Failure",
        "LOGIN_OAUTH_PACKAGE_OLD", "Other", "Failure",
        "LOGIN_OAUTH_UNEXPECTED_PARAM", "Other", "Failure",
        "LOGIN_ORG_TRIAL_EXP", "Other", "Failure",
        "LOGIN_READONLY_CANNOT_VALIDATE", "Other", "Failure",
        "LOGIN_SAML_INVALID_AUDIENCE", "Other", "Failure",
        "LOGIN_SAML_INVALID_CONFIG", "Other", "Failure",
        "LOGIN_SAML_INVALID_FORMAT", "Other", "Failure",
        "LOGIN_SAML_INVALID_IN_RES_TO", "Other", "Failure",
        "LOGIN_SAML_INVALID_ISSUER", "Other", "Failure",
        "LOGIN_SAML_INVALID_ORG_ID", "Other", "Failure",
        "LOGIN_SAML_INVALID_PORTAL_ID", "Other", "Failure",
        "LOGIN_SAML_INVALID_RECIPIENT", "Other", "Failure",
        "LOGIN_SAML_INVALID_SESSION_LEVEL", "Other", "Failure",
        "LOGIN_SAML_INVALID_SIGNATURE", "Other", "Failure",
        "LOGIN_SAML_INVALID_SITE_URL", "Other", "Failure",
        "LOGIN_SAML_INVALID_STATUS", "Other", "Failure",
        "LOGIN_SAML_INVALID_SUB_CONFIRM", "Other", "Failure",
        "LOGIN_SAML_INVALID_TIMESTAMP", "Other", "Failure",
        "LOGIN_SAML_INVALID_USERNAME", "No such user", "Failure",
        "LOGIN_SAML_INVALID_VERSION", "Other", "Failure",
        "LOGIN_SAML_MISMATCH_CERT", "Other", "Failure",
        "LOGIN_SAML_MISSING_ORG_ID", "Other", "Failure",
        "LOGIN_SAML_MISSING_PORTAL_ID", "Other", "Failure",
        "LOGIN_SAML_PROVISION_ERROR", "Other", "Failure",
        "LOGIN_SAML_REPLAY_ATTEMPTED", "Other", "Failure",
        "LOGIN_SAML_SITE_INACTIVE", "Other", "Failure",
        "LOGIN_TWOFACTOR_REQ", "Logon violates policy", "Failure"
    ];
    let SalesforceEventType = dynamic(['Login', 'LoginAs', 'Logout']);
    let EventTypeLookup = datatable(event_type_s: string, EventType: string)[
        "Login", "Logon",
        "LoginAs", "Logon",
        "Logout", "Logoff"
    ];
    let DvcOSLookup = datatable(
        platform_type_s: string,
        DvcOS: string,
        DvcOsVersion: string
    )[
        "1000", "Windows", "",
        "1008", "Windows", "2003",
        "1013", "Windows", "8.1",
        "1015", "Windows", "10",
        "2003", "Macintosh/Apple", "OSX",
        "4000", "Linux", "",
        "5005", "Android", "",
        "5006", "iPhone", "",
        "5007", "iPad", "",
        "5200", "Android", "10.0"
    ];
    let LogonMethodLookup = datatable(login_type_s: string, LogonMethod: string)[
        "7", "AppExchange",
        "A", "Application",
        "s", "Certificate-based login",
        "k", "Chatter Communities External User",
        "n", "Chatter Communities External User Third Party SSO",
        "r", "Employee Login to Community",
        "z", "Lightning Login",
        "l", "Networks Portal API Only",
        "6", "Remote Access Client",
        "i", "Remote Access 2.0",
        "I", "Other Apex API",
        "R", "Partner Product",
        "w", "Passwordless Login",
        "3", "Customer Service Portal",
        "q", "Partner Portal Third-Party SSO",
        "9", "Partner Portal",
        "5", "SAML Idp Initiated SSO",
        "m", "SAML Chatter Communities External User SSO",
        "b", "SAML Customer Service Portal SSO",
        "c", "SAML Partner Portal SSO",
        "h", "SAML Site SSO",
        "8", "SAML Sfdc Initiated SSO",
        "E", "SelfService",
        "j", "Third Party SSO"
    ];
    let TempEventResultLookup = datatable(request_status_s: string, TempEventResult: string)[
        "S", "Success",
        "F", "Failure",
        "A", "Failure",
        "R", "Success",
        "N", "Failure",
        "U", "NA"
    ];
    let UserTypeLookup = datatable(user_type_s: string, TargetUserType: string)[
        "CsnOnly", "Other",
        "CspLitePortal", "Other",
        "CustomerSuccess", "Other",
        "Guest", "Anonymous",
        "PowerCustomerSuccess", "Other",
        "PowerPartner", "Other",
        "SelfService", "Other",
        "Standard", "Regular",
        "A", "Application",
        "b", "Other",
        "C", "Other",
        "D", "Other",
        "F", "Other",
        "G", "Anonymous",
        "L", "Other",
        "N", "Service",
        "n", "Other",
        "O", "Other",
        "o", "Other",
        "P", "Other",
        "p", "Other",
        "S", "Regular",
        "X", "Admin"
    ];
    SalesforceServiceCloud_CL 
      | where not(disabled)
      | lookup EventResultLookup on login_status_s
        | lookup EventTypeLookup on event_type_s
        //| lookup LogonMethodLookup on login_type_s
        | lookup TempEventResultLookup on request_status_s
        | lookup DvcOSLookup on platform_type_s
        | lookup UserTypeLookup on user_type_s
        | project-rename
            EventProductVersion = api_version_s,
            EventOriginalResultDetails = login_status_s,
            TargetUserId = user_id_s,
            SrcIpAddr = source_ip_s,
            EventOriginalUid = request_id_s,
            TlsCipher = cipher_suite_s,
            TlsVersion = tls_protocol_s,
            HttpUserAgent= browser_type_s,
            TargetScopeId = organization_id_s,
            TargetUrl = uri_s,
            TargetOriginalUserType = user_type_s,
            ActorUsername = delegated_user_name_s,
            ActorUserId = delegated_user_id_s,
            TargetUsername = user_name_s
        | extend
            TimeGenerated = todatetime(tostring(split(timestamp_s, '.', 0)[0])),
            EventVendor = 'Salesforce',
            EventProduct='Salesforce Service Cloud',
            EventCount = int(1),
            EventSchema = 'Authentication',
            EventSchemaVersion = '0.1.3',
            EventStartTime = TimeGenerated,
            EventEndTime = TimeGenerated
        | extend
            TargetSessionId = coalesce(session_key_s, login_key_s),
            SrcIpAddr = coalesce(SrcIpAddr, client_ip_s),
            TargetUserScope = "Salesforce Organization",
            TargetUserIdType = iff(isnotempty(TargetUserId), "SaleforceId", ""),
            TargetUsernameType = iff(isnotempty(TargetUsername), "UPN", ""),
            TargetAppName = "Salesforce Dot Com(SFDC)",
            User = coalesce(TargetUsername, TargetUserId),
            Src = SrcIpAddr,
            IpAddr = SrcIpAddr,
            UserAgent = HttpUserAgent,
            Dvc = EventProduct,
            EventResult = coalesce(EventResult, TempEventResult)
        | project-away *_s, *_t, TenantId, SourceSystem
    };
    SalesforceSignin(disabled)