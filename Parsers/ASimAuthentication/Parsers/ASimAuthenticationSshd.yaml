Parser:
  Title: Authentication ASIM parser for Syslog sshd
  Version: '0.1.1'
  LastUpdated: November 21, 2022
Product:
  Name: sshd
Normalization:
  Schema: Authentication
  Version: '0.1.1'
References:
- Title: ASIM Authentication Schema
  Link: https://aka.ms/ASimAuthenticationDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing Syslog opensshd sign in logs to the ASIM Authentication schema.
ParserName: ASimAuthenticationSshd
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let SSHDSignInAuthorized=(disabled:bool=false){
  Syslog | where not(disabled)
    | where ProcessName == "sshd" and SyslogMessage has 'Accepted '
    | extend
    EventVendor = 'OpenBSD'
    , EventProduct = 'sshd'
    , EventCount = int(1)
    , EventSchema = 'Authentication'
    , EventSchemaVersion = '0.1.1'
    , EventResult = 'Success'
    , EventStartTime = TimeGenerated
    , EventEndTime = TimeGenerated
    , EventType = 'Logon'
    , DvcHostname = Computer
    //, DvcIpAddr = extract(@'\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}', 1, SyslogMessage)
    , DvcIpAddr = extract("from (([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.(([0-9]{1,3}))) port",1,SyslogMessage)
    , TargetUsernameType = 'Simple'
    , TargetUsername = extract(@'for (.*?) from', 1, SyslogMessage)
    , EventResultDetails = 'Other'
    , EventOriginalRestultDetails = 'Connection authorized'
  // ************************
  //      <Aliases>
  // ************************
  | extend
          User=TargetUsername
        , Dvc=Computer
  // ************************
  //      </Aliases>
  // ************************
    | project-away Computer, MG, SourceSystem, TenantId
    };
  let SSHDAuthFailure1=(disabled:bool=false){
  Syslog | where not(disabled)
    | where ProcessName == "sshd" and SyslogMessage has 'Failed '
    | extend
    EventVendor = 'OpenBSD'
    , EventProduct = 'sshd'
    , EventCount = int(1)
    , EventSchema = 'Authentication'
    , EventSchemaVersion = '0.1.1'
    , EventResult = 'Failure'
    , EventStartTime = TimeGenerated
    , EventEndTime = TimeGenerated
    , EventType = 'Logon'
    , DvcHostname = Computer
    //, DvcIpAddr = extract(@'from \d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3} port', 1, SyslogMessage)
    , DvcIpAddr = extract("from (([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.(([0-9]{1,3}))) port",1,SyslogMessage)
    , TargetUsernameType = 'Simple'
    , TargetUsername = extract(@'for (invalid user )?(.*?) from', 2, SyslogMessage)
    , EventResultDetails = 'No such user or password'
    , EventOriginalRestultDetails = 'User authentication failed'
    | project-away Computer, MG, SourceSystem, TenantId
    };
  let SSHDDisconnect=(disabled:bool=false){
  Syslog | where not(disabled)
    | where ProcessName == "sshd" and SyslogMessage has 'session closed for user '
    | extend
    EventVendor = 'OpenBSD'
    , EventProduct = 'sshd'
    , EventCount = int(1)
    , EventSchema = 'Authentication'
    , EventSchemaVersion = '0.1.1'
    , EventResult = 'Success'
    , EventStartTime = TimeGenerated
    , EventEndTime = TimeGenerated
    , EventType = 'Logoff'
    , DvcHostname = Computer
    , TargetUsernameType = 'Simple'
    , TargetUsername = extract('for user (.*?)$', 1, SyslogMessage)
    , EventResultDetails = 'Other'
    , EventOriginalRestultDetails = 'User session closed'
  // ************************
  //      <Aliases>
  // ************************
  | extend
          User=TargetUsername
        , Dvc=Computer
  // ************************
  //      </Aliases>
  // ************************
    | project-away Computer, MG, SourceSystem, TenantId
    };
  union isfuzzy=false SSHDSignInAuthorized(disabled), SSHDAuthFailure1(disabled), SSHDDisconnect(disabled)
