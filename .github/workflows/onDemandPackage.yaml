# WHEN PR IS OPEN AND ALL AZURE PIPELINE VALIDATIONS GET PASSED THIS WILL GET TRIGGERED
# ALSO TRIGGER ONLY WHEN LABEL IS ADDED FOR CONTENT-PACKAGE
name: Create Package On Demand

env:
  GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  APPINSIGHTS: "${{ secrets.APPINSIGHTS }}"
  DEFAULTPACKAGEVERSION: "${{ vars.DEFAULTPACKAGEVERSION }}"
  BLOB_CONN_STRING: "${{ secrets.BLOB_CONN_STRING }}"
  BASE_FOLDER_PATH: "${{ vars.BASEFOLDERPATH }}"
  BRANCH_NAME: "${{ github.event.client_payload.pull_request.head.ref }}"
  ADO_TOKEN: "${{ secrets.ADO_TOKEN }}"
  ADO_BASE_URL: "${{ vars.ADO_BASE_URL }}"
  ADO_AREAPATH: "${{ vars.ADO_AREAPATH }}"
  ADO_TEAMPROJECT: "${{ vars.ADO_TEAMPROJECT }}"
  ADO_PARENT_LINK: "${{ vars.ADO_PARENT_LINK }}"
on:
  repository_dispatch:
    types: [open-pr-package-command]

jobs:
  solutionNameDetails:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'Content-Package') }}
    uses: ./.github/workflows/getSolutionName.yaml
    secrets: inherit

  checkSkipPackagingDetails:
    uses: ./.github/workflows/checkSkipPackagingInfo.yaml
    needs: solutionNameDetails
    if: ${{ needs.solutionNameDetails.outputs.solutionName != '' }}
    with: 
      solutionName: "${{ needs.solutionNameDetails.outputs.solutionName }}"
    secrets: inherit

  neworexistingsolution:
    needs: [solutionNameDetails, checkSkipPackagingDetails]
    uses: ./.github/workflows/neworexistingsolution.yaml
    if: ${{ needs.solutionNameDetails.outputs.solutionName != '' && needs.checkSkipPackagingDetails.outputs.isPackagingRequired }} 
    with: 
      solutionName: "${{ needs.solutionNameDetails.outputs.solutionName }}"
    secrets: inherit

  createpackage:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [solutionNameDetails, neworexistingsolution]
    env:
      RUNID: "${{ github.event.client_payload.github.runId }}" 
      PULL_REQUEST_NUMBER: "${{ github.event.client_payload.pull_request.number }}"
      SOLUTION_NAME: "${{ needs.solutionNameDetails.outputs.solutionName }}"
      SOLUTION_SUPPORTED_BY: "${{ needs.neworexistingsolution.outputs.solutionSupportedBy }}"
      SOLUTION_OFFER_ID: "${{ needs.neworexistingsolution.outputs.solutionOfferId }}"
      IS_NEW_SOLUTION: "${{ needs.neworexistingsolution.outputs.isNewSolution }}"
    outputs:
      isCreatePackage: ${{ steps.step1.outputs.isCreatePackage }}
      packageCreationPath: "${{ steps.step1.outputs.packageCreationPath }}"
      packageVersion: "${{ steps.step1.outputs.packageVersion }}"
      blobName: "${{ steps.step1.outputs.blobName }}"
      dataFileLink: "${{ steps.step1.outputs.dataFileLink }}"
      dataFolderPath: "${{ steps.step1.outputs.dataFolderPath }}"
      solutionBaseFolderPath: "${{ steps.step1.outputs.solutionBaseFolderPath }}"
      dataInputFileName: "${{ steps.step1.outputs.dataInputFileName }}"
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab
        with:
          fetch-depth: 0
          ref: ${{ env.BRANCH_NAME }} 
      - shell: pwsh
        id: step1
        name: Check & Initiate Package Creation Process
        run: |
          $instrumentationKey = "${{ env.APPINSIGHTS }}"
          $defaultPackageVersion = "${{ vars.defaultPackageVersion }}"
          $solutionSupportedBy = "${{ env.SOLUTION_SUPPORTED_BY }}"
          $solutionOfferId = "${{ env.SOLUTION_OFFER_ID }}"
          $runId = "${{ env.RUNID }}"
          $solutionName = "${{ needs.solutionNameDetails.outputs.solutionName }}"
          $pullRequestNumber = "${{ github.event.client_payload.pull_request.number }}"
          $isNewSolution = "${{ env.IS_NEW_SOLUTION }}"
    
          Write-Host "RunId = $runId, defaultPackageVersion = $defaultPackageVersion, solutionOfferId = $solutionOfferId, SOLUTION_NAME = $solutionName, PULL_REQUEST_NUMBER = $pullRequestNumber, isNewSolution = $isNewSolution"
          . ./Tools/Create-Azure-Sentinel-Solution/common/LogAppInsights.ps1
          try
          {
            $customProperties = @{ 'RunId'="$runId"; 'PullRequestNumber'="$pullRequestNumber"; 'EventName'="CreatePackagePR"; 'IsNewSolution'='$isNewSolution';'SolutionOfferId'='$solutionOfferId';'SolutionSupportedBy'='$solutionSupportedBy';'SolutionName'='$solutionName'; }
            Send-AppInsightsEventTelemetry -InstrumentationKey $instrumentationKey -EventName "CreatePackagePR" -CustomProperties $customProperties
        
            if ($solutionName -eq '' -or $null -eq $solutionName)
            {
                Write-Output "::warning:: Package-Creation : Skipping as Solution name is blank."
                Send-AppInsightsTraceTelemetry -InstrumentationKey $instrumentationKey -Message "Execution for CreatePackagePR started and received blank solutionName for Job Run Id : $runId" -Severity Information -CustomProperties $customProperties
            }
            else
            {
                Send-AppInsightsTraceTelemetry -InstrumentationKey $instrumentationKey -Message "Execution for CreatePackagePR started for Solution Name : $solutionName, Job Run Id : $runId" -Severity Information -CustomProperties $customProperties
        
                $baseFolderPath = "${{ env.BASE_FOLDER_PATH }}"
                Set-PSRepository PSGallery -InstallationPolicy Trusted
                Install-Module powershell-yaml
                ./.script/package-automation/package-generator.ps1 $solutionName $pullRequestNumber $runId $instrumentationKey $defaultPackageVersion $solutionOfferId $baseFolderPath $isNewSolution
            }
          }
          catch
          {
            Send-AppInsightsExceptionTelemetry -InstrumentationKey $instrumentationKey -Exception $_.Exception -CustomProperties @{ 'RunId'="$runId"; 'SolutionName'="$solutionName"; 'PullRequestNumber'="$pullRequestNumber"; 'ErrorDetails'="CreatePackagePR : Error occured in catch block: $_"; 'EventName'="CreatePackagePR"; 'SolutionOfferId'="$solutionOfferId"; }
            exit 1
          }


      - name: Upload Artifacts
        id: uploadPackageArtifacts
        uses: actions/upload-artifact@e0057a5b76f2fdad976135e8dd7b691e632b9056
        env:
          BLOBNAME: "${{ steps.step1.outputs.blobName }}"
          PACKAGE_CREATION_PATH: "${{ steps.step1.outputs.packageCreationPath }}"
          DATA_FOLDER_PATH: "${{ steps.step1.outputs.dataFolderPath }}"
          DATA_INPUT_FILE_NAME: "${{ steps.step1.outputs.dataInputFileName }}"
          SOLUTION_NAME: "${{ needs.solutionNameDetails.outputs.solutionName }}"
          SOLUTION_SUPPORTED_BY: "${{ needs.neworexistingsolution.outputs.solutionSupportedBy }}"
          RUNID: "${{ github.event.client_payload.github.runId }}" 
          PULL_REQUEST_NUMBER: "${{ github.event.client_payload.pullRequestNumber }}"
          IS_CREATE_PACKAGE: ${{ steps.step1.outputs.isCreatePackage }}
        if: ${{ success() && (steps.step1.outcome == 'success' && env.IS_CREATE_PACKAGE && env.PACKAGE_CREATION_PATH != '' && env.BLOBNAME != '') }}
        with: 
          name: "${{ env.BLOBNAME }}"
          path: "${{ env.PACKAGE_CREATION_PATH }}"

      - name: Upload Data File Artifacts
        id: uploadDataFileArtifact
        uses: actions/upload-artifact@e0057a5b76f2fdad976135e8dd7b691e632b9056
        env:
          DATA_FOLDER_PATH: "${{ steps.step1.outputs.dataFolderPath }}"
          DATA_INPUT_FILE_NAME: "${{ steps.step1.outputs.dataInputFileName }}"
        if: ${{ success() && (steps.step1.outcome == 'success' && env.DATA_FOLDER_PATH != '' && env.DATA_INPUT_FILE_NAME != '') }}
        with: 
          name: "${{ env.DATA_INPUT_FILE_NAME }}"
          path: "${{ env.DATA_FOLDER_PATH }}"

  updatedExistingPR:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    needs: [solutionNameDetails, neworexistingsolution, createpackage]
    env:
      BLOBNAME: "${{ needs.createpackage.outputs.blobName }}"
      IS_CREATE_PACKAGE: ${{ needs.createpackage.outputs.isCreatePackage }}
      PACKAGE_CREATION_PATH: "${{ needs.createpackage.outputs.packageCreationPath }}"
      DATA_FOLDER_PATH: "${{ needs.createpackage.outputs.dataFolderPath }}"
      DATA_INPUT_FILE_NAME: "${{ needs.createpackage.outputs.dataInputFileName }}"
      PULL_REQUEST_BRANCH_NAME: "${{ github.event.client_payload.pullRequestBranchName }}"
      SOLUTION_NAME: "${{ needs.solutionNameDetails.outputs.solutionName }}"
      PULL_REQUEST_NUMBER: "${{ github.event.client_payload.pull_request.number }}"
      SOLUTION_SUPPORTED_BY: "${{ needs.neworexistingsolution.outputs.solutionSupportedBy }}"
      ACTOR: "${{ github.actor }}"
      ASSIGNEES: "${{ github.event.client_payload.github.actor }}"
      CURRENT_BRANCH_NAME: "${{ github.event.client_payload.pull_request.head.ref }}"
      RUNID: "${{ github.event.client_payload.github.runId }}"
      APPINSIGHTS: "${{ secrets.APPINSIGHTS }}"
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab
      - uses: actions/download-artifact@e9ef242655d12993efdcda9058dee2db83a2cb9b
        with:
          name : "${{ env.BLOBNAME }}"
          path: "${{ env.PACKAGE_CREATION_PATH }}"

      - uses: actions/download-artifact@e9ef242655d12993efdcda9058dee2db83a2cb9b
        with:
          name: "${{ env.DATA_INPUT_FILE_NAME }}"
          path: "${{ env.DATA_FOLDER_PATH }}"

      - name: updateExistingPR
        id: update-existing-pr
        if: ${{ success() && (env.IS_CREATE_PACKAGE && env.PACKAGE_CREATION_PATH != '' && env.BLOBNAME != '') }}
        uses: peter-evans/create-pull-request@5b4a9f6a9e2af26e5f02351490b90d01eb8ec1e5
        with:
          token: "${{env.GITHUB_TOKEN}}"
          committer: GitHub <noreply@github.com>
          signoff: false
          branch: "${{ github.event.client_payload.pull_request.head.ref }}" # EXISTING BRANCH NAME

      - shell: pwsh
        id: createPREvents
        name: createPREvents
        run: |
          . ./Tools/Create-Azure-Sentinel-Solution/common/LogAppInsights.ps1
          $runId = "${{ env.RUNID }}"
          $solutionName = "${{ env.SOLUTION_NAME }}"
          $pullRequestNumber = "${{ env.PULL_REQUEST_NUMBER }}"
          $instrumentationKey = "${{ env.APPINSIGHTS }}"
          $previousStepSuccessValue = "${{ steps.create-new-pr.outcome }}"
          try
          {
            $customProperties = @{ 'RunId'="$runId"; 'SolutionName'="$solutionName"; 'PullRequestNumber'="$pullRequestNumber"; 'EventName'="UpdateExistingPR"; 'update-Existing-pr-output'="$previousStepSuccessValue" }

            Send-AppInsightsTraceTelemetry -InstrumentationKey $instrumentationKey -Message "Execution for updating existing pull request started for Solution Name : $solutionName, Job Run Id : $runId" -Severity Information -CustomProperties $customProperties
            
            Send-AppInsightsEventTelemetry -InstrumentationKey $instrumentationKey -EventName "UpdateExistingPR" -CustomProperties $customProperties
          }
          catch
          {
            $customProperties = @{ 'RunId'="$runId"; 'SolutionName'="$solutionName"; 'PullRequestNumber'="$pullRequestNumber"; 'EventName'="UpdateExistingPR"; 'update-Existing-pr-output'="failed" }
            Send-AppInsightsExceptionTelemetry -InstrumentationKey $instrumentationKey -Exception $_.Exception -CustomProperties $customProperties
            exit 1
          }

  addCommentOnExistingPR:
    needs: [solutionNameDetails, updatedExistingPR]
    if: ${{ success() }}
    uses: ./.github/workflows/addComment.yaml
    with:
      message: "@${{ github.event.client_payload.github.actor }} The requested package for the '${{ needs.solutionNameDetails.outputs.solutionName }}' solution has been generated based on Pull request #${{ github.event.client_payload.pull_request.number }}"
      prNumber: "${{ github.event.client_payload.pull_request.number }}"
