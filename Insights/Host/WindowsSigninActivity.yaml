SchemaVersion: 1.0
DataTypes:
  - DataType: SecurityEvent
Type: KQL
Provider: Sentinel
EntitiesFilter: 
 Host_OsFamily:
  - Windows
RequiredInputFieldsSets: 
 - - Host_HostName
   - Host_NTDomain
 - - Host_HostName
   - Host_DnsDomain
 - - Host_AzureID
 - - Host_OMSAgentID
BaseQuery: |
  let starttime = todatetime('{{StartTimeISO}}');
  let endtime = todatetime('{{EndTimeISO}}');
  let includeScope = 2d;
  let historicalScope = 3d;
  let GetAllLogonsForHost = (v_Host_Name:string, v_Host_NTDomain:string, v_Host_DnsDomain:string, v_Host_AzureID:string, v_Host_OMSAgentID:string){
  let DomainAllowList = dynamic(["NT AUTHORITY", "NT SERVICE", "Font Driver Host", "Window Manager"]);
  let AccountAllowList = dynamic(["SYSTEM","NETWORK SERVICE", "LOCAL SERVICE"]);
  let AllEvents = SecurityEvent
  | where TimeGenerated >= (starttime - historicalScope)
  | where EventID in (4624, 4625)
  | where AccountType != "Machine"
  | where LogonTypeName != "3 - Network"
  | where TargetDomainName !in (DomainAllowList)
  | where (isnotempty(v_Host_AzureID) and v_Host_AzureID =~ _ResourceId) 
  or (isnotempty(v_Host_OMSAgentID) and v_Host_OMSAgentID == SourceComputerId)
  or (Computer hasprefix v_Host_Name and Computer hassuffix v_Host_DnsDomain)
  or (Computer hassuffix v_Host_Name and Computer hasprefix v_Host_NTDomain)
  | extend RelatedRowSet = 'AllEvents'
  | extend HourOfLogin = hourofday(TimeGenerated), DayNumberofWeek = dayofweek(TimeGenerated)
  | project TimeGenerated,  HourOfLogin, EventID, Activity, IpAddress, WorkstationName, Computer, AccountType, TargetAccount, TargetUserName, TargetDomainName, ProcessName, SubjectUserName, PrivilegeList, LogonTypeName, RelatedRowSet, _ResourceId, SourceComputerId ;
  let HostSigninToSystems = materialize(AllEvents
  | where EventID == 4624
  | project-away PrivilegeList 
  | summarize SigninCount= count(), max(HourOfLogin), min(HourOfLogin),  StartTime=min(TimeGenerated), EndTime = max(TimeGenerated), SourceIP = make_set(IpAddress, 25), SourceHost = make_set(WorkstationName, 25), SubjectUserName = make_set(SubjectUserName, 25) by EventID, Activity, Computer, TargetAccount, TargetDomainName, TargetUserName , ProcessName , LogonTypeName, _ResourceId, SourceComputerId
  | extend RelatedRowSet = 'HostSigninToSystems');
  let HostFailedSigninToSystems = materialize(AllEvents
  | where EventID == 4625
  | project-away PrivilegeList
  | summarize SigninCount= count(), max(HourOfLogin), min(HourOfLogin),  StartTime=min(TimeGenerated), EndTime = max(TimeGenerated), SourceIP = make_set(IpAddress, 25), SourceHost = make_set(WorkstationName, 25), SubjectUserName = make_set(SubjectUserName, 25) by EventID, Activity, Computer, TargetAccount, TargetDomainName, TargetUserName , ProcessName , LogonTypeName, _ResourceId, SourceComputerId
  | extend RelatedRowSet = 'HostFailedSigninToSystems');
  union isfuzzy=true AllEvents, HostSigninToSystems, HostFailedSigninToSystems
  | extend timestamp = StartTime, HostCustomEntity = Computer, AccountCustomEntity = TargetAccount, TimeGenerated=coalesce(TimeGenerated, StartTime, TimeGenerated)
  };
  // change {{Host_HostName}} value below to the HostName you are interested in
  GetAllLogonsForHost('{{Host_HostName}}', '{{Host_NTDomain}}', '{{Host_DnsDomain}}', '{{Host_AzureID}}', '{{Host_OMSAgentID}}')
# The queries for the insights.
Insights:
 Id: 4ecc2229-5cbf-4b04-a2ab-0842c5e4d1cd
 DisplayName: Windows sign-in activity
 Description: |
   Summary of successful and failed sign-ins along with anomalous sign-in patterns for the specific host.  Successful sign-ins currently only include interactive and limited to LogonType 2 and 10.
 DefaultTimeRange: 
   BeforeRange: 12h
   AfterRange: 12h
 TableQuery:
  ColumnsDefinitions:
  - Header: "Signin Type"
    OutputType: String
  - Header: "Signin Count"
    OutputType: Number
    SupportDeepLink: true
  - Header: "User Count"
    OutputType: Number
    SupportDeepLink: true
  - Header: "User(s)"
    OutputType: String   
  QueriesDefinitions:

  # HostSigninToSystems
  - Filter:     "where RelatedRowSet =~ 'HostSigninToSystems'"
    Summarize:  "summarize SigninCount = sum(SigninCount), UserCount = dcount(TargetUserName), Users = make_set(TargetUserName, 25)"
    Project:    "project Title = 'Successful', SigninCount, UserCount, Users = case(array_length(Users) > 1, 'Many', array_length(Users) == 1, tostring(Users[0]), 'None')"
    LinkColumnsDefinitions:
    - ProjectedName: SigninCount
      Query: "{{BaseQuery}} | {{RowFilter}}"
    - ProjectedName: UserCount
      Query: "{{BaseQuery}} | {{RowFilter}}"

  # HostFailedSigninToSystems
  - Filter:     "where RelatedRowSet =~ 'HostFailedSigninToSystems'"
    Summarize:  "summarize SigninCount= sum(SigninCount), UserCount = dcount(TargetUserName), Users = make_set(TargetUserName, 25)"
    Project:    "project Title = 'Failed', SigninCount, UserCount, Users = case(array_length(Users) > 1, 'Many', array_length(Users) == 1, tostring(Users[0]), 'None')"
    LinkColumnsDefinitions:
    - ProjectedName: SigninCount
      Query: "{{BaseQuery}} | {{RowFilter}}"
    - ProjectedName: UserCount
      Query: "{{BaseQuery}} | {{RowFilter}}"

  # MostFrequent
  - Filter:     "where RelatedRowSet =~ 'AllEvents' | where EventID == 4624"
    Summarize:  "summarize StartTime=min(TimeGenerated), EndTime = max(TimeGenerated), SourceIP = make_set(IpAddress, 25), SigninCount = count() by TargetDomainName, TargetUserName, EventID | top 1 by SigninCount desc"
    Project:    "project Title = 'Most Frequent', SigninCount, UserCount = 1, Users = TargetUserName"
    LinkColumnsDefinitions:
    - ProjectedName: SigninCount
      Query: "{{BaseQuery}} | {{RowFilter}}"
    - ProjectedName: UserCount
      Query: "{{BaseQuery}} | {{RowFilter}}"

  # LeastFrequent
  - Filter:     "where RelatedRowSet =~ 'AllEvents' | where EventID == 4624"
    Summarize:  "summarize StartTime=min(TimeGenerated), EndTime = max(TimeGenerated), SourceIP = make_set(IpAddress, 25), SigninCount = count() by TargetDomainName, TargetUserName, EventID | top 1 by SigninCount asc"
    Project:    "project Title = 'Least Frequent', SigninCount, UserCount = 1, Users = TargetUserName"
    LinkColumnsDefinitions:
    - ProjectedName: SigninCount
      Query: "{{BaseQuery}} | {{RowFilter}}"
    - ProjectedName: UserCount
      Query: "{{BaseQuery}} | {{RowFilter}}"

 ChartQuery: 
  Title: "Sign-ins over time"
  DataSets: 
   - Query: "where RelatedRowSet =~ 'AllEvents' and EventID == 4624 | summarize Count=count() by Time = bin(TimeGenerated, 1h) | extend Legend = 'Success'"
     XColumnName: "Time"
     YColumnName: "Count"
     LegendColumnName: "Legend"
   - Query: "where RelatedRowSet =~ 'AllEvents' and EventID == 4625 | summarize Count=count() by Time = bin(TimeGenerated, 1h) | extend Legend = 'Failed'"
     XColumnName: "Time"
     YColumnName: "Count"
     LegendColumnName: "Legend"
  Type: LineChart

 AdditionalQuery:
  Text: "See all windows sign-ins"
  Query: "where RelatedRowSet =~ 'AllEvents' | extend SubjectUserName = columnifexists('SubjectUserName', 'EventDoesNotContain') | summarize SigninCount= count(), max(HourOfLogin), min(HourOfLogin),  StartTime=min(TimeGenerated), EndTime = max(TimeGenerated), SourceIP = make_set(IpAddress, 25), SourceHost = make_set(WorkstationName, 25), SubjectUserName = make_set(SubjectUserName, 25), UserCount = dcount(TargetUserName), Users = make_set(TargetUserName, 25) by Activity, TargetDomainName, TargetUserName, ProcessName, LogonTypeName, timestamp, HostCustomEntity, AccountCustomEntity"
