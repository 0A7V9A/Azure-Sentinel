SchemaVersion: '1.0'
Type: KQL
Provider: Sentinel
DataTypes:
  - DataType: SecurityEvent
EntitiesFilter: 
 Host_OsFamily:
  - Windows
RequiredInputFieldsSets: 
 - - Host_HostName
   - Host_NTDomain
 - - Host_HostName
   - Host_DnsDomain
 - - Host_AzureID
 - - Host_OMSAgentID
BaseQuery: |  
  let SystemAccount = datatable(AccountName:string)['NT AUTHORITY\\SYSTEM', 'NT AUTHORITY\\NETWORK SERVICE', 'NT AUTHORITY\\LOCAL SERVICE', 'NT AUTHORITY\\IUSR', 'NTAUTHORITY\\ANONYMOUS LOGON']; 
  let ServiceAccount = SecurityEvent
  | where EventID == '4624'
  | where  Account !contains "Local SYSTEM" and Account !contains  "Local SERVICE" and Account !contains  "Network SERVICE" and Account !contains "NT AUTHORITY"
  | where LogonType == '5'
  | extend AccountName = Account 
  | distinct AccountName;
  let MachineAccount = SecurityEvent     
  | where EventID == '4624'
  | where  Account !contains "Local SYSTEM" and Account !contains  "Local SERVICE" and Account !contains  "Network SERVICE" and Account !contains "NT AUTHORITY"
  | where AccountType == "Machine" 
  | extend AccountName = Account 
  | distinct AccountName;
  let Accounts = (SystemAccount | union (ServiceAccount | distinct AccountName) ) | union ( MachineAccount | distinct AccountName);
  let File = dynamic(['net.exe','net1.exe','wmic.exe', 'mmc.exe', 'powershell.exe', 'dsget.exe', 'dsquery.exe']);
  let Executable = dynamic(['systeminfo', 'qprocess', 'tasklist',  'ver ',  'set']);
  let Commands = dynamic(['user', 'group', 'localgroup', 'useraccount', 'sysaccount', 'view', 'share', 'session', 'computer', 'config workstation', 'config server']);
  let EnumerationsonHost =  (v_Host_Name:string, v_Host_NTDomain:string, v_Host_DnsDomain:string, v_Host_AzureID:string, v_Host_OMSAgentID:string) {
  (union isfuzzy=true
  ( 
  SecurityEvent
  | where EventID == 4688
  | extend FileName=tostring(split(NewProcessName, '\\')[-1])     
  | where ((FileName in~ (File) and (CommandLine !contains '\\'  or  CommandLine !contains '/add' or CommandLine !contains '/delete')) and CommandLine has_any (Commands)) or  ( CommandLine has_any (Executable)) 
  | extend Host_HostName = case(
  Computer has '@', tostring(split(Computer, '@')[0]),
  Computer has '\\', tostring(split(Computer, '\\')[1]),
  Computer has '.', tostring(split(Computer, '.')[0]),
  Computer
  )
  | extend Host_NTDomain = case(
  Computer has '\\', tostring(split(Computer, '\\')[0]), 
  Computer has '.', tostring(split(Computer, '.')[-2]), 
  Computer
  )
  | extend Host_DnsDomain = case(
  Computer has '\\', tostring(split(Computer, '\\')[0]), 
  Computer has '.', strcat_array(array_slice(split(Computer,'.'),-2,-1),'.'), 
  Computer
  )
  | extend SourceComputerId = column_ifexists("SourceComputerId", "NotAvailable"), EventOriginId = column_ifexists("EventOriginId", "NotAvailable")
  | where (Host_HostName =~ v_Host_Name and Host_NTDomain =~ v_Host_NTDomain) 
  or (Host_HostName =~ v_Host_Name and Host_DnsDomain =~ v_Host_DnsDomain) 
  or v_Host_AzureID =~ _ResourceId  
  or v_Host_OMSAgentID == SourceComputerId
  | extend Enumeration_Type = iff(( CommandLine has_any ('view','session','share','computer', 'config workstation', 'config server') or CommandLine has_any (Executable)  or isnotempty(CallerProcessName)), 'Host', 'User')
  | project TimeGenerated, Computer, Enumeration_Type, EventID, SubjectUserName, SubjectUserSid, SubjectLogonId, SubjectDomainName, SourceComputerId, EventOriginId, _ResourceId, Account, AccountType, Process, NewProcessName, CommandLine, ParentProcessName, CallerProcessName, CallerProcessId, Activity, TargetAccount, TargetDomainName, TargetUserName, ManagementGroupName
  | extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer
  ),
  (
  SecurityEvent
  | where EventID in (4798,4799)
  | extend FileName=tostring(split(CallerProcessName, '\\')[-1])
  | where FileName in~ (File)
  | extend Host_HostName = case(
  Computer has '@', tostring(split(Computer, '@')[0]),
  Computer has '\\', tostring(split(Computer, '\\')[1]),
  Computer has '.', tostring(split(Computer, '.')[0]),
  Computer
  )
  | extend Host_NTDomain = case(
  Computer has '\\', tostring(split(Computer, '\\')[0]), 
  Computer has '.', tostring(split(Computer, '.')[-2]), 
  Computer
  )
  | extend Host_DnsDomain = case(
  Computer has '\\', tostring(split(Computer, '\\')[0]), 
  Computer has '.', strcat_array(array_slice(split(Computer,'.'),-2,-1),'.'), 
  Computer
  )
  | extend SourceComputerId = column_ifexists("SourceComputerId", "NotAvailable"), EventOriginId = column_ifexists("EventOriginId", "NotAvailable")
  | where (Host_HostName =~ v_Host_Name and Host_NTDomain =~ v_Host_NTDomain) 
  or (Host_HostName =~ v_Host_Name and Host_DnsDomain =~ v_Host_DnsDomain) 
  or v_Host_AzureID =~ _ResourceId  
  or v_Host_OMSAgentID == SourceComputerId
  | extend Enumeration_Type = 'Group'
  | project TimeGenerated, Computer, Enumeration_Type, EventID, SubjectUserName, SubjectUserSid, SubjectLogonId, SubjectDomainName, SourceComputerId, EventOriginId, _ResourceId, Account, AccountType, Process, NewProcessName, CommandLine, ParentProcessName, CallerProcessName, CallerProcessId, Activity, TargetAccount, TargetDomainName, TargetUserName, ManagementGroupName
  | extend  timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer
  )
  )
  };
  EnumerationsonHost('{{Host_HostName}}', '{{Host_NTDomain}}', '{{Host_DnsDomain}}', '{{Host_AzureID}}', '{{Host_OMSAgentID}}')

Insights:
 Id: 4a70a63d-25c4-6312-b73e-4f302a90c06a
 DisplayName: "Enumeration of hosts, users, groups on host"
 Description: |
  'Provides the number of times enumerations of hosts, users, groups occurred on this host by users and other hosts.'
 DefaultTimeRange: 
  BeforeRange: 12h
  AfterRange: 12h
 TableQuery:
  ColumnsDefinitions:
  - Header: "Enumerated By"
    OutputType: string
    SupportDeepLink: true
  - Header: "Host(s)"
    OutputType: Number
    SupportDeepLink: true
  - Header: "User(s)"
    OutputType: Number
    SupportDeepLink: true
  - Header: "Group(s)"
    OutputType: Number
    SupportDeepLink: true
  - Header: "Total"
    OutputType: Number
    SupportDeepLink: true
  QueriesDefinitions: 
  # Enumerationby_UserAccount
  - Filter:    "where AccountCustomEntity !in (Accounts)"
    Summarize: "summarize UserCount = dcount(Account), Users = make_set(Account), Host_Enum = countif(Enumeration_Type  =~ 'Host'), Account_Enum = countif(Enumeration_Type  =~ 'User'), Group_Enum = countif(Enumeration_Type  =~ 'Group'), All = count()"
    Project:   "project EnumeratedBy = case(array_length(Users) == 1, tostring(Users[0]), array_length(Users) > 1, 'Many', 'None'), Host_Enum, Account_Enum, Group_Enum, All | where EnumeratedBy != 'None'"
    LinkColumnsDefinitions:
    - ProjectedName: Host_Enum
      Query: "{{BaseQuery}} | {{RowFilter}} | where Enumeration_Type =~ 'Host'"
    - ProjectedName: Account_Enum
      Query: "{{BaseQuery}} | {{RowFilter}} | where Enumeration_Type =~ 'User'"
    - ProjectedName: Group_Enum
      Query: "{{BaseQuery}} | {{RowFilter}} | where Enumeration_Type =~ 'Group'"
    - ProjectedName: All
      Query: "{{BaseQuery}} | {{RowFilter}}"
  # Enumerationby_SystemAccount
  - Filter:    "where AccountCustomEntity in (SystemAccount)"
    Summarize: "summarize UserCount = dcount(Account), Users = make_set(Account), Host_Enum = countif(Enumeration_Type  =~ 'Host'), Account_Enum = countif(Enumeration_Type  =~ 'User'), Group_Enum = countif(Enumeration_Type  =~ 'Group'), All = count()"
    Project:   "project EnumeratedBy = case(array_length(Users) == 1, tostring(Users[0]), array_length(Users) > 1, 'Many', 'None'), Host_Enum, Account_Enum, Group_Enum, All | where EnumeratedBy != 'None'"
    LinkColumnsDefinitions:
    - ProjectedName: Host_Enum
      Query: "{{BaseQuery}} | {{RowFilter}} | where Enumeration_Type =~ 'Host'"
    - ProjectedName: Account_Enum
      Query: "{{BaseQuery}} | {{RowFilter}} | where Enumeration_Type =~ 'User'"
    - ProjectedName: Group_Enum
      Query: "{{BaseQuery}} | {{RowFilter}} | where Enumeration_Type =~ 'Group'"
    - ProjectedName: All
      Query: "{{BaseQuery}} | {{RowFilter}}"
  # Enumerationby_MachineAccount
  - Filter:    "where AccountCustomEntity in (MachineAccount)"
    Summarize: "summarize UserCount = dcount(Account), Users = make_set(Account), Host_Enum = countif(Enumeration_Type  =~ 'Host'), Account_Enum = countif(Enumeration_Type  =~ 'User'), Group_Enum = countif(Enumeration_Type  =~ 'Group'), All = count()"
    Project:   "project EnumeratedBy = case(array_length(Users) == 1, tostring(Users[0]), array_length(Users) > 1, 'Many', 'None'), Host_Enum, Account_Enum, Group_Enum, All | where EnumeratedBy != 'None'"
    LinkColumnsDefinitions:
    - ProjectedName: Host_Enum
      Query: "{{BaseQuery}} | {{RowFilter}} | where Enumeration_Type =~ 'Host'"
    - ProjectedName: Account_Enum
      Query: "{{BaseQuery}} | {{RowFilter}} | where Enumeration_Type =~ 'User'"
    - ProjectedName: Group_Enum
      Query: "{{BaseQuery}} | {{RowFilter}} | where Enumeration_Type =~ 'Group'"
    - ProjectedName: All
      Query: "{{BaseQuery}} | {{RowFilter}}"
  # Enumerationby_ServiceAccount
  - Filter:    "where AccountCustomEntity in (ServiceAccount)"
    Summarize: "summarize UserCount = dcount(Account), Users = make_set(Account), Host_Enum = countif(Enumeration_Type  =~ 'Host'), Account_Enum = countif(Enumeration_Type  =~ 'User'), Group_Enum = countif(Enumeration_Type  =~ 'Group'), All = count()"
    Project:   "project EnumeratedBy = case(array_length(Users) == 1, tostring(Users[0]), array_length(Users) > 1, 'Many', 'None'), Host_Enum, Account_Enum, Group_Enum, All | where EnumeratedBy != 'None'"
    LinkColumnsDefinitions:
    - ProjectedName: Host_Enum
      Query: "{{BaseQuery}} | {{RowFilter}} | where Enumeration_Type =~ 'Host'"
    - ProjectedName: Account_Enum
      Query: "{{BaseQuery}} | {{RowFilter}} | where Enumeration_Type =~ 'User'"
    - ProjectedName: Group_Enum
      Query: "{{BaseQuery}} | {{RowFilter}} | where Enumeration_Type =~ 'Group'"
    - ProjectedName: All
      Query: "{{BaseQuery}} | {{RowFilter}}"

 ChartQuery: 
  Title: "Enumerations over time"
  DataSets: 
   - Query: "summarize EnumerationsonHost = count() by Time = bin(TimeGenerated, 12h), Enumeration_Type"
     XColumnName: Time
     YColumnName: EnumerationsonHost
     LegendColumnName: Enumeration_Type
  Type: BarChart
 AdditionalQuery: 
  Text: "See All Enumerations by Host"
  Query: "project TimeGenerated, Computer, EventID, SubjectUserName, Enumeration_Type, SubjectUserSid, SubjectLogonId, SubjectDomainName, SourceComputerId, EventOriginId, _ResourceId, Account, AccountType, Process, NewProcessName, CommandLine, ParentProcessName, CallerProcessName, CallerProcessId, Activity, TargetAccount, TargetDomainName, TargetUserName, ManagementGroupName"
