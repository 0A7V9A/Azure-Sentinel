jobs:
- job: "CallGithubWorkflow"
  pool:
    vmImage: 'ubuntu-latest'

# NAME OF THE JOB THAT DEPENDS
  dependsOn:
  - HyperLinkValidations
  - SolutionValidations
  - JsonFileValidation
  - KqlValidations
  - logoValidator
  - NonAsciiValidations
  - PlaybooksValidations
  - sampleDataValidator
  - WorkbooksTemplateValidations
  - WorkbooksValidations
  - ContentValidations
  - DataConnectorValidations
  - DetectionsValidations
  - DetectionTemplateSchemaValidation
  - DocumentsLinkValidation
  - YamlFileValidation

  condition: |
    and
    (
      ne(variables['SYSTEM.PULLREQUEST.ISFORK'], 'true'),
      ne(variables['Build.SourceBranch'], 'refs/heads/master'),
      eq(dependencies.HyperLinkValidations.result, 'Succeeded'),
      eq(dependencies.SolutionValidations.result, 'Succeeded'),
      eq(dependencies.JsonFileValidation.result, 'Succeeded'),
      eq(dependencies.KqlValidations.result, 'Succeeded'),
      eq(dependencies.logoValidator.result, 'Succeeded'),
      eq(dependencies.NonAsciiValidations.result, 'Succeeded'),
      eq(dependencies.PlaybooksValidations.result, 'Succeeded'),
      eq(dependencies.sampleDataValidator.result, 'Succeeded'),
      eq(dependencies.WorkbooksTemplateValidations.result, 'Succeeded'),
      eq(dependencies.ContentValidations.result, 'Succeeded'),
      eq(dependencies.DataConnectorValidations.result, 'Succeeded'),
      eq(dependencies.DetectionsValidations.result, 'Succeeded'),
      eq(dependencies.DetectionTemplateSchemaValidation.result, 'Succeeded'),
      eq(dependencies.DocumentsLinkValidation.result, 'Succeeded'),
      eq(dependencies.YamlFileValidation.result, 'Succeeded')
    )
  steps:
  - pwsh: |
      try
      {
        $branchName = "$(Build.SourceBranch)"
        Write-Host "Branch Name is $branchName"
        $isAutoGeneratedPR = [bool]($branchName -match "-automated-pr")

        # NOT MAIN/MASTER OR AUTOMATED BRANCH
        if (($branchName -ne 'refs/heads/main' -or $branchName -ne 'refs/heads/master') -and $isAutoGeneratedPR -eq $false)
        {
          $msg = "$(Build.SourceVersionMessage)"
          Write-Host "Message $msg"
          $hashIndex = $msg.IndexOf('#')
          $fromIndex = $msg.IndexOf('from ')
          $prNumberSubstring = $msg.substring($hashIndex + 1)
          $spaceIndex = $prNumberSubstring.IndexOf(' ')
          $prNumber = $prNumberSubstring.substring(0, $spaceIndex)
          $prBranchName = $msg.substring($fromIndex + 5)
          $lastIndexOfSlash = $prBranchName.LastIndexOf('/')
          if ($lastIndexOfSlash -gt 0)
          {
            $prBranchName = $prBranchName.substring($lastIndexOfSlash + 1)
          }
          Write-Host "PR Number is $prNumber, PR Branch Name is $prBranchName"

          # Execute only when branch name and prnumber are not blank or null
          if ($null -ne $prNumber -and $null -ne $prBranchName)
          {
            .script/package-automation/invokeGithubWorklow.ps1 $prBranchName $prNumber
            Write-Host "inside of if condition"
          }
          else
          {
            Write-Host "inside of else condition"
          }
        }
        else
        {
          Write-Host "Skipping Github Workflow from execution as current branch is not a Master branch or is a automated PR."
        }
      }
      catch
      {
        Write-Host "Error occured in callGithubWorkflow $_"
      }
    displayName: 'Call Github Workflow'
    env:
      GITHUB_TOKEN_VALUE: $(githubTokenValue)
    continueOnError: true

