// Name: Suspect Application Consent
// Description: This will alert when the "Consent to application" operation occurs by an user that has not done this operation before or rarely does this.
// This could indicate that permissions to access the listed AzureApp was provided to a malicious actor. Consent to appliction, Add service principal and Add OAuth2PermissionGrant should be rare.
// If available, additional context is added from the AuditLogs based on CorrleationId from the same account that performed "Consent to application"
// Operations such as Add Service Principal, Add app role assignment grant user, Consent to Application, among others.
// To help understand AuditLogs please see - https://docs.microsoft.com/en-us/azure/active-directory/reports-monitoring/reference-audit-activities
// This may help detect the Oauth2 attack that can be initiated by this publicly available tool - https://github.com/fireeye/PwnAuth
//
// Id: 83ba3057-9ea3-4759-bf6a-933f2e5bc7ee
//
// Datasource: #AuditLogs
//
// Severity: Medium
//
// QueryFrequency: 1d
//
// QueryPeriod: 30d
//
// AlertTriggerOperator: gt
//
// AlertTriggerThreshold: 3
//
// Tactics: #Persistence, #LateralMovement, #Collection
//
let current = 1d;
let auditLookback = 30d;
// Setting threshold to 3 as a default, change as needed.  Any operation that has been initiated by a user or app more than 3 times in the past 30 days will be exluded
let threshold = 3;
// Gather initial data from lookback period, excluding current, adjust current to more than a single day if no results
let AuditTrail = AuditLogs | where TimeGenerated >= ago(auditLookback) and TimeGenerated < ago(current)
// 2 other operations that can be part of malicious activity in this situation are "Add OAuth2PermissionGrant" and "Add service principal", replace the below if you are interested in those as starting points
| where OperationName == "Consent to application"
| extend ModProps = TargetResources.[0].modifiedProperties
| extend InitiatedByUserOrApp = tostring(InitiatedBy.user.userPrincipalName)
| extend InitiatedByIPAddress = tostring(InitiatedBy.user.ipAddress)
| extend InitiatedByUserOrApp = iff(isempty(InitiatedByUserOrApp),tostring(InitiatedBy.app.displayName),InitiatedByUserOrApp)
| extend InitiatedByUserOrAppId = tostring(InitiatedBy.user.id)
| extend InitiatedByUserOrAppId = iff(isempty(InitiatedByUserOrAppId),tostring(InitiatedBy.app.servicePrincipalId),InitiatedByUserOrAppId)
| extend TargetName = tolower(tostring(TargetResources.[0].userPrincipalName))
| extend TargetName = tolower(tostring(TargetResources.[0].displayName))
| extend TargetNameId = tostring(TargetResources.[0].id)
| mvexpand ModProps
| extend PropertyName = tostring(ModProps.displayName)
| summarize max(TimeGenerated), OperationCount = count() by OperationName, InitiatedByUserOrApp, InitiatedByIPAddress, TargetName, PropertyName
// only including operations by initiated by a user or app that is above the threshold so we see rare along with has not occurred in last 30 days
//| where OperationCount > threshold
;
// Gather current period of audit data
let RecentOAuth2 = AuditLogs | where TimeGenerated >= ago(current)
| where OperationName == "Consent to application"
| extend ModProps = TargetResources.[0].modifiedProperties
| extend InitiatedByUserOrApp = tostring(InitiatedBy.user.userPrincipalName)
| extend InitiatedByIPAddress = tostring(InitiatedBy.user.ipAddress)
| extend InitiatedByUserOrApp = iff(isempty(InitiatedByUserOrApp),tostring(InitiatedBy.app.displayName),InitiatedByUserOrApp)
| extend InitiatedByUserOrAppId = tostring(InitiatedBy.user.id)
| extend InitiatedByUserOrAppId = iff(isempty(InitiatedByUserOrAppId),tostring(InitiatedBy.app.servicePrincipalId),InitiatedByUserOrAppId)
| extend TargetName = tolower(tostring(TargetResources.[0].userPrincipalName))
| extend TargetName = tolower(tostring(TargetResources.[0].displayName))
| extend TargetNameId = tostring(TargetResources.[0].id)
| mvexpand ModProps
| extend PropertyName = tostring(ModProps.displayName), newValue = replace("\"","",tostring(ModProps.newValue))
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by Type, InitiatedByUserOrApp, InitiatedByUserOrAppId, InitiatedByIPAddress, TargetName, TargetNameId, Category, OperationName, PropertyName, newValue, CorrelationId, Id;
// Exclude previously seen audit activity for "Add OAuth2PermissionGrant" that was seen in the lookback period
let RareOAuth2 = RecentOAuth2 | join kind= leftanti (
AuditTrail 
) on OperationName, InitiatedByUserOrApp,InitiatedByIPAddress, TargetName, PropertyName;
// Get just the InitiatedBy and CorrleationId so we can look at associated audit activity
let Correlate = RareOAuth2 | summarize by InitiatedByUserOrApp, CorrelationId;
// Gather associated activity based on audit activity for "Add OAuth2PermissionGrant" and InitiatedBy and CorrleationId
let CorrelatedEvents = Correlate | join (
AuditLogs | where TimeGenerated >= ago(auditLookback)
| extend ModProps = TargetResources.[0].modifiedProperties
| extend InitiatedByUserOrApp = tostring(InitiatedBy.user.userPrincipalName)
| extend InitiatedByIPAddress = tostring(InitiatedBy.user.ipAddress)
| extend InitiatedByUserOrApp = iff(isempty(InitiatedByUserOrApp),tostring(InitiatedBy.app.displayName),InitiatedByUserOrApp)
| extend InitiatedByUserOrAppId = tostring(InitiatedBy.user.id)
| extend InitiatedByUserOrAppId = iff(isempty(InitiatedByUserOrAppId),tostring(InitiatedBy.app.servicePrincipalId),InitiatedByUserOrAppId)
| extend TargetName = tolower(tostring(TargetResources.[0].userPrincipalName))
| extend TargetName = tolower(tostring(TargetResources.[0].displayName))
| extend TargetNameId = tostring(TargetResources.[0].id)
| mvexpand ModProps
| extend PropertyName = tostring(ModProps.displayName), newValue = replace("\"","",tostring(ModProps.newValue))
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by Type, InitiatedByUserOrApp, InitiatedByUserOrAppId, InitiatedByIPAddress, TargetName, TargetNameId, Category, OperationName, PropertyName, newValue, CorrelationId, Id
) on InitiatedByUserOrApp, CorrelationId;
// Union the results
let Results = union isfuzzy=true
RareOAuth2,CorrelatedEvents;
// newValues that are simple semi-colon separated, make those dynamic for easy viewing and Aggregate into the PropertyUpdate set based on CorrelationId and Id(DirectoryId)
Results
| extend newValue = split(newValue, ";")
| extend PropertyUpdate = pack(PropertyName, newValue, "Id", Id)
| summarize StartTimeUtc = min(StartTimeUtc), EndTimeUtc = max(EndTimeUtc), PropertyUpdateSet = make_bag(PropertyUpdate) by InitiatedByUserOrApp, InitiatedByUserOrAppId, InitiatedByIPAddress, TargetName, TargetNameId, OperationName, CorrelationId
