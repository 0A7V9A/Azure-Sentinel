id: 826bb2f8-7894-4785-9a6b-a8a855d8366f
name: Full Admin policy created and followed by attached to Roles,users or Groups
description: |
  'Identity and Access Management (IAM) securely manages access to AWS services and resources. 
  Identifies when a policy is created with Full Administrators Access (Allow-Action:*,Resource:*). 
  This policy can be attached to role,user or group and may be used by an adversary to escalate a normal user privileges to an adminsitrative level.
  and AWS IAM API at https://docs.aws.amazon.com/IAM/latest/APIReference/API_Operations.html'
requiredDataConnectors:
  - connectorId: AWS
    dataTypes:
      - AWSCloudTrail
queryFrequency: 1d
queryPeriod: 14d
triggerOperator: gt
triggerThreshold: 0
tactics:
  - PrivilegeEscalation
relevantTechniques:
  - T1098
query: |

  let EventNameList = dynamic(["AttachUserPolicy","AttachRolePolicy","AttachGroupPolicy"]);
  let timeframe = 1d;
  let lookback = 14d;
  //Checking for Policy creation event with Full Admin Privileges since lookback period.
  let FullAdminPolicyEvents = AWSCloudTrail
  | where TimeGenerated >= ago(lookback) 
  | where EventName =~ "CreatePolicy"
  | extend PolicyName = tostring(parse_json(RequestParameters).policyName), Statement = parse_json(tostring((parse_json(RequestParameters).policyDocument))).Statement
  | mvexpand Statement
  | extend Action = parse_json(Statement).Action , Effect = tostring(parse_json(Statement).Effect), Resource = tostring(parse_json(Statement).Resource) | mvexpand Action
  | where Effect == "Allow" and tostring(Action) == "*" and Resource == "*"
  | distinct TimeGenerated, EventName, PolicyName, SourceIpAddress, UserIdentityUserName;
  // Joining the list of PolicyNames and checking if it has been attached to any Roles/Users/Groups. 
  // These Roles/Users/Groups will be Privileged and can be used by adversaries as pivot point for privilege escalation via multiple ways.
  FullAdminPolicyEvents
  | join (
  AWSCloudTrail
  | where TimeGenerated >= ago(timeframe)
  | where EventName in (EventNameList)
  | extend PolicyName = tostring(split(tostring(parse_json(RequestParameters).policyArn),"/")[1])
  | summarize EventCount=count(), StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by EventSource, EventName, UserIdentityType , UserIdentityArn , UserIdentityUserName, SourceIpAddress, RequestParameters, PolicyName
  ) on PolicyName 
  | extend timestamp = StartTimeUtc, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName