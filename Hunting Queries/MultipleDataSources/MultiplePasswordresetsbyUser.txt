// Name: Multiple Password Reset by user
// Description: This query will determine multiple password resets by user across multiple data sources. 
// Account manipulation including password reset may aid adversaries in maintaining access to credentials 
// and certain permission levels within an environment.
// 
// Id: 0b9ae89d-8cad-461c-808f-0494f70ad5c4
//
// DataSource: #AuditLogs, #Syslog, #SecurityEvent, #OfficeActivity
//
// Tactics: #InitialAccess, #CredentialAccess
//
let timeframe = 1d;
let PerUserThreshold = 5;
let TotalThreshold = 100;
let PasswordResetMultiDataSource =
(union isfuzzy=true
(
//WEF Password reset events
//4723: An attempt was made to change an account's password
//4724: An attempt was made to reset an accounts password
SecurityEvent
| where TimeGenerated >= ago(timeframe)
| where EventID in ("4723","4724")
| extend DataSource="WEF"
| project DataSource, TimeGenerated, AccountType, Account
| extend AccountCustomEntity = Account
),
(
//Azure Active Directory Password reset events
AuditLogs
| where Category == "UserManagement" and Result == "success"
| where TimeGenerated >= ago(timeframe)
| where OperationName in ("Change user password","Reset user password","Change password (self-service)","Reset password (self-service)")
| extend DataSource="Azure Active Directory"
| extend AccountType = tostring(TargetResources[0].type), Account = tostring(TargetResources[0].userPrincipalName)
| project DataSource, TimeGenerated, AccountType, Account, Computer
| extend AccountCustomEntity = Account, HostCustomEntity = Computer
),
(
//OfficeActive ActiveDirectory Password reset events
OfficeActivity
| where OfficeWorkload == "AzureActiveDirectory" 
| where TimeGenerated >= ago(timeframe)
| where Operation in ("Change user password.","Reset user password.") and ResultStatus =="Success"
| extend DataSource="OfficeActivity", AccountType = UserType, Account = OfficeObjectId 
| project DataSource, TimeGenerated, AccountType, Account
| extend AccountCustomEntity = Account
),
(
// Unix syslog password reset events
Syslog
| where TimeGenerated >= ago(timeframe)
| where Facility in ("auth","authpriv")
| where SyslogMessage contains "password changed for"
| extend AccountType = iif(SyslogMessage contains "root", "Root", "Non-Root"), DataSource="Linux"
| parse SyslogMessage with * "password changed for" Account
| project DataSource, TimeGenerated, AccountType, Account, HostName 
| extend AccountCustomEntity = Account, HostCustomEntity = HostName
)
);
let pwrmd = PasswordResetMultiDataSource
| project DataSource, TimeGenerated,AccountType,Account;
(union isfuzzy=true  
(pwrmd
| summarize min(TimeGenerated), max(TimeGenerated), Total=count() by Account, DataSource
| where Total > PerUserThreshold
| extend Type = "PerUserReset"
| extend AccountCustomEntity = Account
),  
(pwrmd
| summarize min(TimeGenerated), max(TimeGenerated), Total=count() by DataSource
| where Total > TotalThreshold
| extend Type = "TotalUserReset"
)
)
