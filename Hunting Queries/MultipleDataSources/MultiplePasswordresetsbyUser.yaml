id:  0b9ae89d-8cad-461c-808f-0494f70ad5c4
name: Multiple Password Reset by user
description: |
  'This query will determine multiple password resets by user across multiple data sources. 
  Account manipulation including password reset may aid adversaries in maintaining access to credentials 
  and certain permission levels within an environment.'
requiredDataConnectors:
  - connectorId: AzureActiveDirectory
    dataTypes:
     - AuditLogs
  - connectorId: SecurityEvents
    dataTypes:
      - SecurityEvents
  - connectorId: Syslog
    dataTypes:
      - Syslog
  - connectorId: Office365
    dataTypes:
      - OfficeActivity
tactics:
  - InitialAccess
  - CredentialAccess
relevantTechniques:
  - T1078
  - T1110
query: |

  let timeframe = 1d;
  let PerUserThreshold = 5;
  let TotalThreshold = 100;
  let PasswordResetMultiDataSource =
  (union isfuzzy=true
  (//Password reset events
  //4723: An attempt was made to change an account's password
  //4724: An attempt was made to reset an accounts password
  SecurityEvent
  | where TimeGenerated >= ago(timeframe)
  | where EventID in ("4723","4724")
  | project TimeGenerated, Computer, AccountType, Account, Type),
  (//Azure Active Directory Password reset events
  AuditLogs
  | where TimeGenerated >= ago(timeframe)
  | where Category == "UserManagement" and Result == "success"
  | where OperationName in ("Change user password","Reset user password","Change password (self-service)","Reset password (self-service)")
  | extend AccountType = tostring(TargetResources[0].type), Account = tostring(TargetResources[0].userPrincipalName), 
  TargetResourceName = tolower(tostring(TargetResources[0].displayName))
  | project TimeGenerated, AccountType, Account, Computer = TargetResourceName, Type),
  (//OfficeActive ActiveDirectory Password reset events
  OfficeActivity
  | where TimeGenerated >= ago(timeframe)
  | where OfficeWorkload == "AzureActiveDirectory" 
  | where Operation in ("Change user password.","Reset user password.") and ResultStatus =="Success"
  | extend AccountType = UserType, Account = OfficeObjectId 
  | project TimeGenerated, AccountType, Account, Type, Computer = ""),
  (// Unix syslog password reset events
  Syslog
  | where TimeGenerated >= ago(timeframe)
  | where Facility in ("auth","authpriv")
  | where SyslogMessage contains "password changed for"
  | extend AccountType = iif(SyslogMessage contains "root", "Root", "Non-Root")
  | parse SyslogMessage with * "password changed for" Account
  | project TimeGenerated, AccountType, Account, Computer = HostName, Type)
  );
  let pwrmd = PasswordResetMultiDataSource
  | project TimeGenerated, Computer, AccountType, Account, Type;
  (union isfuzzy=true  
  (pwrmd
  | summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Computer = makeset(Computer), AccountType = makeset(AccountType), Total=count() by Account, Type
  | where Total > PerUserThreshold
  | extend ResetPivot = "PerUserReset"),  
  (pwrmd
  | summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Computer = makeset(Computer), Account = tostring(makeset(Account)), AccountType = makeset(AccountType), Total=count() by Type
  | where Total > TotalThreshold
  | extend ResetPivot = "TotalUserReset")
  )
  | extend timestamp = StartTimeUtc, AccountCustomEntity = Account