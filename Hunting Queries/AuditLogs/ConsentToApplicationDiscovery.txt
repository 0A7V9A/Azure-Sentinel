// Name: Consent to Application discovery
// Description: This query looks at the last 30 days for any "Consent to application" operation occurs by a user or app.
// This could indicate that permissions to access the listed AzureApp was provided to a malicious actor. Consent to appliction, Add service principal and Add OAuth2PermissionGrant should be rare.
// If available, additional context is added from the AuditLogs based on CorrleationId from the same account that performed "Consent to application"
// Operations such as Add Service Principal, Add app role assignment grant user, Consent to Application, among others.
// To help understand AuditLogs please see - https://docs.microsoft.com/en-us/azure/active-directory/reports-monitoring/reference-audit-activities
// This may help detect the Oauth2 attack that can be initiated by this publicly available tool - https://github.com/fireeye/PwnAuth
//
// Id: b09d6e57-c48b-491d-9c2b-ab73018e6534
//
// DataSource: #AuditLogs
//
// Tactics: #Persistence, #LateralMovement, #Collection
//
let auditLookback = 30d;
// Setting threshold to 3 as a default, change as needed.  Any operation that has been initiated by a user or app more than 3 times in the past 30 days will be exluded
let threshold = 3;
// Helper function to extract relevant fields from AuditLog events
let auditLogEvents = view (startTimeSpan:timespan)  {
    AuditLogs | where TimeGenerated >= ago(auditLookback)
    | extend ModProps = TargetResources.[0].modifiedProperties
    | extend InitiatedBy = iff(isnotempty(tostring(InitiatedBy.user.userPrincipalName)), tostring(InitiatedBy.user.userPrincipalName),tostring(InitiatedBy.app.displayName))
    | extend TargetName = tolower(tostring(TargetResources.[0].userPrincipalName))
    | extend TargetName = tolower(tostring(TargetResources.[0].displayName))
    | mvexpand ModProps
    | extend PropertyName = tostring(ModProps.displayName), newValue = replace("\"","",tostring(ModProps.newValue));
};
// Get just the InitiatedBy and CorrleationId so we can look at associated audit activity
let historicalEvents = auditLogEvents(30d);
// 2 other operations that can be part of malicious activity in this situation are 
// "Add OAuth2PermissionGrant" and "Add service principal", replace the below if you are interested in those as starting points
let HistoricalConsent = historicalEvents | where OperationName == "Consent to application"
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), OperationCount = count() by Type, InitiatedBy, TargetName, Category, OperationName, PropertyName, newValue, CorrelationId, Id
// Remove comment below to only include operations initiated by a user or app that is above the threshold for the last 30 days
//| where OperationCount > threshold
;
let Correlate = HistoricalConsent | summarize by InitiatedBy, CorrelationId;
let allEvents = auditLogEvents(30d);
// Gather associated activity based on audit activity for "Consent to application" and InitiatedBy and CorrleationId
let CorrelatedEvents = Correlate | join allEvents on InitiatedBy, CorrelationId
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by Type, InitiatedBy, TargetName, Category, OperationName, PropertyName, newValue, CorrelationId, Id
;
// Union the results
let Results = union isfuzzy=true HistoricalConsent,CorrelatedEvents;
// newValues that are simple semi-colon separated, make those dynamic for easy viewing and Aggregate into the PropertyUpdate set based on CorrelationId and Id(DirectoryId)
Results
| extend newValue = split(newValue, ";")
| extend PropertyUpdate = pack(PropertyName, newValue, "Id", Id)
| summarize StartTimeUtc = min(StartTimeUtc), EndTimeUtc = max(EndTimeUtc), PropertyUpdateSet = make_bag(PropertyUpdate) by InitiatedBy, TargetName, OperationName, CorrelationId