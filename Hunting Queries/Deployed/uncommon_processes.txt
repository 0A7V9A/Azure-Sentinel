let ProcessCreationEvents=() {
    let processEvents=SecurityEvent
    | where EventID==4688
    // filter out common randomly named files related to MSI installers and browsers
    | where not(NewProcessName matches regex @"Temp\\\\[0-9]{1}\\\\TRA[0-9A-Fa-f]{3}.tmp")
    | where not(NewProcessName matches regex @"Temp\\\\[0-9]{1}\\\\TRA[0-9A-Fa-f]{4}.tmp")
    | where not(NewProcessName matches regex @"Installer\\\\MSI[0-9A-Fa-f]{3}\.tmp")
    | where not(NewProcessName matches regex @"Installer\\\\MSI[0-9A-Fa-f]{4}\.tmp")
    | project TimeGenerated, ComputerName=Computer, AccountName=SubjectUserName, AccountDomain=SubjectDomainName, FileName=tostring(split(NewProcessName, '\\\\')[-1]), ProcessCommandLine = CommandLine, InitiatingProcessFileName=ParentProcessName;
    processEvents;
};
let normalizedProcesses = ProcessCreationEvents 
| project TimeGenerated, FileName = replace("[0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12}", "<guid>", FileName) // normalize guids
| project TimeGenerated, FileName=replace(@'\d', 'n', FileName); // normalize digits away
let freqs = normalizedProcesses
| summarize frequency=count() by FileName
| join kind= leftouter (
    normalizedProcesses
    | summarize Since=min(TimeGenerated), LastSeen=max(TimeGenerated) by FileName
) on FileName;
freqs 
| where frequency <= toscalar( freqs | serialize | project frequency | summarize percentiles(frequency, 5))
| order by frequency asc
| project FileName, frequency, Since, LastSeen 
// restrict results to unusual processes seen in last day 
| where LastSeen >= ago(1d)